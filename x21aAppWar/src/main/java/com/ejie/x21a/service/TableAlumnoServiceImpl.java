/*
* Copyright 2011 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.Errors;

import com.ejie.x21a.dao.TableAlumnoDao;
import com.ejie.x21a.model.Alumno;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;

/**
 *  * AlumnoServiceImpl generated by UDA, 01-mar-2012 9:33:10.
 * @author UDA
 */

@Service(value = "alumnoService")
public  class TableAlumnoServiceImpl implements TableAlumnoService {

	/**
    * Final static logger.
    */
	private static final  Logger logger = LoggerFactory.getLogger(TableAlumnoServiceImpl.class);
	
	@Autowired
	private TableAlumnoDao alumnoDao;

	/**
	 * Inserts a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @return Alumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Alumno add(Alumno alumno) {
		return this.alumnoDao.add(alumno);
	}

	/**
	 * Updates a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @return Alumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Alumno update(Alumno alumno) {
		return this.alumnoDao.update(alumno);
	 }

	/**
	 * Finds a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @return Alumno
	 */
	public Alumno find(Alumno alumno) {
		return (Alumno) this.alumnoDao.find(alumno);
	}

	/**
	 * Finds a List of rows in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @param tableRequestDto TableRequestDto
	 * @return List
	 */
	public List<Alumno> findAll(Alumno alumno, TableRequestDto tableRequestDto) {
		return (List<Alumno>) this.alumnoDao.findAll(alumno, tableRequestDto);
	}
    
	
	/**
	 * Finds rows in the Alumno table using like.
	 *
	 * @param alumno Alumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Alumno> findAllLike(Alumno alumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		return (List<Alumno>) this.alumnoDao.findAllLike(alumno, tableRequestDto, startsWith);
	}
    
	/**
	 * Deletes a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Alumno alumno) {
		this.alumnoDao.remove(alumno);
	}
	
	/**
	 * Deletes multiple rows in the Alumno table.
	 *
	 * @param alumnoList ArrayList
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(Alumno filterAlumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		this.alumnoDao.removeMultiple(filterAlumno, tableRequestDto, startsWith);
	}


	/**
	 * Getter method for AlumnoDao
	 *
	 * @return AlumnoDao
	 */
	public TableAlumnoDao getAlumnoDao() {
		return this.alumnoDao;
	}
    
	/**
	 * Setter method for AlumnoDao.
	 *
	 * @param  alumnoDao AlumnoDao
	 */
	public void setAlumnoDao(TableAlumnoDao alumnoDao) {
		logger.info("Setting Dependency "+alumnoDao);
		this.alumnoDao = alumnoDao;
	}

	/**
	 * Inserts a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @return Alumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Alumno add(Alumno alumno, Errors errors) {
		this.checkUsernameValid(alumno, errors);
		
		if (!errors.hasErrors()){
			return this.alumnoDao.add(alumno);
		}
		
		return alumno;
	}
	
	/**
	 * Updates a single row in the Alumno table.
	 *
	 * @param alumno Alumno
	 * @return Alumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Alumno update(Alumno alumno, String oldPassword, Errors errors) {
		this.checkOldPasswordValid(alumno, oldPassword, errors);
		this.checkUsernameValid(alumno, errors);
		
		if (!errors.hasErrors()){
			return this.alumnoDao.update(alumno);
		}
		
		return alumno;
	 }
	@Override
	public Alumno getImagen(Alumno alumno){
		return this.alumnoDao.getImagen(alumno);
	}
	
	private void checkOldPasswordValid(Alumno alumno, String oldPassword, Errors errors) {
		if (oldPassword!=null && !"".equals(oldPassword) && !alumnoDao.isOldPasswordValid(alumno, oldPassword)){
			errors.reject("oldPassword", "passwordNoValido");
		}
	}
	
	private void checkUsernameValid(Alumno alumno, Errors errors) {
		if(!alumnoDao.isUsernameValid(alumno)){
			errors.rejectValue("usuario", "usuarioYaExistente");
		}
	}

	@Override
	public List<TableRowDto<Alumno>> search(Alumno filterAlumno, Alumno searchAlumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.alumnoDao.search(filterAlumno, searchAlumno, tableRequestDto, startsWith);
	}
	
	@Override
	public TableResponseDto<Alumno> filter(Alumno filterAlumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		List<Alumno> listaAlumno = this.alumnoDao.findAllLike(filterAlumno, tableRequestDto, false);
		Long recordNum = this.alumnoDao.findAllLikeCount(filterAlumno != null ? filterAlumno : new Alumno(), false);
		TableResponseDto<Alumno> alumnoDto = new TableResponseDto<Alumno>(tableRequestDto, recordNum, listaAlumno);
		if (tableRequestDto.getMultiselection().getSelectedIds() != null && !tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			List<TableRowDto<Alumno>> reorderSelection = this.alumnoDao.reorderSelection(filterAlumno, tableRequestDto, startsWith);
			alumnoDto.setReorderedSelection(reorderSelection);
			alumnoDto.addAdditionalParam("reorderedSelection", reorderSelection);
			alumnoDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds() != null) {
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List<TableRowDto<Alumno>> reorderSeeker = this.alumnoDao.reorderSelection(filterAlumno, tableRequestDto, startsWith);
			alumnoDto.setReorderedSeeker(reorderSeeker);
			alumnoDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return alumnoDto; 
	}

	@Override
	public Object reorderSelection(Alumno alumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.alumnoDao.reorderSelection(alumno, tableRequestDto, startsWith);
	}
}
