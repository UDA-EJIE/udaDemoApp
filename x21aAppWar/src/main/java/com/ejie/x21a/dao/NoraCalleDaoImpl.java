/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/

package com.ejie.x21a.dao;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.NoraCalle;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableRequestDto;

/**
 *  * NoraCalleDaoImpl generated by UDA, 16-ene-2012 13:17:20.
 * @author UDA
 */
 
@Repository
@Transactional
public class NoraCalleDaoImpl implements NoraCalleDao {
	
	public static final String[] ORDER_BY_WHITE_LIST = new String[] {"ID", "CALLECOD", "DSO", "DSE", "PROVINCIAID", "MUNICIPIOID", "TIPOVIA", "TIPOVIAID", "ESTADO"};
	
    private JdbcTemplate jdbcTemplate;
	
	private RowMapper<NoraCalle> rwMap = new RowMapper<NoraCalle>() {
		public NoraCalle mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new NoraCalle(
               resultSet.getBigDecimal("ID"), resultSet.getBigDecimal("CALLECOD"), resultSet.getString("DSO"), resultSet.getString("DSE"), resultSet.getString("PROVINCIAID"), resultSet.getString("MUNICIPIOID"), resultSet.getString("TIPOVIA"), resultSet.getString("TIPOVIAID"), resultSet.getString("ESTADO")
           ); } } ;

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Autowired
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the Calle table.
     *
     * @param calle TableRequestDto
     * @return Calle
     */
	public NoraCalle add(NoraCalle calle) {

    	String query = "INSERT INTO T17_CALLE( ID,CALLE_COD,DS_O,DS_E,PROVINCIA_ID,MUNICIPIO_ID,TIPO_VIA,TIPO_VIA_ID,ESTADO)"
        + "VALUES (?,?,?,?,?,?,?,?,?)";

		this.jdbcTemplate.update(query, calle.getId(), calle.getCalleCod(), calle.getDsO(), calle.getDsE(), calle.getProvinciaId(), calle.getMunicipioId(), calle.getTipoVia(), calle.getTipoViaId(), calle.getEstado());
		return calle;
	}

    /**
     * Updates a single row in the Calle table.
     *
     * @param calle TableRequestDto
     * @return Calle
     */
    public NoraCalle update(NoraCalle calle) {
		String query = "UPDATE T17_CALLE SET  WHERE ID=? AND CALLE_COD=? AND DS_O=? AND DS_E=? AND PROVINCIA_ID=? AND MUNICIPIO_ID=? AND TIPO_VIA=? AND TIPO_VIA_ID=? AND ESTADO=?";
		this.jdbcTemplate.update(query, calle.getId(), calle.getCalleCod(), calle.getDsO(), calle.getDsE(), calle.getProvinciaId(), calle.getMunicipioId(), calle.getTipoVia(), calle.getTipoViaId(), calle.getEstado());
		return calle;
	}

    /**
     * Finds a single row in the Calle table.
     *
     * @param calle TableRequestDto
     * @return Calle
     */
    @Transactional (readOnly = true)
    public NoraCalle find(NoraCalle calle) {
		String query = "SELECT t1.ID ID, t1.CALLE_COD CALLECOD, t1.DS_O DSO, t1.DS_E DSE, t1.PROVINCIA_ID PROVINCIAID, t1.MUNICIPIO_ID MUNICIPIOID, t1.TIPO_VIA TIPOVIA, t1.TIPO_VIA_ID TIPOVIAID, t1.ESTADO ESTADO " 
         + "FROM T17_CALLE t1  " 
         + "WHERE t1.ID = ?   AND t1.CALLE_COD = ?   AND t1.DS_O = ?   AND t1.DS_E = ?   AND t1.PROVINCIA_ID = ?   AND t1.MUNICIPIO_ID = ?   AND t1.TIPO_VIA = ?   AND t1.TIPO_VIA_ID = ?   AND t1.ESTADO = ?    ";
		return (NoraCalle) this.jdbcTemplate.queryForObject(query, 
			rwMap , calle.getId() , calle.getCalleCod() , calle.getDsO() , calle.getDsE() , calle.getProvinciaId() , calle.getMunicipioId() , calle.getTipoVia() , calle.getTipoViaId() , calle.getEstado());	 
    }

    /**
     * Removes a single row in the Calle table.
     *
     * @param calle TableRequestDto
     * @return
     */
    public void remove(NoraCalle calle) {
		String query = "DELETE  FROM T17_CALLE WHERE ID=? AND CALLE_COD=? AND DS_O=? AND DS_E=? AND PROVINCIA_ID=? AND MUNICIPIO_ID=? AND TIPO_VIA=? AND TIPO_VIA_ID=? AND ESTADO=?";
		this.jdbcTemplate.update(query, calle.getId() , calle.getCalleCod() , calle.getDsO() , calle.getDsE() , calle.getProvinciaId() , calle.getMunicipioId() , calle.getTipoVia() , calle.getTipoViaId() , calle.getEstado());
    	}
    
   /**
    * Finds a List of rows in the Calle table.
    * 
    * @param calle Calle
    * @param tableRequestDto TableRequestDto
    * @return List 
    */
	@Transactional (readOnly = true)
    public List<NoraCalle> findAll(NoraCalle calle, TableRequestDto tableRequestDto) {
		StringBuffer where = new StringBuffer(3000);
		List<Object> params = new ArrayList<Object>();
		where.append(" WHERE 1=1 	");
		
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.CALLE_COD CALLECOD,t1.DS_O DSO,t1.DS_E DSE,t1.PROVINCIA_ID PROVINCIAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.TIPO_VIA TIPOVIA,t1.TIPO_VIA_ID TIPOVIAID,t1.ESTADO ESTADO " 
			+ "FROM T17_CALLE t1 ");
		
		if (calle  != null  && calle.getId() != null ) {
			where.append(" AND t1.ID = ?");
			params.add(calle.getId());
		}
		if (calle  != null  && calle.getCalleCod() != null ) {
			where.append(" AND t1.CALLE_COD = ?");
			params.add(calle.getCalleCod());
		}
		if (calle  != null  && calle.getDsO() != null ) {
			where.append(" AND t1.DS_O = ?");
			params.add(calle.getDsO());
		}
		if (calle  != null  && calle.getDsE() != null ) {
			where.append(" AND t1.DS_E = ?");
			params.add(calle.getDsE());
		}
		if (calle  != null  && calle.getProvinciaId() != null ) {
			where.append(" AND t1.PROVINCIA_ID = ?");
			params.add(calle.getProvinciaId());
		}
		if (calle  != null  && calle.getMunicipioId() != null ) {
			where.append(" AND t1.MUNICIPIO_ID = ?");
			params.add(calle.getMunicipioId());
		}
		if (calle  != null  && calle.getTipoVia() != null ) {
			where.append(" AND t1.TIPO_VIA = ?");
			params.add(calle.getTipoVia());
		}
		if (calle  != null  && calle.getTipoViaId() != null ) {
			where.append(" AND t1.TIPO_VIA_ID = ?");
			params.add(calle.getTipoViaId());
		}
		if (calle  != null  && calle.getEstado() != null ) {
			where.append(" AND t1.ESTADO = ?");
			params.add(calle.getEstado());
		}
		query.append(where);

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, NoraCalleDaoImpl.ORDER_BY_WHITE_LIST);
		}
		
		return (List<NoraCalle>) this.jdbcTemplate.query(query.toString(),rwMap, params.toArray());
	}
	
    /**
     * Counts rows in the Calle table.
     * 
     * @param calle Calle
     * @return Long
     */
    @Transactional (readOnly = true)
    public Long findAllCount(NoraCalle calle) {

		StringBuffer where = new StringBuffer(3000);
		List<Object> params = new ArrayList<Object>();
		where.append(" WHERE 1=1  ");

		StringBuffer query = new StringBuffer("SELECT COUNT(1) FROM  T17_CALLE t1  ");
		if (calle  != null  && calle.getId() != null ) {
			where.append(" AND t1.ID = ?");
			params.add(calle.getId());
		}
		if (calle  != null  && calle.getCalleCod() != null ) {
			where.append(" AND t1.CALLE_COD = ?");
			params.add(calle.getCalleCod());
		}
		if (calle  != null  && calle.getDsO() != null ) {
			where.append(" AND t1.DS_O = ?");
			params.add(calle.getDsO());
		}
		if (calle  != null  && calle.getDsE() != null ) {
			where.append(" AND t1.DS_E = ?");
			params.add(calle.getDsE());
		}
		if (calle  != null  && calle.getProvinciaId() != null ) {
			where.append(" AND t1.PROVINCIA_ID = ?");
			params.add(calle.getProvinciaId());
		}
		if (calle  != null  && calle.getMunicipioId() != null ) {
			where.append(" AND t1.MUNICIPIO_ID = ?");
			params.add(calle.getMunicipioId());
		}
		if (calle  != null  && calle.getTipoVia() != null ) {
			where.append(" AND t1.TIPO_VIA = ?");
			params.add(calle.getTipoVia());
		}
		if (calle  != null  && calle.getTipoViaId() != null ) {
			where.append(" AND t1.TIPO_VIA_ID = ?");
			params.add(calle.getTipoViaId());
		}
		if (calle  != null  && calle.getEstado() != null ) {
			where.append(" AND t1.ESTADO = ?");
			params.add(calle.getEstado());
		}
		query.append(where);
		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}
	
	/**
	 * Finds rows in the Calle table using like.
     * 
     * @param calle Calle
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List 
     */
	@Transactional (readOnly = true)
    public List<NoraCalle> findAllLike(NoraCalle calle, TableRequestDto tableRequestDto, Boolean startsWith) {
		StringBuffer where = new StringBuffer(3000);
		List<Object> params = new ArrayList<Object>();
		where.append(" WHERE 1=1 	");
		
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.CALLE_COD CALLECOD,t1.DS_O DSO,t1.DS_E DSE,t1.PROVINCIA_ID PROVINCIAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.TIPO_VIA TIPOVIA,t1.TIPO_VIA_ID TIPOVIAID,t1.ESTADO ESTADO " 
        	+ "FROM T17_CALLE t1 ");
      	
		if (calle  != null  && calle.getId() != null ) {
			where.append(" AND t1.ID like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getId()  +"%");
			}else{
				params.add("%"+calle.getId() +"%");
			}	
			where.append(" AND t1.ID IS NOT NULL");
        }
		if (calle  != null  && calle.getCalleCod() != null ) {
			where.append(" AND t1.CALLE_COD like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getCalleCod()  +"%");
			}else{
				params.add("%"+calle.getCalleCod() +"%");
			}	
			where.append(" AND t1.CALLE_COD IS NOT NULL");
        }
		if (calle  != null  && calle.getDsO() != null ) {
			where.append(" AND UPPER(t1.DS_O) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getDsO().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getDsO().toUpperCase() +"%");
			}	
			where.append(" AND t1.DS_O IS NOT NULL");
        }
		if (calle  != null  && calle.getDsE() != null ) {
			where.append(" AND UPPER(t1.DS_E) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getDsE().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getDsE().toUpperCase() +"%");
			}	
			where.append(" AND t1.DS_E IS NOT NULL");
        }
		if (calle  != null  && calle.getProvinciaId() != null ) {
			where.append(" AND UPPER(t1.PROVINCIA_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getProvinciaId().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getProvinciaId().toUpperCase() +"%");
			}	
			where.append(" AND t1.PROVINCIA_ID IS NOT NULL");
        }
		if (calle  != null  && calle.getMunicipioId() != null ) {
			where.append(" AND UPPER(t1.MUNICIPIO_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getMunicipioId().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getMunicipioId().toUpperCase() +"%");
			}	
			where.append(" AND t1.MUNICIPIO_ID IS NOT NULL");
        }
		if (calle  != null  && calle.getTipoVia() != null ) {
			where.append(" AND UPPER(t1.TIPO_VIA) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getTipoVia().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getTipoVia().toUpperCase() +"%");
			}	
			where.append(" AND t1.TIPO_VIA IS NOT NULL");
        }
		if (calle  != null  && calle.getTipoViaId() != null ) {
			where.append(" AND UPPER(t1.TIPO_VIA_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getTipoViaId().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getTipoViaId().toUpperCase() +"%");
			}	
			where.append(" AND t1.TIPO_VIA_ID IS NOT NULL");
        }
		if (calle  != null  && calle.getEstado() != null ) {
			where.append(" AND UPPER(t1.ESTADO) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(calle.getEstado().toUpperCase()  +"%");
			}else{
				params.add("%"+calle.getEstado().toUpperCase() +"%");
			}	
			where.append(" AND t1.ESTADO IS NOT NULL");
        }
        query.append(where);

        if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, NoraCalleDaoImpl.ORDER_BY_WHITE_LIST);
		}
		
		return (List<NoraCalle>) this.jdbcTemplate.query(query.toString(),rwMap, params.toArray());
	}
}

