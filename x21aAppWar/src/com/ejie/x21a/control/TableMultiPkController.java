package com.ejie.x21a.control;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hdiv.services.TrustAssertion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.hateoas.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.MultiPk;
import com.ejie.x21a.model.TableOptions;
import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.service.TableMultiPkService;
import com.ejie.x21a.util.Constants;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResourceResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.hdiv.annotation.UDALink;
import com.ejie.x38.hdiv.annotation.UDALinkAllower;
import com.ejie.x38.hdiv.util.IdentifiableModelWrapperFactory;
import com.ejie.x38.util.ResourceUtils;


/**
 * MultiPkController generated by UDA, 28-may-2018 16:28:35.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/table/multipk")
public class TableMultiPkController {

	private static final Logger logger = LoggerFactory.getLogger(TableMultiPkController.class);

	@Autowired
	private TableMultiPkService multiPkService;
	
	/*
	 * OPERACIONES CRUD (Create, Read, Update, Delete)
	 * 
	 */
	
	/**
	 * Operacion CRUD Read. Devuelve el bean correspondiente al identificador indicado.
	 * 
	 * @param id String
	 * @return MultiPk 
	 *            Objeto correspondiente al identificador indicado.
	 */
	@UDALink(name = "get", linkTo = { @UDALinkAllower(name = "edit"), @UDALinkAllower(name = "remove"), @UDALinkAllower(name = "filter")})
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Resource<MultiPk> get(@PathVariable @TrustAssertion(idFor = MultiPk.class) String id) {
        MultiPk multiPk = new MultiPk();
		multiPk.setId(id);
        multiPk = this.multiPkService.find(multiPk);
        TableMultiPkController.logger.info("[GET - findBy_PK] : Obtener MultiPk por PK");
        return new Resource<MultiPk>(multiPk);
	}
	
	@UDALink(name = "getFiltroSimple", linkTo = {
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "getTableInlineEdit"),
			@UDALinkAllower(name = "deleteAll") })
	@GetMapping
	public String getFiltroSimple (Model model) {
		model.addAttribute("multiPk", new MultiPk());
		model.addAttribute("options", new TableOptions());
		return "tableMultipk";
	}
	
	@UDALink(name = "getFiltroSimpleDoble", linkTo = {
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "getTableEditForm", linkClass = TableUsuarioController.class),
			@UDALinkAllower(name = "getRoles", linkClass = TableUsuarioController.class),
			@UDALinkAllower(name = "deleteAll") })
	@RequestMapping(method = RequestMethod.GET,value = "/double")
	public String getFiltroSimpleDoble (Model model) {
		model.addAttribute("multiPk", new MultiPk());
		model.addAttribute("options", new TableOptions());
		model.addAttribute("usuario", new Usuario());
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("administrador", "Administrador");
		comboRol.put("desarrollador", "Desarrollador");
		comboRol.put("espectador", "Espectador");
		comboRol.put("informador", "Informador");
		comboRol.put("manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		Map<String,String> comboEjie = new LinkedHashMap<String,String>();
		comboEjie.put("", "---");
		comboEjie.put("0", "No");
		comboEjie.put("1", "Sí");
		model.addAttribute("comboEjie", comboEjie);
		
		return "tableMultipkDoble";
	}
	
	@UDALink(name = "getTableEditForm", linkTo = {
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "edit"),
			@UDALinkAllower(name = "filter")})
	@PostMapping(value = "/editForm")
	public String getTableEditForm (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = false) String pkValue,
			Model model) {
		model.addAttribute(Constants.MODEL_MULTIPK, new MultiPk());
		model.addAttribute(Constants.MODEL_ACTIONTYPE, actionType);
		model.addAttribute(Constants.MODEL_ENCTYPE, Constants.APPLICATION_URLENCODED);
		
		if (pkValue != null) {
			MultiPk multiPk = new MultiPk();
			multiPk.setId(pkValue);
			model.addAttribute(Constants.MODEL_PKVALUE, IdentifiableModelWrapperFactory.getInstance(multiPk));
		}
		
		if (actionType.equals("POST")) {
			model.addAttribute(Constants.MODEL_ENDPOINT, "add");
		} else {
			model.addAttribute(Constants.MODEL_ENDPOINT, "edit");
		}
		
		return "tableMultiPkEditForm";
	}
	
	@UDALink(name = "getTableInlineEdit", linkTo = {
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "edit"),
			@UDALinkAllower(name = "filter") })
	@PostMapping(value = "/inlineEdit")
	public String getTableInlineEdit (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = false) String pkValue,
			Model model) {
		model.addAttribute(Constants.MODEL_MULTIPK, new MultiPk());
		model.addAttribute(Constants.MODEL_ACTIONTYPE, actionType);
		model.addAttribute(Constants.MODEL_ENCTYPE, Constants.APPLICATION_URLENCODED);
		
		if (pkValue != null) {
			MultiPk multiPk = new MultiPk();
			multiPk.setId(pkValue);
			model.addAttribute(Constants.MODEL_PKVALUE, IdentifiableModelWrapperFactory.getInstance(multiPk));
		}
		
		if (actionType.equals("POST")) {
			model.addAttribute(Constants.MODEL_ENDPOINT, "add");
		} else {
			model.addAttribute(Constants.MODEL_ENDPOINT, "edit");
		}
		
		return "tableMultiPkInlineEditAuxForm";
	}

	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parametro.
	 *
	 * @param filterMultiPk MultiPk
	 *            Objeto que contiene los parametros de filtrado utilizados en
	 *            la busqueda.
	 * @return List<MultiPk> 
	 *            Lista de objetos correspondientes a la busqueda realizada.
	 */
	@UDALink(name = "getall", linkTo = { @UDALinkAllower(name = "edit" ), @UDALinkAllower(name = "remove" ), @UDALinkAllower(name = "get" )})
	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody List<Resource<MultiPk>> getAll(@ModelAttribute MultiPk filterMultiPk) {
		TableMultiPkController.logger.info("[GET - find_ALL] : Obtener MultiPk por filtro");
	    return ResourceUtils.fromListToResource(this.multiPkService.findAll(filterMultiPk, null));
	}

	/**
	 * Operacion CRUD Edit. Modificacion del bean indicado.
	 *
	 * @param multiPk MultiPk 
	 *            Bean que contiene la informacion a modificar.
	 * @return MultiPk 
	 *            Bean resultante de la modificacion.
	 */
	@UDALink(name = "edit", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/edit", method = RequestMethod.PUT)
    public @ResponseBody Resource<MultiPk> edit(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.update(multiPk);
		TableMultiPkController.logger.info("[PUT] : MultiPk actualizado correctamente");
        return new Resource<MultiPk>(multiPkAux);
    }

	/**
	 * Operacion CRUD Create. Creacion de un nuevo registro a partir del bean
	 * indicado.
	 *
	 * @param multiPk MultiPk 
	 *            Bean que contiene la informacion con la que se va a crear el
	 *            nuevo registro.
	 * @return MultiPk
	 *            Bean resultante del proceso de creacion.
	 */
	@UDALink(name = "add", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public @ResponseBody Resource<MultiPk> add(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.add(multiPk);
        TableMultiPkController.logger.info("[POST] : MultiPk insertado correctamente");
        return new Resource<MultiPk>(multiPkAux);
	}

	/**
	 * Operacion CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 *
	 * @param id String
	 *            Identificador del objeto que se desea eliminar.
	 * @return MultiPk
	 *            Bean eliminado.
	 */
	@UDALink(name = "remove")
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody Resource<MultiPk> remove(@PathVariable @TrustAssertion(idFor = MultiPk.class) String id) {
        MultiPk multiPk = new MultiPk();
        multiPk.setId(id);
        this.multiPkService.remove(multiPk);
       	TableMultiPkController.logger.info("[DELETE] : MultiPk borrado correctamente");
       	return new Resource<MultiPk>(multiPk);
    }
    
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */

	 /**
	 * Metodo de presentacion del RUP_TABLE.
	 * 
	 * @param model Model
	 * @return String
	 */
	@UDALink(name = "getFormEdit", linkTo = { @UDALinkAllower(name = "deleteAll") })
	@RequestMapping(value = "/maint", method = RequestMethod.GET)
	public String getFormEdit(Model model) {
		TableMultiPkController.logger.info("[GET - View] : multipk");
		return "multipk";
	}
	 
	 /**
	 * Operacion de filtrado del componente RUP_TABLE.
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return TableResponseDto<MultiPk>
	 *            Dto que contiene el resultado del filtrado realizado por el 
	 *            componente RUP_TABLE.
	 */
	@UDALink(name = "filter", linkTo = { 
			@UDALinkAllower(name = "get"), 
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "remove"), 
			@UDALinkAllower(name = "filter"), 
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResourceResponseDto<MultiPk> filter(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableMultiPkController.logger.info("[POST - filter] : Obtener MultiPks");
		return this.multiPkService.filter(filterMultiPk, tableRequestDto, false);
	}
	
	@UDALink(name = "filter2", linkTo = { @UDALinkAllower(name = "get2"), @UDALinkAllower(name = "remove"), @UDALinkAllower(name = "filter2"), @UDALinkAllower(name = "deleteAll")})
	@RequestMapping(value = "/filter2", method = RequestMethod.POST)
	public @ResponseBody TableResourceResponseDto<MultiPk> filter2() {
		TableMultiPkController.logger.info("[POST - filter] : Obtener MultiPks2");
		return this.multiPkService.filter(new MultiPk(), new TableRequestDto(), false);
	}
	 
	/**
	 * Operacion de busqueda del componente RUP_TABLE.
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param searchMultiPk MultiPk
	 *            Bean que contiene los parametros de busqueda a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la bÃºsqueda.
	 * @return TableRowDto<MultiPk> 
	 *            Dto que contiene el resultado de la busqueda realizada por el
	 *            componente RUP_TABLE. 
	 */
	@UDALink(name = "search", linkTo = { @UDALinkAllower(name = "filter")})
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<MultiPk>> search(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody(param="search") MultiPk searchMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableMultiPkController.logger.info("[POST - search] : Buscar MultiPks");
		return this.multiPkService.search(filterMultiPk, searchMultiPk, tableRequestDto, false);
	}
	
	/**
	 * Borrado multiple de registros
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la busqueda.
	 * @return List<String>
	 *            Lista de los identificadores de los registros eliminados.
	 * 
	 */
	@UDALink(name = "deleteAll")
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableMultiPkController.logger.info("[POST - search] : [POST - removeMultiple] : Eliminar multiples MultiPks");
		this.multiPkService.removeMultiple(filterMultiPk, tableRequestDto, false);
		TableMultiPkController.logger.info("All entities correctly deleted!");
		
		return tableRequestDto.getMultiselection().getSelectedIds();
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve los datos exportados de la tabla.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 */
	@UDALink(name = "clipboardReport")
	@PostMapping(value = "/filter", params = "clipboardReport")
	public @ResponseBody List<Resource<MultiPk>> getClipboardReport(
			@RequestJsonBody(param = "filter", required = false) MultiPk filterMultiPk,
			@RequestParam(required = false) String[] columns, 
			@RequestParam(required = false) String[] columnsName,
			@RequestParam(required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableMultiPkController.logger.info("[POST - clipboardReport] : Copiar multiples multipk");
		return ResourceUtils.fromListToResource(this.multiPkService.getDataForReports(filterMultiPk, tableRequestDto));
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filterMultiPk Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@UDALink(name = "excelReport")
	@RequestMapping(value = {"/xlsReport" , "/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateExcelReport(
			@RequestJsonBody(param = "filter", required = false) MultiPk filterMultiPk, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableMultiPkController.logger.info("[POST - generateExcelReport] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.multiPkService.generateReport(filterMultiPk, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filterMultiPk Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@UDALink(name = "pdfReport")
	@RequestMapping(value = "pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generatePDFReport(
			@RequestJsonBody(param = "filter", required = false) MultiPk filterMultiPk, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableMultiPkController.logger.info("[POST - generatePDFReport] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.multiPkService.generateReport(filterMultiPk, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filterMultiPk Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@UDALink(name = "odsReport")
	@RequestMapping(value = "odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateODSReport(
			@RequestJsonBody(param = "filter", required = false) MultiPk filterMultiPk, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableMultiPkController.logger.info("[POST - generateODSReport] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.multiPkService.generateReport(filterMultiPk, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filterMultiPk Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@UDALink(name = "csvReport")
	@RequestMapping(value = "csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateCSVReport(
			@RequestJsonBody(param = "filter", required = false) MultiPk filterMultiPk, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableMultiPkController.logger.info("[POST - generateCSVReport] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.multiPkService.generateReport(filterMultiPk, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
}	
