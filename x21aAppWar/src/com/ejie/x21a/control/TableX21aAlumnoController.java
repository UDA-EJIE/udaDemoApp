package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.X21aAlumno;
import com.ejie.x21a.service.TableX21aAlumnoService;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * X21aAlumnoController generated by UDA, 15-nov-2018 9:05:37.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/x21aalumno")

public class TableX21aAlumnoController  {

	private static final Logger logger = LoggerFactory.getLogger(TableX21aAlumnoController.class);

	@Autowired
	private TableX21aAlumnoService x21aAlumnoService;
	
	/*
	 * OPERACIONES CRUD (Create, Read, Update, Delete)
	 * 
	 */
	
	/**
	 * Operacion CRUD Read. Devuelve el bean correspondiente al identificador indicado.
	 * 
	 * @param id BigDecimal
	 * @return X21aAlumno 
	 *            Objeto correspondiente al identificador indicado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody X21aAlumno get(@PathVariable BigDecimal id) {
        X21aAlumno x21aAlumno = new X21aAlumno();
		x21aAlumno.setId(id);
        x21aAlumno = this.x21aAlumnoService.find(x21aAlumno);
        TableX21aAlumnoController.logger.info("[GET - findBy_PK] : Obtener X21aAlumno por PK");
        return x21aAlumno;
	}

	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parametro.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 *            Objeto que contiene los parametros de filtrado utilizados en
	 *            la busqueda.
	 * @return List<X21aAlumno> 
	 *            Lista de objetos correspondientes a la busqueda realizada.
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody List<X21aAlumno> getAll(@ModelAttribute X21aAlumno filterX21aAlumno) {
		TableX21aAlumnoController.logger.info("[GET - find_ALL] : Obtener X21aAlumno por filtro");
	    return this.x21aAlumnoService.findAll(filterX21aAlumno, null);
	}

	/**
	 * Operacion CRUD Edit. Modificacion del bean indicado.
	 *
	 * @param x21aAlumno X21aAlumno 
	 *            Bean que contiene la informacion a modificar.
	 * @return X21aAlumno 
	 *            Bean resultante de la modificacion.
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody X21aAlumno edit(@RequestBody X21aAlumno x21aAlumno) {		
        X21aAlumno x21aAlumnoAux = this.x21aAlumnoService.update(x21aAlumno);
		TableX21aAlumnoController.logger.info("[PUT] : X21aAlumno actualizado correctamente");
        return x21aAlumnoAux;
    }

	/**
	 * Operacion CRUD Create. Creacion de un nuevo registro a partir del bean
	 * indicado.
	 *
	 * @param x21aAlumno X21aAlumno 
	 *            Bean que contiene la informacion con la que se va a crear el
	 *            nuevo registro.
	 * @return X21aAlumno
	 *            Bean resultante del proceso de creacion.
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody X21aAlumno add(@RequestBody X21aAlumno x21aAlumno) {		
        X21aAlumno x21aAlumnoAux = this.x21aAlumnoService.add(x21aAlumno);
        TableX21aAlumnoController.logger.info("[POST] : X21aAlumno insertado correctamente");
    	return x21aAlumnoAux;
	}

	/**
	 * Operacion CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 *
	 * @param id BigDecimal
	 *            Identificador del objeto que se desea eliminar.
	 * @return X21aAlumno
	 *            Bean eliminado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody X21aAlumno remove(@PathVariable BigDecimal id) {
        X21aAlumno x21aAlumno = new X21aAlumno();
        x21aAlumno.setId(id);
        this.x21aAlumnoService.remove(x21aAlumno);
       	TableX21aAlumnoController.logger.info("[DELETE] : X21aAlumno borrado correctamente");
       	return x21aAlumno;
    }
    
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */

	 /**
	 * Metodo de presentacion del RUP_TABLE.
	 * 
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "/maint", method = RequestMethod.GET)
	public String getFormEdit(Model model) {
		TableX21aAlumnoController.logger.info("[GET - View] : x21aalumno");
		return "x21aalumno";
	}
	 
	 /**
	 * Operacion de filtrado del componente RUP_TABLE.
	 * 
	 * @param filterX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return TableResponseDto<X21aAlumno>
	 *            Dto que contiene el resultado del filtrado realizado por el 
	 *            componente RUP_TABLE.
	 */
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<X21aAlumno> filter(
			@RequestJsonBody(param="filter") X21aAlumno filterX21aAlumno,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - filter] : Obtener X21aAlumnos");
		return this.x21aAlumnoService.filter(filterX21aAlumno, tableRequestDto, false);
	}
	 
	/**
	 * Operacion de busqueda del componente RUP_TABLE.
	 * 
	 * @param filterX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param searchX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de busqueda a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la b√∫squeda.
	 * @return TableRowDto<X21aAlumno> 
	 *            Dto que contiene el resultado de la busqueda realizada por el
	 *            componente RUP_TABLE. 
	 */
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<X21aAlumno>> search(
			@RequestJsonBody(param="filter") X21aAlumno filterX21aAlumno,
			@RequestJsonBody(param="search") X21aAlumno searchX21aAlumno,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - search] : Buscar X21aAlumnos");
		return this.x21aAlumnoService.search(filterX21aAlumno, searchX21aAlumno, tableRequestDto, false);
	}
	
	/**
	 * Borrado multiple de registros
	 * 
	 * @param filterX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la busqueda.
	 * @return List<String>
	 *            Lista de los identificadores de los registros eliminados.
	 * 
	 */
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple(
			@RequestJsonBody(param="filter") X21aAlumno filterX21aAlumno,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - search] : [POST - removeMultiple] : Eliminar multiples X21aAlumnos");
		this.x21aAlumnoService.removeMultiple(filterX21aAlumno, tableRequestDto, false);
		TableX21aAlumnoController.logger.info("All entities correctly deleted!");
		
		return tableRequestDto.getMultiselection().getSelectedIds();
	}
	
	/*
	 * METODOS COMPONENTE RUP_TABLE - JERARQUIA
	 */
	
	/**
	 * Operacion de filtrado del componente RUP_TABLE para presentar los
	 * registros mediante visualizacion jerarquica.
	 * 
	 * @param filterX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 *            Dto que contiene el resultado del filtrado realizado por el
	 *            componente RUP_TABLE. 
	 */
	@RequestMapping(value = "/jerarquia/filter", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquia(
			@RequestJsonBody(param="filter") X21aAlumno filterX21aAlumno,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - jerarquia] : Obtener X21aAlumnos jerarquia");
		return this.x21aAlumnoService.jerarquia(filterX21aAlumno, tableRequestDto, false);
	}
	
	/**
	 * Recupera los hijos de los registros desplegados en la visualizacion jerarquica.
	 * 
	 * @param filterX21aAlumno X21aAlumno
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 *            Dto que contiene el resultado del filtrado realizado por el
	 *            componente RUP_TABLE. 
	 */
	@RequestMapping(value = "/jerarquiaChildren", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquiaChildren(
			@RequestJsonBody(param="filter") X21aAlumno  filterX21aAlumno ,
			@RequestJsonBody TableRequestDto  tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - jerarquia] : Obtener X21aAlumnos jerarquia - Hijos");
		return this.x21aAlumnoService.jerarquiaChildren(filterX21aAlumno, tableRequestDto);
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 */	
	@RequestMapping(value = "/clipboardReport", method = RequestMethod.POST)
	protected @ResponseBody List<X21aAlumno> getClipboardReport(
			@RequestJsonBody(param = "filter", required = false) X21aAlumno filterX21aAlumno,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableX21aAlumnoController.logger.info("[POST - clipboardReport] : Copiar multiples X21aAlumnos");
		return this.x21aAlumnoService.getDataForReports(filterX21aAlumno, tableRequestDto);
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = {"/xlsReport" , "/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateExcelReport(
			@RequestJsonBody(param = "filter", required = false) X21aAlumno filterX21aAlumno, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableX21aAlumnoController.logger.info("[POST - generateExcelReport] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.x21aAlumnoService.generateReport(filterX21aAlumno, columns, fileName, sheetTitle, tableRequestDto, locale, request, response);
    }
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generatePDFReport(
			@RequestJsonBody(param = "filter", required = false) X21aAlumno filterX21aAlumno, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableX21aAlumnoController.logger.info("[POST - generatePDFReport] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.x21aAlumnoService.generateReport(filterX21aAlumno, columns, fileName, sheetTitle, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateODSReport(
			@RequestJsonBody(param = "filter", required = false) X21aAlumno filterX21aAlumno, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableX21aAlumnoController.logger.info("[POST - generateODSReport] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.x21aAlumnoService.generateReport(filterX21aAlumno, columns, fileName, sheetTitle, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateCSVReport(
			@RequestJsonBody(param = "filter", required = false) X21aAlumno filterX21aAlumno, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableX21aAlumnoController.logger.info("[POST - generateCSVReport] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.x21aAlumnoService.generateReport(filterX21aAlumno, columns, fileName, sheetTitle, tableRequestDto, locale, request, response);
	}
}	
