/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.service.JQGridUsuarioJerarquiaService;
import com.ejie.x21a.validation.group.UsuarioAddValidation;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.JQGridRequestDto;
import com.ejie.x38.dto.JQGridResponseDto;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.rup.table.filter.model.Filter;
import com.ejie.x38.rup.table.filter.service.FilterService;
import com.ejie.x38.util.ObjectConversionManager;
/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
* @author UDA
 */
@Controller
@RequestMapping (value = "/jqGridUsuarioJerarquia")
public class JQGridUsuarioJerarquiaController  {

	private static final Logger logger = LoggerFactory.getLogger(JQGridUsuarioJerarquiaController.class);
	@Autowired
	private FilterService filterService;
	
	@Autowired
	private JQGridUsuarioJerarquiaService jqGridUsuarioJerarquiaService;
	
	/*
	 * OPERACIONES CRUD
	 * 
	 * Metodos correspondientes a las operaciones CRUD (Create, Read, Update, Delete). 
	 * 
	 */
	
	/**
	 * Operación CRUD Read. Devuelve el bean correspondiente al identificador
	 * indicado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea recuperar.
	 * @return Objeto correspondiente al identificador indicado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Usuario get(@PathVariable String id) {
        Usuario usuario = new Usuario();
		usuario.setId(id);
        usuario = this.jqGridUsuarioJerarquiaService.find(usuario);
        
        return usuario;
	}
	
	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parámetro.
	 * 
	 * @param Usuario
	 *            Objeto que contiene los parámetros de filtrado utilizados en
	 *            la búsqueda.
	 * @return Lista de objetos correspondientes a la búsqueda realizada.
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(@ModelAttribute() Usuario usuarioFilter){
		JQGridUsuarioJerarquiaController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return this.jqGridUsuarioJerarquiaService.findAllLike(usuarioFilter, null, false);
	}
	
	/**
	 * Operación CRUD Edit. Modificación del bean indicado.
	 * 
	 * @param Usuario
	 *            Bean que contiene la información a modificar.
	 * @return Bean resultante de la modificación.
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Usuario edit(@Validated @RequestBody Usuario usuario) {
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioJerarquiaService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }

	/**
	 * Operación CRUD Create. Creación de un nuevo registro a partir del bean
	 * indicado.
	 * 
	 * @param Usuario
	 *            Bean que contiene la información con la que se va a crear el
	 *            nuevo registro.
	 * @return Bean resultante del proceso de creación.
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Usuario add(@Validated(value={UsuarioAddValidation.class}) @RequestBody Usuario usuario) {		
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioJerarquiaService.add(usuario);
        logger.info("Entity correctly inserted!");
    	return usuarioAux;
	}
	
	/**
	 * Operación CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea eliminar.
	 * @return Bean eliminado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Usuario remove(@PathVariable(value="id") String id, HttpServletResponse  response) {
        Usuario usuario = new Usuario();
        usuario.setId(id);
        this.jqGridUsuarioJerarquiaService.remove(usuario);
        logger.info("Entity correctly deleted!");
        return usuario;
    }
	
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */
	
	/**
	 * Operación de filtrado del componente RUP_TABLE.
	 * 
	 * @param Usuario
	 *            Bean que contiene los parámetros de filtrado a emplear.
	 * @param JQGridRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado del filtrado realizado por el
	 *         componente RUP_TABLE.
	 * 
	 */
//	@Json(mixins={@JsonMixin(target=Usuario.class, mixin=UsuarioMixIn.class)})
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody JQGridResponseDto<Usuario> filter(
			@RequestJsonBody(param="filter") Usuario usuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto) {
		JQGridUsuarioJerarquiaController.logger.info("[GET - jqGrid] : Obtener Usuarios");
		
		return jqGridUsuarioJerarquiaService.filter(usuario, jqGridRequestDto, false);
	}
	
	
	@RequestMapping(value = "/multiFilter/getDefault", method = RequestMethod.GET)
	public @ResponseBody Filter filterGetDefault(
		@RequestParam(value = "filterSelector", required = true) String filterSelector,
		@RequestParam(value = "user", required = true) String filterUser) {
		JQGridUsuarioJerarquiaController.logger.info("[get - jqGrid] : getDefault filter");
		 return filterService.getDefault(filterSelector, filterUser);
	}
	
	
	@RequestMapping(value = "/multiFilter/add", method = RequestMethod.POST)
	public @ResponseBody Filter filterAdd(@RequestJsonBody(param="filtro") Filter filtro){
		JQGridUsuarioJerarquiaController.logger.info("[POST - jqGrid] : add filter");
		
		 return filterService.insert(filtro);
	}	
	

	
	@RequestMapping(value = "/multiFilter/delete", method = RequestMethod.POST)
	public @ResponseBody Filter  filterDelete(
			@RequestJsonBody(param="filtro") Filter filtro) {
		JQGridUsuarioJerarquiaController.logger.info("[POST - jqGrid] : delete filter");
		return  filterService.delete(filtro);
	}
	
	

	
	
	
	@RequestMapping(value = "/multiFilter/getAll", method = RequestMethod.GET)
	public @ResponseBody List<Filter> filterGetAll(
		@RequestParam(value = "filterSelector", required = true) String filterSelector,
		@RequestParam(value = "user", required = true) String filterUser) {
		JQGridUsuarioJerarquiaController.logger.info("[get - jqGrid] : GetAll filter");
		 return filterService.getAllFilters(filterSelector,filterUser);
	}
	
	
	
	/**
	 * Operación de búsqueda del componente RUP_TABLE.
	 * 
	 * @param Usuario
	 *            Bean que contiene los parámetros de búsqueda a emplear.
	 * @param JQGridRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en la búsqueda.
	 * @return Lista de lineas de la tabla que se corresponden con los registros
	 *         que se ajustan a los parámetros de búsqueda.
	 * 
	 */
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody Object search(
			@RequestJsonBody(param="filter") Usuario usuarioFilter,
			@RequestJsonBody(param="search") Usuario usuarioSearch,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto){
		
		JQGridUsuarioJerarquiaController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return jqGridUsuarioJerarquiaService.search(usuarioFilter, usuarioSearch, jqGridRequestDto, true);
	}
	
	/**
	 * Operación de filtrado del componente RUP_TABLE para presentar los
	 * registros medainte una visualización jerárquica.
	 * 
	 * @param Usuario
	 *            Bean que contiene los parámetros de filtrado a emplear.
	 * @param JQGridRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado del filtrado realizado por el
	 *         componente RUP_TABLE.
	 * 
	 */
	@RequestMapping(value = "/jerarquia/filter", method = RequestMethod.POST)
	public @ResponseBody JQGridResponseDto<JerarquiaDto<Usuario>> jerarquia(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto) {
		JQGridUsuarioJerarquiaController.logger.info("[GET - jqGrid] : Obtener Usuarios Jerarquia");
		return this.jqGridUsuarioJerarquiaService.jerarquia(filterUsuario, jqGridRequestDto, false);
	}
	
	/**
	 * Recupera los hijos de los registros desplegados en la visualización jerárquica.
	 * 
	 * @param Usuario
	 *            Bean que contiene los parámetros de filtrado a emplear.
	 * @param JQGridRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado a mostrar en el componente RUP_TABLE.
	 * 
	 */
	@RequestMapping(value = "/jerarquiaChildren", method = RequestMethod.POST)
	public @ResponseBody JQGridResponseDto<JerarquiaDto<Usuario>> jerarquiaChildren (
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto){
		JQGridUsuarioJerarquiaController.logger.info("[GET - jqGrid] : Obtener Jerarquia - Hijos");
		return this.jqGridUsuarioJerarquiaService.jerarquiaChildren(filterUsuario, jqGridRequestDto);
	}
		
	/**
	 * N/A	
	 */
		
	/**
	 * Method 'getAllCount'.
	 * 
	 * @param filterUsuario
	 *            Usuario
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody
	Long getAllCount(
			@RequestParam(value = "usuario", required = false) Usuario filterUsuario) {
		return jqGridUsuarioJerarquiaService.findAllLikeCount(
				filterUsuario != null ? filterUsuario : new Usuario(), false);
	}

	/**
	 * Method 'removeAll'.
	 * 
	 * @param usuarioIds
	 *            ArrayList
	 * 
	 */
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody
	List<List<String>> removeMultiple(@RequestBody List<List<String>> usuarioIds) {
		List<Usuario> usuarioList = new ArrayList<Usuario>();
		for (List<String> usuarioId : usuarioIds) {
			Iterator<String> iterator = usuarioId.iterator();
			Usuario usuario = new Usuario();
			usuario.setId(ObjectConversionManager.convert(iterator.next(),
					String.class));
			usuarioList.add(usuario);
		}
		this.jqGridUsuarioJerarquiaService.removeMultiple(usuarioList);
		logger.info("All entities correctly deleted!");
		return usuarioIds;
	}
	
	
	/** 
	 * Recupera los diferentes usuarios para el combo de padres
	 */
	@RequestMapping(value = "/combo/padres", method = RequestMethod.GET)
	public @ResponseBody
	List<Usuario> getParentsCombo() {
		List<Usuario> listaUsuarios = this.jqGridUsuarioJerarquiaService.findAll(new Usuario(), new JQGridRequestDto());
		logger.info("All entities correctly deleted!");
		return listaUsuarios;
	}
	
}