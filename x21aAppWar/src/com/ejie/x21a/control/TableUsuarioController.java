/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, VersiÃ³n 1.1 exclusivamente (la Â«LicenciaÂ»);
* Solo podrÃ¡ usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislaciÃ³n aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye Â«TAL CUALÂ»,
* SIN GARANTÃ�AS NI CONDICIONES DE NINGÃšN TIPO, ni expresas ni implÃ­citas.
* VÃ©ase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.support.ByteArrayMultipartFileEditor;

import com.ejie.x21a.exception.X21aRuntimeException;
import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.Localidad;
import com.ejie.x21a.model.MultiPk;
import com.ejie.x21a.model.TableOptions;
import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.model.Usuario2;
import com.ejie.x21a.service.JQGridUsuarioService;
import com.ejie.x21a.service.TableUsuarioService;
import com.ejie.x21a.service.UsuarioService;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.JQGridRequestDto;
import com.ejie.x38.dto.JQGridResponseDto;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.rup.table.filter.model.Filter;
import com.ejie.x38.rup.table.filter.service.FilterService;
import com.ejie.x38.util.DateTimeManager;
import com.ejie.x38.validation.ValidationManager;

/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
 * 
 * @author UDA
 */

@Controller
@RequestMapping (value = "/table")
public class TableUsuarioController  {

	private static final Logger logger = LoggerFactory.getLogger(TableUsuarioController.class);
	public static final String MODEL_USUARIO = "usuario";
	public static final String MODEL_OPTIONS = "options";

	@Autowired
	private JQGridUsuarioService jqGridUsuarioService;
	
	@Autowired
	private TableUsuarioService tableUsuarioService;
	
	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private FilterService filterService;
	
	@Autowired
	   private ValidationManager validationManager;
	
	@Resource
	private ReloadableResourceBundleMessageSource messageSource;
	
	@InitBinder
	protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws ServletException {
		binder.registerCustomEditor(byte[].class,new ByteArrayMultipartFileEditor());
		binder.registerCustomEditor(Date.class, new CustomDateEditor(DateTimeManager.getDateTimeFormat(LocaleContextHolder.getLocale()), true));
		NumberFormat numberFormat = NumberFormat.getInstance(LocaleContextHolder.getLocale());
		binder.registerCustomEditor(BigDecimal.class, new CustomNumberEditor(BigDecimal.class, numberFormat, true));
	}

	/*
	 * OPERACIONES CRUD
	 * 
	 * Metodos correspondientes a las operaciones CRUD (Create, Read, Update, Delete). 
	 * 
	 */
	
	/**
	 * OperaciÃ³n CRUD Read. Devuelve el bean correspondiente al identificador
	 * indicado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea recuperar.
	 * @return Objeto correspondiente al identificador indicado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Usuario get(@PathVariable String id) {
        Usuario usuario = new Usuario();
		usuario.setId(id);
        usuario = this.jqGridUsuarioService.find(usuario);
        
        return usuario;
	}
	
	@RequestMapping(value = "/{bis}/{id}", method = RequestMethod.GET)
	public @ResponseBody Usuario get2(@PathVariable String id) {
        Usuario usuario = new Usuario();
		usuario.setId(id);
        usuario = this.jqGridUsuarioService.find(usuario);
        
        return usuario;
	}
	
	@RequestMapping(value = "/configurable", method = RequestMethod.GET)
	public String getFiltroSimple (Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		return "table";
	}

	@RequestMapping(value = "/double", method = RequestMethod.GET)
	public String getTableDouble (Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		return "tableDouble";
	}
	
	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parÃ¡metro.
	 * 
	 * @param usuarioFilter
	 *            Objeto que contiene los parÃ¡metros de filtrado utilizados en
	 *            la bÃºsqueda.
	 * @return Lista de objetos correspondientes a la bÃºsqueda realizada.
	 */
	@RequestMapping(value = "/all",method = RequestMethod.GET)
	public @ResponseBody
	List<Usuario> getAll(@ModelAttribute() Usuario usuarioFilter){
		TableUsuarioController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return this.jqGridUsuarioService.findAllLike(usuarioFilter, null, false);
	}
	
	/**
	 * OperaciÃ³n CRUD Edit. ModificaciÃ³n del bean indicado.
	 * 
	 * @param usuario
	 *            Bean que contiene la informaciÃ³n a modificar.
	 * @return Bean resultante de la modificaciÃ³n.
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Usuario edit(@RequestJsonBody Usuario usuario) {
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }
	
	@RequestMapping(value = "/{bis}", method = RequestMethod.PUT)
    public @ResponseBody Usuario edit2(@RequestJsonBody Usuario usuario) {
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }
	
	@RequestMapping(value = "/editar", method = RequestMethod.PUT, produces="application/json")
    public @ResponseBody Usuario editar(
    		@Validated @ModelAttribute Usuario usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen,
    HttpServletRequest request, HttpServletResponse response){
		System.out.print("USUARIO::::"+usuario.getId()+" --- "+new Date()+"\n");
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
		if (imagen!=null){
			System.out.print("IMAGEN::::"+imagen);
        }
        Usuario usuarioAux = this.jqGridUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }

	/**
	 * OperaciÃ³n CRUD Create. CreaciÃ³n de un nuevo registro a partir del bean
	 * indicado.
	 * 
	 * @param usuario
	 *            Bean que contiene la informaciÃ³n con la que se va a crear el
	 *            nuevo registro.
	 * @return Bean resultante del proceso de creaciÃ³n.
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Usuario add(@Validated @RequestBody Usuario usuario) {		
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioService.add(usuario);
        logger.info("Entity correctly inserted!");	
    	return usuarioAux;
	}
	
	@RequestMapping(value = "/{bis}", method = RequestMethod.POST)
	public @ResponseBody Usuario add2(@Validated @RequestBody Usuario usuario) {		
		if (usuario.getEjie()==null){
			usuario.setEjie("0");
		}
        Usuario usuarioAux = this.jqGridUsuarioService.add(usuario);
        logger.info("Entity correctly inserted!");	
    	return usuarioAux;
	}
	

	/**
	 * OperaciÃ³n CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea eliminar.
	 * @return Bean eliminado.
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Usuario remove(@PathVariable(value="id") String id, HttpServletResponse  response) {
        Usuario usuario = new Usuario();
        usuario.setId(id);
        this.jqGridUsuarioService.remove(usuario);
        logger.info("Entity correctly deleted!");
        return usuario;
    }
	
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */
	
	/**
	 * OperaciÃ³n de filtrado del componente RUP_TABLE.
	 * 
	 * @param filterUsuario Usuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param tableRequestDto TableRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado del filtrado realizado por el
	 *         componente RUP_TABLE.
	 * 
	 */
	//@Json(mixins={@JsonMixin(target=Usuario.class, mixin=UsuarioMixIn.class)})
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<Usuario> filter(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - jqGrid] : Obtener Usuarios");
		return tableUsuarioService.filter(filterUsuario, tableRequestDto, false);
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "{bis}/filter", method = RequestMethod.POST)
	@ResponseBody()
	public TableResponseDto<Usuario2> filter2(
			@RequestJsonBody(param="filter") Usuario2 filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - jqGrid] : Obtener Usuarios 2");
		try {
			tableRequestDto.setSidx(tableRequestDto.getSidx().substring(0, tableRequestDto.getSidx().length()-1));
			TableResponseDto<Usuario> rdo1 = this.filter(filterUsuario, tableRequestDto);
			List<Usuario2> rows = new ArrayList<Usuario2>();
			for (Usuario usuario : (List<Usuario>)rdo1.getRows()) {
				Usuario2 aux = new Usuario2();
				aux.setId(usuario.getId());
				aux.setNombre(usuario.getNombre());
				aux.setApellido1(usuario.getApellido1());
				aux.setFechaAlta(usuario.getFechaAlta());
				aux.setFechaBaja(usuario.getFechaBaja());
				aux.setRol(usuario.getRol());
				rows.add(aux);
			}
			return new TableResponseDto<Usuario2>(tableRequestDto, Long.valueOf(rdo1.getRecords()), Long.valueOf(rdo1.getRecords()), rows);
		} catch (Exception e) {
			throw new X21aRuntimeException(e);
		}
	}
	
	@RequestMapping(value = "/multiFilter/add", method = RequestMethod.POST)
	public @ResponseBody Filter filterAdd(@RequestJsonBody(param="filtro") Filter filtro){
		TableUsuarioController.logger.info("[POST - jqGrid] : add filter");
		
		 return filterService.insert(filtro);
	}	
	

	
	@RequestMapping(value = "/multiFilter/delete", method = RequestMethod.POST)
	public @ResponseBody Filter  filterDelete(
			@RequestJsonBody(param="filtro") Filter filtro) {
		TableUsuarioController.logger.info("[POST - jqGrid] : delete filter");
		return  filterService.delete(filtro);
	}
	
	
	@RequestMapping(value = "/multiFilter/getDefault", method = RequestMethod.GET)
	public @ResponseBody Filter filterGetDefault(
		@RequestParam(value = "filterSelector", required = true) String filterSelector,
		@RequestParam(value = "user", required = true) String filterUser) {
		TableUsuarioController.logger.info("[get - jqGrid] : getDefault filter");
		 return filterService.getDefault(filterSelector, filterUser);
	}
	
	
	
	
	@RequestMapping(value = "/multiFilter/getAll", method = RequestMethod.GET)
	public @ResponseBody List<Filter> filterGetAll(
		@RequestParam(value = "filterSelector", required = true) String filterSelector,
		@RequestParam(value = "user", required = true) String filterUser) {
		TableUsuarioController.logger.info("[get - jqGrid] : GetAll filter");
		 return filterService.getAllFilters(filterSelector,filterUser);
	}
	
	/**
	 * OperaciÃ³n de bÃºsqueda del componente RUP_TABLE.
	 * 
	 * @param filterUsuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param searchUsuario
	 *            Bean que contiene los parÃ¡metros de bÃºsqueda a emplear.
	 * @param jqGridRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en la bÃºsqueda.
	 * @return Lista de lineas de la tabla que se corresponden con los registros
	 *         que se ajustan a los parÃ¡metros de bÃºsqueda.
	 * 
	 */
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<Usuario>> search(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody(param="search") Usuario searchUsuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto){
		TableUsuarioController.logger.info("[POST - search] : Buscar Usuarios");
		return jqGridUsuarioService.search(filterUsuario, searchUsuario, jqGridRequestDto, false);
	}
	
	/**
	 * Borrado mÃºltiple de registros
	 * 
	 * @param TableRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en la bÃºsqueda.
	 * @return Lista de los identificadores de los registros eliminados.
	 */
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple(@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - removeMultiple] : Eliminar multiples usuarios");
	    this.tableUsuarioService.removeMultiple(tableRequestDto);
	    TableUsuarioController.logger.info("All entities correctly deleted!");
	    
	    return tableRequestDto.getMultiselection().getSelectedIds();
	}
	
	/*
	 * METODOS COMPONENTE RUP_TABLE - JERARQUÃ�A
	 */
	
	/**
	 * OperaciÃ³n de filtrado del componente RUP_TABLE para presentar los
	 * registros medainte una visualizaciÃ³n jerÃ¡rquica.
	 * 
	 * @param filterUsuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param jqGridRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado del filtrado realizado por el
	 *         componente RUP_TABLE.
	 * 
	 */
	@RequestMapping(value = "/jerarquia/filter", method = RequestMethod.POST)
	public @ResponseBody JQGridResponseDto< JerarquiaDto< Usuario>> jerarquia(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto) {
		TableUsuarioController.logger.info("[POST - jerarquia] : Obtener Usuarios Jerarquia");
		return this.jqGridUsuarioService.jerarquia(filterUsuario, jqGridRequestDto, false);
	}
	
	/**
	 * Recupera los hijos de los registros desplegados en la visualizaciÃ³n jerÃ¡rquica.
	 * 
	 * @param filterUsuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param jqGridRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado a mostrar en el componente RUP_TABLE.
	 * 
	 */
	@RequestMapping(value = "/jerarquiaChildren", method = RequestMethod.POST)
	public @ResponseBody JQGridResponseDto<JerarquiaDto<Usuario>> jerarquiaChildren (
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody JQGridRequestDto jqGridRequestDto){
		TableUsuarioController.logger.info("[GET - jqGrid] : Obtener Jerarquia - Hijos");
		return this.jqGridUsuarioService.jerarquiaChildren(filterUsuario, jqGridRequestDto);
	}
	
	@RequestMapping(value = "masterDetail", method = RequestMethod.GET)
	public String getSimpleMasterDetail(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaMasterDetail", null, LocaleContextHolder.getLocale()));
		model.addAttribute("comarca", new Comarca());
		Localidad localidad = new Localidad();
		localidad.setComarca(new Comarca());
		model.addAttribute("localidad", localidad);
		return "tableMasterDetail";
	}
	
	@RequestMapping(value = "masterDialog", method = RequestMethod.GET)
	public String getMasterDialog(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaMasterDetail", null, LocaleContextHolder.getLocale()));
		model.addAttribute("comarca", new Comarca());
		model.addAttribute("localidad", new Localidad());
		return "tableDialogDetail";
	}
	
	@RequestMapping(value = "tableDialog", method = RequestMethod.GET)
	public String getTableDialog(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tabla Dialog", null, LocaleContextHolder.getLocale()));
		model.addAttribute("multiPk", new MultiPk());
		return "tableDialog";
	}
	
	@RequestMapping(value = "/tableDialogAjax", method = RequestMethod.GET)
	public String getTableDialogAjax (Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		return "tableDialogAjax";
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param tableRequestDto TableRequestDto
	 */	
	@RequestMapping(value = "/clipboardReport", method = RequestMethod.POST)
	protected @ResponseBody List<Usuario> getClipboardReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - clipboardReport] : Copiar multiples usuarios");
		return this.tableUsuarioService.getDataForReports(filterUsuario, tableRequestDto);
	}
	
	@RequestMapping(value = "{bis}/clipboardReport", method = RequestMethod.POST)
	protected @ResponseBody List<Usuario> getClipboardReport2(
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - clipboardReport2] : Copiar multiples usuarios");
		return this.tableUsuarioService.getDataForReports((Usuario) filterUsuario, tableRequestDto);
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = {"/xlsReport" , "/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateExcelReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableUsuarioController.logger.info("[POST - generateExcelReport] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	@RequestMapping(value = {"{bis}/xlsReport" , "{bis}/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateExcelReport2(
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableUsuarioController.logger.info("[POST - generateExcelReport2] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport((Usuario) filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generatePDFReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generatePDFReport] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@RequestMapping(value = "{bis}/pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generatePDFReport2(
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generatePDFReport2] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport((Usuario) filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateODSReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateODSReport] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@RequestMapping(value = "{bis}/odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateODSReport2(
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateODSReport2] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        	
		this.tableUsuarioService.generateReport((Usuario) filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */	
	@RequestMapping(value = "csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateCSVReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateCSVReport] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@RequestMapping(value = "{bis}/csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	protected @ResponseBody void generateCSVReport2(
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateCSVReport2] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport((Usuario) filterUsuario, columns, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
}
