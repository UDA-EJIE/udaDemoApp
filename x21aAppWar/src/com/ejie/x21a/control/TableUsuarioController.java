/*
 * Copyright 2012 E.J.I.E., S.A.
 *
 * Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
 * Solo podrá usarse esta obra si se respeta la Licencia.
 * Puede obtenerse una copia de la Licencia en
 *
 * http://ec.europa.eu/idabc/eupl.html
 *
 * Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
 * el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
 * SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
 * Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
 * que establece la Licencia.
 */
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.text.Normalizer;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hdiv.services.NoEntity;
import org.hdiv.services.TrustAssertion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.hateoas.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.support.ByteArrayMultipartFileEditor;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.Localidad;
import com.ejie.x21a.model.MultiPk;
import com.ejie.x21a.model.TableOptions;
import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.model.Usuario2;
import com.ejie.x21a.service.TableUsuarioService;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResourceResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.generic.model.AutocompleteComboGenericPOJO;
import com.ejie.x38.hdiv.annotation.UDALink;
import com.ejie.x38.hdiv.annotation.UDALinkAllower;
import com.ejie.x38.rup.table.filter.model.Filter;
import com.ejie.x38.rup.table.filter.service.FilterService;
import com.ejie.x38.util.DateTimeManager;
import com.ejie.x38.util.ResourceUtils;

/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
 * 
 * @author UDA
 */

@Controller
@RequestMapping (value = "/table")
public class TableUsuarioController {
	private static final Logger logger = LoggerFactory.getLogger(TableUsuarioController.class);
	public static final String MODEL_USUARIO = "usuario";
	public static final String MODEL_USUARIO2 = "usuario2";
	public static final String MODEL_OPTIONS = "options";
	public static final String MODEL_ACTIONTYPE = "actionType";
	
	@Autowired
	private TableUsuarioService tableUsuarioService;
	
	@Autowired
	private FilterService filterService;
	
	@javax.annotation.Resource
	private ReloadableResourceBundleMessageSource messageSource;
	
	@InitBinder
	protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws ServletException {
		binder.registerCustomEditor(byte[].class,new ByteArrayMultipartFileEditor());
		binder.registerCustomEditor(Date.class, new CustomDateEditor(DateTimeManager.getDateTimeFormat(LocaleContextHolder.getLocale()), true));
		NumberFormat numberFormat = NumberFormat.getInstance(LocaleContextHolder.getLocale());
		binder.registerCustomEditor(BigDecimal.class, new CustomNumberEditor(BigDecimal.class, numberFormat, true));
	}

	/*
	 * OPERACIONES CRUD
	 * 
	 * Metodos correspondientes a las operaciones CRUD (Create, Read, Update, Delete). 
	 * 
	 */
	
	/**
	 * OperaciÃ³n CRUD Read. Devuelve el bean correspondiente al identificador
	 * indicado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea recuperar.
	 * @return Objeto correspondiente al identificador indicado.
	 */
	@UDALink(name = "get", linkTo = { 
			@UDALinkAllower(name = "edit"), 
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "remove"), 
			@UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Resource<Usuario> get(@PathVariable String id) {
        Usuario usuario = new Usuario();
		usuario.setId(id);
        usuario = this.tableUsuarioService.find(usuario);
		TableUsuarioController.logger.info("[GET - findBy_PK] : Obtener Usuarios por PK");
        return new Resource<Usuario>(usuario);
	}
	
	@UDALink(name = "get2", linkTo = { 
			@UDALinkAllower(name = "edit2" ), 
			@UDALinkAllower(name = "remove2" ),
			@UDALinkAllower(name = "getRoles"), 
			@UDALinkAllower(name = "filter2") })
	@RequestMapping(value = "/{bis}/{id}", method = RequestMethod.GET)
	public @ResponseBody Resource<Usuario2> get2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis, 
			@PathVariable String id) {
        Usuario2 usuario = new Usuario2();
		usuario.setId(id);
        usuario = this.tableUsuarioService.find(usuario);
        TableUsuarioController.logger.info("[GET - findBy_PK] : Obtener Usuarios por PK");
		return new Resource<Usuario2>(usuario);
	}
	
	@UDALink(name = "getFiltroSimple", linkTo = {
			@UDALinkAllower(name = "getAllIds"),
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "getTableEditFormMultipart"),
			@UDALinkAllower(name = "getTableInlineEdit"),
			@UDALinkAllower(name = "addFromNewWindow"),
			@UDALinkAllower(name = "editFromNewWindow"),
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "getMultiFilterForm"),
			@UDALinkAllower(name = "multifilterAdd"),
			@UDALinkAllower(name = "multifilterDelete"),
			@UDALinkAllower(name = "multifilterDefault"),
			@UDALinkAllower(name = "multifilterGetAll") })
	@RequestMapping(value = "/configurable", method = RequestMethod.GET)
	public String getFiltroSimple (Model model) {
		Usuario usuario = new Usuario();
		model.addAttribute(MODEL_USUARIO, usuario);
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("Administrador", "Administrador");
		comboRol.put("Desarrollador", "Desarrollador");
		comboRol.put("Espectador", "Espectador");
		comboRol.put("Informador", "Informador");
		comboRol.put("Manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		Map<String,String> comboEjie = new LinkedHashMap<String,String>();
		comboEjie.put("", "---");
		comboEjie.put("0", "No");
		comboEjie.put("1", "Sí");
		model.addAttribute("comboEjie", comboEjie);
		
		return "table";
	}
	
	@UDALink(name = "getTableDouble", linkTo = {
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "getTableDoubleEditForm"),
			@UDALinkAllower(name = "getTableInlineEdit"),
			@UDALinkAllower(name = "getTableDoubleInlineEdit"),
			@UDALinkAllower(name = "getTableEditFormMultipart"),
			@UDALinkAllower(name = "getTableDoubleEditFormMultipart"),
			@UDALinkAllower(name = "addFromNewWindow"),
			@UDALinkAllower(name = "editFromNewWindow"),
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "deleteAll2"),
			@UDALinkAllower(name = "getMultiFilterForm"),
			@UDALinkAllower(name = "getMultiFilterForm2"),
			@UDALinkAllower(name = "multifilterAdd"),
			@UDALinkAllower(name = "multifilterDelete"),
			@UDALinkAllower(name = "multifilterDefault"),
			@UDALinkAllower(name = "multifilterGetAll"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "clipboardReport2"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "excelReport2"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "pdfReport2"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "odsReport2"),
			@UDALinkAllower(name = "csvReport"),
			@UDALinkAllower(name = "csvReport2") })
	@RequestMapping(value = "/double", method = RequestMethod.GET)
	public String getTableDouble (Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_USUARIO2, new Usuario2());
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("Administrador", "Administrador");
		comboRol.put("Desarrollador", "Desarrollador");
		comboRol.put("Espectador", "Espectador");
		comboRol.put("Informador", "Informador");
		comboRol.put("Manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		Map<String,String> comboEjie = new LinkedHashMap<String,String>();
		comboEjie.put("", "---");
		comboEjie.put("0", "No");
		comboEjie.put("1", "Sí");
		model.addAttribute("comboEjie", comboEjie);
		
		return "tableDouble";
	}
	
	@UDALink(name = "getSimpleMasterDetail", linkTo = {
			@UDALinkAllower(name = "getTableComarcaEditForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getTableDialogComarcaEditForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getTableLocalidadEditForm", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "getProvincias", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getMultiFilterForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterAdd", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterDelete", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterDefault", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterGetAll", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "clipboardReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "clipboardReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "excelReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "excelReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "pdfReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "pdfReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "odsReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "odsReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "csvReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "csvReport", linkClass = TableLocalidadController.class) })
	@RequestMapping(value = "masterDetail", method = RequestMethod.GET)
	public String getSimpleMasterDetail(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaMasterDetail", null, LocaleContextHolder.getLocale()));
		
		Comarca comarca = new Comarca();
		Localidad localidad = new Localidad();
		localidad.setComarca(comarca);
		
		model.addAttribute("comarca", comarca);
		model.addAttribute("localidad", localidad);
		
		return "tableMasterDetail";
	}
	
	@UDALink(name = "getMasterDialog", linkTo = {
			@UDALinkAllower(name = "getTableComarcaEditForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getTableDialogComarcaEditForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getTableLocalidadEditForm", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "getProvincias", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "getMultiFilterForm", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterAdd", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterDelete", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterDefault", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "multifilterGetAll", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "clipboardReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "clipboardReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "excelReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "excelReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "pdfReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "pdfReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "odsReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "odsReport", linkClass = TableLocalidadController.class),
			@UDALinkAllower(name = "csvReport", linkClass = TableComarcaController.class),
			@UDALinkAllower(name = "csvReport", linkClass = TableLocalidadController.class) })
	@RequestMapping(value = "masterDialog", method = RequestMethod.GET)
	public String getMasterDialog(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaMasterDetail", null, LocaleContextHolder.getLocale()));

		Comarca comarca = new Comarca();
		Localidad localidad = new Localidad();
		localidad.setComarca(comarca);
		
		model.addAttribute("comarca", comarca);
		model.addAttribute("localidad", localidad);
		
		return "tableDialogDetail";
	}
	
	@UDALink(name = "getTableDialog", linkTo = {
			@UDALinkAllower(name = "getTableEditForm", linkClass = TableMultiPkController.class),
			@UDALinkAllower(name = "getTableDialogAjax"),
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "getMultiFilterForm"),
			@UDALinkAllower(name = "multifilterAdd"),
			@UDALinkAllower(name = "multifilterDelete"),
			@UDALinkAllower(name = "multifilterDefault"),
			@UDALinkAllower(name = "multifilterGetAll"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "tableDialog", method = RequestMethod.GET)
	public String getTableDialog(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tabla Dialog", null, LocaleContextHolder.getLocale()));
		model.addAttribute("multiPk", new MultiPk());
		return "tableDialog";
	}
	
	@UDALink(name = "getTableDialogAjax", linkTo = {
			@UDALinkAllower(name = "getTableEditForm"),
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "getMultiFilterForm"),
			@UDALinkAllower(name = "multifilterAdd"),
			@UDALinkAllower(name = "multifilterDelete"),
			@UDALinkAllower(name = "multifilterDefault"),
			@UDALinkAllower(name = "multifilterGetAll"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "/tableDialogAjax", method = RequestMethod.GET)
	public String getTableDialogAjax (Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_OPTIONS, new TableOptions());
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("Administrador", "Administrador");
		comboRol.put("Desarrollador", "Desarrollador");
		comboRol.put("Espectador", "Espectador");
		comboRol.put("Informador", "Informador");
		comboRol.put("Manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		Map<String,String> comboEjie = new LinkedHashMap<String,String>();
		comboEjie.put("", "---");
		comboEjie.put("0", "No");
		comboEjie.put("1", "Sí");
		model.addAttribute("comboEjie", comboEjie);
		
		return "tableDialogAjax";
	}
	
	@UDALink(name = "getTableEditForm", linkTo = {
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "edit"),
			@UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/editForm", method = RequestMethod.POST)
	public String getTableEditForm (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = false) boolean enableMultipart,
			@RequestParam(required = false) String fixedMessage,
			Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		if (enableMultipart) {
			model.addAttribute("enableMultipart", enableMultipart);
		}
		if (fixedMessage != null) {
			model.addAttribute("fixedMessage", fixedMessage);
		}
		
		return "tableEditForm";
	}
	
	@UDALink(name = "getTableDoubleEditForm", linkTo = {
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "get2"),
			@UDALinkAllower(name = "add2"),
			@UDALinkAllower(name = "edit2"),
			@UDALinkAllower(name = "filter2") })
	@RequestMapping(value = "/editFormDouble", method = RequestMethod.POST)
	public String getTableDoubleEditForm (@RequestParam String actionType, Model model) {
		model.addAttribute(MODEL_USUARIO2, new Usuario2());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		
		return "tableDoubleEditForm";
	}
	
	@UDALink(name = "getTableEditFormMultipart", linkTo = {
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "addMultipart"),
			@UDALinkAllower(name = "editMultipart"),
			@UDALinkAllower(name = "filter") })
	@PostMapping(value = "/editFormMultipart")
	public String getTableEditFormMultipart (
			@RequestParam(required = true) String actionType,
			Model model) {
		model.addAttribute(MODEL_USUARIO, new Usuario());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		model.addAttribute("enableMultipart", true);
		
		return "tableEditForm";
	}
	
	@UDALink(name = "getTableDoubleEditFormMultipart", linkTo = {
			@UDALinkAllower(name = "getApellidos"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "get2"),
			@UDALinkAllower(name = "add2"),
			@UDALinkAllower(name = "addMultipart2"),
			@UDALinkAllower(name = "editMultipart2"),
			@UDALinkAllower(name = "filter2") })
	@PostMapping(value = "/editFormDoubleMultipart")
	public String getTableDoubleEditFormMultipart (
			@RequestParam(required = true) String actionType,
			Model model) {
		model.addAttribute(MODEL_USUARIO2, new Usuario2());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		model.addAttribute("enableMultipart", true);
		
		return "tableDoubleEditForm";
	}
	
	@UDALink(name = "getTableInlineEdit", linkTo = {
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "edit"),
			@UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/inlineEdit", method = RequestMethod.POST)
	public String getTableInlineEdit (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = true) String tableID,
			@RequestParam(required = false) String mapping,
			Model model) {
		model.addAttribute("entity", new Usuario());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		model.addAttribute("tableID", tableID);
		
		// Controlar que el mapping siempre se añada al modelo de la manera esperada
		if (mapping == null || mapping.isEmpty()) {
			mapping = "/table";
		} else if (mapping.endsWith("/")) {
			mapping = mapping.substring(0, mapping.length() - 1);
		}
		model.addAttribute("mapping", mapping);
		
		return "tableInlineEditAuxForm";
	}
	
	@UDALink(name = "getTableDoubleInlineEdit", linkTo = {
			@UDALinkAllower(name = "get2"),
			@UDALinkAllower(name = "add2"),
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "edit2"),
			@UDALinkAllower(name = "filter2") })
	@PostMapping(value = "/inlineEditDouble")
	public String getTableDoubleInlineEdit (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = true) String tableID,
			@RequestParam(required = false) String mapping,
			Model model) {
		model.addAttribute("entity", new Usuario2());
		model.addAttribute(MODEL_ACTIONTYPE, actionType);
		model.addAttribute("tableID", tableID);
		
		// Controlar que el mapping siempre se añada al modelo de la manera esperada
		if (mapping == null || mapping.isEmpty()) {
			mapping = "/table/2";
		} else if (mapping.endsWith("/")) {
			mapping = mapping.substring(0, mapping.length() - 1);
		}
		model.addAttribute("mapping", mapping);
		
		return "tableInlineEditAuxForm";
	}
	
	@UDALink(name = "editFromNewWindow")
	@GetMapping(value = "/editFromNewWindow")
    public String editFromNewWindow(
    		@RequestParam(value = "isDouble", required = false) boolean isDouble,
    		Model model) {
		if (isDouble)  {
			Usuario2 usuario = new Usuario2();
			model.addAttribute(MODEL_USUARIO2, usuario);
			model.addAttribute("isDouble", true);
		} else {
			Usuario usuario = new Usuario();
			model.addAttribute(MODEL_USUARIO, usuario);
			model.addAttribute("isDouble", false);
		}
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("Administrador", "Administrador");
		comboRol.put("Desarrollador", "Desarrollador");
		comboRol.put("Espectador", "Espectador");
		comboRol.put("Informador", "Informador");
		comboRol.put("Manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		model.addAttribute(MODEL_ACTIONTYPE, "PUT");
		
		return "tableEditFormNewWindow";
    }
	
	@UDALink(name = "getApellidos")
	@RequestMapping(value = "/apellidos", method = RequestMethod.GET)
	public @ResponseBody List<AutocompleteComboGenericPOJO> getApellidos (
			@RequestParam(value = "q", required = false) String q,
            @RequestParam(value = "c", required = false) Boolean c) {
		List<AutocompleteComboGenericPOJO> apellidos = new ArrayList<AutocompleteComboGenericPOJO>();
		if(q != null){
			q = Normalizer.normalize(q, Normalizer.Form.NFD);
			q = q.replaceAll("[^\\p{ASCII}]", "");
			q = q.toUpperCase();
		}else{
			q = "";
		}

		List<String> listaApellidos = new ArrayList<String>();
		listaApellidos.add("García");
		listaApellidos.add("González");
		listaApellidos.add("Fernández");
		listaApellidos.add("Rodríguez");
		listaApellidos.add("López");
		listaApellidos.add("Martínez");
		listaApellidos.add("Sánchez");
		listaApellidos.add("Pérez");
		listaApellidos.add("Gómez");
		listaApellidos.add("Martín");
		listaApellidos.add("Jiménez");
		listaApellidos.add("Ruiz");
		listaApellidos.add("Hernández");
		listaApellidos.add("Díaz");
		listaApellidos.add("Moreno");
		listaApellidos.add("Álvarez");
		listaApellidos.add("Muñoz");
		listaApellidos.add("Romero");
		listaApellidos.add("Alonso");
		listaApellidos.add("Gutiérrez");
		listaApellidos.add("Navarro");
		listaApellidos.add("Torres");
		listaApellidos.add("Domínguez");
		listaApellidos.add("Vázquez");
		listaApellidos.add("Perurena");
		
		for(String str : listaApellidos)
		{
			String original = str;
			str = Normalizer.normalize(str, Normalizer.Form.NFD);
			str = str.toUpperCase();
			str = str.replaceAll("[^\\p{ASCII}]", "");
			if(q.equals("") || str.indexOf(q) >= 0){
				apellidos.add(new AutocompleteComboGenericPOJO(original, original));
			}
		}
		
		return apellidos;
	}
	
	@UDALink(name = "getRoles",linkTo = { @UDALinkAllower(name = "getApellidos" )})
	@RequestMapping(value = "/roles", method = RequestMethod.GET)
	public @ResponseBody List<AutocompleteComboGenericPOJO> getRoles (
			@RequestParam(value = "q", required = false) String q,
            @RequestParam(value = "c", required = false) Boolean c) {	
		List<AutocompleteComboGenericPOJO> roles = new ArrayList<AutocompleteComboGenericPOJO>();
		roles.add(new AutocompleteComboGenericPOJO("Administrador", "Administrador"));
		roles.add(new AutocompleteComboGenericPOJO("Desarrollador", "Desarrollador"));
		roles.add(new AutocompleteComboGenericPOJO("Espectador", "Espectador"));
		roles.add(new AutocompleteComboGenericPOJO("Informador", "Informador"));
		roles.add(new AutocompleteComboGenericPOJO("Manager", "Manager"));
		
		return roles;
	}
	
	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parÃ¡metro.
	 * 
	 * @param usuarioFilter
	 *            Objeto que contiene los parÃ¡metros de filtrado utilizados en
	 *            la bÃºsqueda.
	 * @return Lista de objetos correspondientes a la bÃºsqueda realizada.
	 */
	@UDALink(name = "getall", linkTo = { 
			@UDALinkAllower(name = "edit"), 
			@UDALinkAllower(name = "remove"), 
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "get") })
	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody
	List<Resource<Usuario>> getAll(@ModelAttribute() Usuario usuarioFilter){
		TableUsuarioController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return ResourceUtils.fromListToResource(this.tableUsuarioService.findAllLike(usuarioFilter, null, false));
	}
	
	/**
	 * Devuelve una lista de identificadores.
	 *
	 * @param param String Contiene el valor del campo a buscar.
	 * @param startsWith boolean Define si se usará un comodín al inicio.
	 *
	 * @return List<Usuario> Lista de objetos correspondientes a la búsqueda realizada.
	 */
	@UDALink(name = "getAllIds")
	@GetMapping(value = "/allIds")
	public @ResponseBody
	List<Resource<Usuario>> getAllIds(
			@RequestParam(value = "q", required = true) String param,
            @RequestParam(value = "c", required = true) boolean startsWith) {
		TableUsuarioController.logger.info("[GET - find_ALL_ID] : Obtener CPs de Usuario");
		Usuario usuario = new Usuario(param);
		return ResourceUtils.fromListToResource(this.tableUsuarioService.findAllIds(usuario, startsWith));
	}
	
	/**
	 * OperaciÃ³n CRUD Edit. ModificaciÃ³n del bean indicado.
	 * 
	 * @param usuario
	 *            Bean que contiene la informaciÃ³n a modificar.
	 * @return Bean resultante de la modificaciÃ³n.
	 */
	@UDALink(name = "edit", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/edit", method = RequestMethod.PUT)
    public @ResponseBody Resource<Usuario> edit(@RequestBody Usuario usuario) {
		Usuario usuarioAux = this.tableUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
        return new Resource<Usuario>(usuarioAux);
    }
	
	@UDALink(name = "edit2", linkTo = { @UDALinkAllower(name = "filter2") })
	@RequestMapping(value = "/{bis}/edit", method = RequestMethod.PUT)
    public @ResponseBody Resource<Usuario2> edit2(@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
    		@RequestBody Usuario2 usuario) {
		Usuario2 usuarioAux = this.tableUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
		return new Resource<Usuario2>(usuarioAux);
    }
	
	@UDALink(name = "editMultipart", linkTo = { @UDALinkAllower(name = "filter") })
	@PutMapping(value = "/editMultipart", produces = "application/json")
    public @ResponseBody Resource<Usuario> editMultipart(
    		@RequestBody Usuario usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen) {
		logger.info("USUARIO :::: {} --- {}\n", usuario.getId(), new Date());
		if (imagen != null) {
			logger.info("IMAGEN:::: {}", imagen);
        }
        Usuario usuarioAux = this.tableUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
		return new Resource<Usuario>(usuarioAux);
    }
	
	@UDALink(name = "editMultipart2", linkTo = { @UDALinkAllower(name = "filter2") })
	@PutMapping(value = "/{bis}/editMultipart", produces = "application/json")
    public @ResponseBody Resource<Usuario2> editMultipart2(
    		@RequestBody Usuario2 usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen) {
		logger.info("USUARIO :::: {} --- {}\n", usuario.getId(), new Date());
		if (imagen != null) {
			logger.info("IMAGEN:::: {}", imagen);
        }
        Usuario2 usuarioAux = this.tableUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
		return new Resource<Usuario2>(usuarioAux);
    }
	
	@Deprecated
	@UDALink(name = "editar", linkTo = { @UDALinkAllower(name = "filter") })
	@PutMapping(value = "/editar", produces = "application/json")
    public @ResponseBody Resource<Usuario> editar(
    		@Validated @ModelAttribute Usuario usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen) {
		logger.info("USUARIO :::: {} --- {}\n", usuario.getId(), new Date());
		if (imagen != null) {
			logger.info("IMAGEN:::: {}", imagen);
        }
        Usuario usuarioAux = this.tableUsuarioService.update(usuario);
		logger.info("Entity correctly updated!");
		return new Resource<Usuario>(usuarioAux);
    }

	/**
	 * OperaciÃ³n CRUD Create. CreaciÃ³n de un nuevo registro a partir del bean
	 * indicado.
	 * 
	 * @param usuario
	 *            Bean que contiene la informaciÃ³n con la que se va a crear el
	 *            nuevo registro.
	 * @return Bean resultante del proceso de creaciÃ³n.
	 */
	@UDALink(name = "add", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public @ResponseBody Resource<Usuario> add(@Validated @RequestBody Usuario usuario) {		
		Usuario usuarioAux = this.tableUsuarioService.add(usuario);
        logger.info("Entity correctly inserted!");	
        return new Resource<Usuario>(usuarioAux);
	}
	
	@UDALink(name = "add2", linkTo = { @UDALinkAllower(name = "filter2") })
	@RequestMapping(value = "/{bis}/add", method = RequestMethod.POST)
	public @ResponseBody Resource<Usuario2> add2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis, 
			@Validated @RequestBody Usuario2 usuario) {		
		Usuario2 usuarioAux = this.tableUsuarioService.add(usuario);
        logger.info("Entity correctly inserted!");	
        return new Resource<Usuario2>(usuarioAux);
	}
	
	@UDALink(name = "addMultipart", linkTo = { @UDALinkAllower(name = "filter") })
	@PostMapping(value = "/addMultipart", produces = "application/json")
    public @ResponseBody Resource<Usuario> addMultipart(
    		@Validated @RequestBody Usuario usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen) {
		logger.info("USUARIO :::: {} --- {}\n", usuario.getId(), new Date());
		if (imagen != null) {
			logger.info("IMAGEN:::: {}", imagen);
        }
        Usuario usuarioAux = this.tableUsuarioService.add(usuario);
		logger.info("Entity correctly inserted!");
		return new Resource<Usuario>(usuarioAux);
    }
	
	@UDALink(name = "addMultipart2", linkTo = { @UDALinkAllower(name = "filter2") })
	@PostMapping(value = "/{bis}/addMultipart", produces = "application/json")
    public @ResponseBody Resource<Usuario2> addMultipart2(
    		@Validated @RequestBody Usuario2 usuario,
    		@RequestParam(value = "imagenAlumno", required = false) MultipartFile imagen) {
		logger.info("USUARIO :::: {} --- {}\n", usuario.getId(), new Date());
		if (imagen != null) {
			logger.info("IMAGEN:::: {}", imagen);
        }
        Usuario2 usuarioAux = this.tableUsuarioService.add(usuario);
		logger.info("Entity correctly inserted!");
		return new Resource<Usuario2>(usuarioAux);
    }
	
	@UDALink(name = "addFromNewWindow")
	@GetMapping(value = "/addFromNewWindow")
    public String addFromNewWindow(
    		@RequestParam(value = "isDouble", required = false) boolean isDouble,
    		Model model) {
		if (isDouble)  {
			Usuario2 usuario = new Usuario2();
			model.addAttribute(MODEL_USUARIO2, usuario);
			model.addAttribute("isDouble", true);
		} else {
			Usuario usuario = new Usuario();
			model.addAttribute(MODEL_USUARIO, usuario);
			model.addAttribute("isDouble", false);
		}
		
		Map<String,String> comboRol = new LinkedHashMap<String,String>();
		comboRol.put("", "---");
		comboRol.put("Administrador", "Administrador");
		comboRol.put("Desarrollador", "Desarrollador");
		comboRol.put("Espectador", "Espectador");
		comboRol.put("Informador", "Informador");
		comboRol.put("Manager", "Manager");
		model.addAttribute("comboRol", comboRol);
		
		model.addAttribute(MODEL_ACTIONTYPE, "POST");
		
		return "tableEditFormNewWindow";
    }

	/**
	 * OperaciÃ³n CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea eliminar.
	 * @return Bean eliminado.
	 */
	@UDALink(name = "remove")
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Resource<Usuario> remove(@PathVariable String id, HttpServletResponse  response) {
        Usuario usuario = new Usuario();
        usuario.setId(id);
        this.tableUsuarioService.remove(usuario);
        logger.info("Entity correctly deleted!");
        return new Resource<Usuario>(usuario);
    }

	/**
	 * Operación CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 * 
	 * @param id
	 *            Identificador del objeto que se desea eliminar.
	 * @return Bean eliminado.
	 */
	@UDALink(name = "remove2")
	@DeleteMapping(value = "/{bis}/{id}")
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Resource<Usuario2> remove2(@PathVariable String id, HttpServletResponse response) {
        Usuario2 usuario = new Usuario2();
        usuario.setId(id);
        this.tableUsuarioService.remove(usuario);
        logger.info("Entity correctly deleted!");
        return new Resource<Usuario2>(usuario);
    }
	
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */
	
	/**
	 * OperaciÃ³n de filtrado del componente RUP_TABLE.
	 * 
	 * @param filterUsuario Usuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param tableRequestDto TableRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return Dto que contiene el resultado del filtrado realizado por el
	 *         componente RUP_TABLE.
	 * 
	 */
	//@Json(mixins={@JsonMixin(target=Usuario.class, mixin=UsuarioMixIn.class)})
	@UDALink(name = "filter", linkTo = { 
			@UDALinkAllower(name = "get"), 
			@UDALinkAllower(name = "remove"), 
			@UDALinkAllower(name = "filter"), 
			@UDALinkAllower(name = "getRoles"),
			@UDALinkAllower(name = "deleteAll"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResourceResponseDto<Usuario> filter(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - table] : Obtener Usuarios");
		return tableUsuarioService.filter(filterUsuario, tableRequestDto, false);
	}

	@UDALink(name = "filter2", linkTo = { 
			@UDALinkAllower(name = "get2"), 
			@UDALinkAllower(name = "remove2"), 
			@UDALinkAllower(name = "filter2"),
			@UDALinkAllower(name = "getRoles"), 
			@UDALinkAllower(name = "deleteAll2"),
			@UDALinkAllower(name = "clipboardReport2") })
	@RequestMapping(value = "/{bis}/filter", method = RequestMethod.POST)
	public @ResponseBody() TableResourceResponseDto<Usuario2> filter2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param="filter") Usuario2 filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - table] : Obtener Usuarios 2");
		return tableUsuarioService.filter(filterUsuario, tableRequestDto, false);
	}
	
	// Obtiene el formulario del multi filtro
	@UDALink(name = "getMultiFilterForm")
	@RequestMapping(value = "/multiFilter", method = RequestMethod.POST)
	public String getMultiFilterForm (
			@RequestParam(required = false) String mapping,
			@RequestParam(required = true) String tableID,
			@RequestParam(required = true) String containerClass,
			@RequestParam(required = true) String labelClass,
			@RequestParam(required = true) String defaultContainerClass,
			@RequestParam(required = true) String defaultCheckboxClass,
			Model model) {
		model.addAttribute("entity", new Usuario());
		model.addAttribute("tableID", tableID);
		model.addAttribute("containerClass", containerClass);
		model.addAttribute("labelClass", labelClass);
		model.addAttribute("defaultContainerClass", defaultContainerClass);
		model.addAttribute("defaultCheckboxClass", defaultCheckboxClass);
		
		// Controlar que el mapping siempre se añada al modelo de la manera esperada
		if (mapping == null || mapping.isEmpty()) {
			mapping = "/table/multiFilter";
		} else if (mapping.endsWith("/")) {
			mapping = mapping.substring(0, mapping.length() - 1);
		}
		model.addAttribute("mapping", mapping);
		
		return "multiFilterForm";
	}
	
	// Obtiene el formulario del multi filtro
	@UDALink(name = "getMultiFilterForm2")
	@RequestMapping(value = "{bis}/multiFilter", method = RequestMethod.POST)
	public String getMultiFilterForm2 (
			@RequestParam(required = false) String mapping,
			@RequestParam(required = true) String tableID,
			@RequestParam(required = true) String containerClass,
			@RequestParam(required = true) String labelClass,
			@RequestParam(required = true) String defaultContainerClass,
			@RequestParam(required = true) String defaultCheckboxClass,
			Model model) {
		model.addAttribute("entity", new Usuario2());
		model.addAttribute("tableID", tableID);
		model.addAttribute("containerClass", containerClass);
		model.addAttribute("labelClass", labelClass);
		model.addAttribute("defaultContainerClass", defaultContainerClass);
		model.addAttribute("defaultCheckboxClass", defaultCheckboxClass);
		
		// Controlar que el mapping siempre se añada al modelo de la manera esperada
		if (mapping == null || mapping.isEmpty()) {
			mapping = "/table/multiFilter";
		} else if (mapping.endsWith("/")) {
			mapping = mapping.substring(0, mapping.length() - 1);
		}
		model.addAttribute("mapping", mapping);
		
		return "multiFilterForm";
	}
	
	// Añade o actualiza un filtro
	@UDALink(name = "multifilterAdd")
	@RequestMapping(value = "/multiFilter/add", method = RequestMethod.POST)
	public @ResponseBody Resource<Filter> filterAdd(@RequestBody Filter filtro){
		TableUsuarioController.logger.info("[POST - table] : add filter");
		return new Resource<Filter>(filterService.insert(filtro));
	}
	
	// Elimina un filtro
	@UDALink(name = "multifilterDelete")
	@RequestMapping(value = "/multiFilter/delete", method = RequestMethod.POST)
	public @ResponseBody Resource<Filter> filterDelete(@RequestBody Filter filtro) {
		TableUsuarioController.logger.info("[POST - table] : delete filter");
		return new Resource<Filter>(filterService.delete(filtro));
	}
	
	// Obtiene el filtro por defecto
	@UDALink(name = "multifilterDefault")
	@RequestMapping(value = "/multiFilter/getDefault", method = RequestMethod.GET)
	public @ResponseBody Resource<Filter> filterGetDefault(
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "user", required = true) String filterUser) {
		TableUsuarioController.logger.info("[GET - table] : getDefault filter");
		return ResourceUtils.toResource(filterService.getDefault(filterSelector, filterUser));
	}
	
	// Obtiene los filtros disponibles
	@UDALink(name = "multifilterGetAll")
	@RequestMapping(value = "/multiFilter/getAll", method = RequestMethod.GET)
	public @ResponseBody List<Resource<Filter>> filterGetAll(
			@RequestParam(value = "q", required = false) String filterQ,
			@RequestParam(value = "c", required = false) Boolean filterC,
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "user", required = true) String filterUser) {
		TableUsuarioController.logger.info("[GET - table] : GetAll filter");
		return ResourceUtils.fromListToResource(filterService.getAllFilters(filterSelector, filterUser));
	}
	
	/**
	 * Operación de búsqueda del componente RUP_TABLE.
	 * 
	 * @param filterUsuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param searchUsuario
	 *            Bean que contiene los parÃ¡metros de bÃºsqueda a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en la bÃºsqueda.
	 * @return Lista de lineas de la tabla que se corresponden con los registros
	 *         que se ajustan a los parÃ¡metros de bÃºsqueda.
	 * 
	 */
	@UDALink(name = "search", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<Usuario>> search(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody(param="search") Usuario searchUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto){
		TableUsuarioController.logger.info("[POST - search] : Buscar Usuarios");
		return tableUsuarioService.search(filterUsuario, searchUsuario, tableRequestDto, false);
	}
	
	/**
	 * Operación de búsqueda del componente RUP_TABLE.
	 * 
	 * @param filterUsuario
	 *            Bean que contiene los parámetros de filtrado a emplear.
	 * @param searchUsuario
	 *            Bean que contiene los parámetros de búsqueda a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en la búsqueda.
	 * @return Lista de lineas de la tabla que se corresponden con los registros
	 *         que se ajustan a los parámetros de búsqueda.
	 * 
	 */
	@UDALink(name = "search2", linkTo = { @UDALinkAllower(name = "filter2") })
	@PostMapping(value = "/{bis}/search")
	public @ResponseBody List<TableRowDto<Usuario2>> search2(
			@RequestJsonBody(param="filter") Usuario2 filterUsuario,
			@RequestJsonBody(param="search") Usuario2 searchUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto){
		TableUsuarioController.logger.info("[POST - search] : Buscar Usuarios");
		return tableUsuarioService.search(filterUsuario, searchUsuario, tableRequestDto, false);
	}
	
	/**
	 * Borrado mÃºltiple de registros
	 * 
	 * @param filterUsuario Usuario
	 *            Bean que contiene los parÃ¡metros de filtrado a emplear.
	 * @param TableRequestDto
	 *            Dto que contiene los parÃ¡mtros de configuraciÃ³n propios del
	 *            RUP_TABLE a aplicar en la bÃºsqueda.
	 * @return Lista de los identificadores de los registros eliminados.
	 */
	@UDALink(name = "deleteAll")
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple(
			@RequestJsonBody(param="filter") Usuario filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - removeMultiple] : Eliminar multiples usuarios");
		this.tableUsuarioService.removeMultiple(filterUsuario, tableRequestDto, false);
	    TableUsuarioController.logger.info("All entities correctly deleted!");
	    
	    return tableRequestDto.getMultiselection().getSelectedIds();
	}
	
	/**
	 * Borrado múltiple de registros
	 * 
	 * @param filterUsuario Usuario2
	 *            Bean que contiene los parámetros de filtrado a emplear.
	 * @param TableRequestDto
	 *            Dto que contiene los parámtros de configuración propios del
	 *            RUP_TABLE a aplicar en la búsqueda.
	 * @return Lista de los identificadores de los registros eliminados.
	 */
	@UDALink(name = "deleteAll2")
	@PostMapping(value = "/{bis}/deleteAll")
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple2(
			@RequestJsonBody(param="filter") Usuario2 filterUsuario,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - removeMultiple] : Eliminar multiples usuarios");
		this.tableUsuarioService.removeMultiple(filterUsuario, tableRequestDto, false);
	    TableUsuarioController.logger.info("All entities correctly deleted!");
	    
	    return tableRequestDto.getMultiselection().getSelectedIds();
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 */
	@UDALink(name = "clipboardReport", linkTo = { 
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "/clipboardReport", method = RequestMethod.POST)
	public @ResponseBody List<Resource<Usuario>> getClipboardReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario,
			@RequestParam(required = false) String[] columns, 
			@RequestParam(required = false) String[] columnsName,
			@RequestParam(required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - clipboardReport] : Copiar multiples usuarios");
		return ResourceUtils.fromListToResource(this.tableUsuarioService.getDataForReports(filterUsuario, tableRequestDto));
	}
	
	@UDALink(name = "clipboardReport2", linkTo = { 
			@UDALinkAllower(name = "excelReport2"),
			@UDALinkAllower(name = "pdfReport2"),
			@UDALinkAllower(name = "odsReport2"),
			@UDALinkAllower(name = "csvReport2") })
	@RequestMapping(value = "{bis}/clipboardReport", method = RequestMethod.POST)
	public @ResponseBody List<Resource<Usuario2>> getClipboardReport2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario,
			@RequestParam(required = false) String[] columns, 
			@RequestParam(required = false) String[] columnsName,
			@RequestParam(required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableUsuarioController.logger.info("[POST - clipboardReport2] : Copiar multiples usuarios");
		return ResourceUtils.fromListToResource(this.tableUsuarioService.getDataForReports(filterUsuario, tableRequestDto));
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "excelReport", linkTo = { 
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = {"/xlsReport" , "/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateExcelReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableUsuarioController.logger.info("[POST - generateExcelReport] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	@UDALink(name = "excelReport2", linkTo = { 
			@UDALinkAllower(name = "clipboardReport2"),
			@UDALinkAllower(name = "pdfReport2"),
			@UDALinkAllower(name = "odsReport2"),
			@UDALinkAllower(name = "csvReport2") })
	@RequestMapping(value = {"{bis}/xlsReport" , "{bis}/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateExcelReport2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableUsuarioController.logger.info("[POST - generateExcelReport2] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "pdfReport", linkTo = { 
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generatePDFReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generatePDFReport] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@UDALink(name = "pdfReport2", linkTo = { 
			@UDALinkAllower(name = "clipboardReport2"),
			@UDALinkAllower(name = "excelReport2"),
			@UDALinkAllower(name = "odsReport2"),
			@UDALinkAllower(name = "csvReport2") })
	@RequestMapping(value = "{bis}/pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generatePDFReport2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generatePDFReport2] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "odsReport", linkTo = { 
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateODSReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateODSReport] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@UDALink(name = "odsReport2", linkTo = { 
			@UDALinkAllower(name = "clipboardReport2"),
			@UDALinkAllower(name = "excelReport2"),
			@UDALinkAllower(name = "pdfReport2"),
			@UDALinkAllower(name = "csvReport2") })
	@RequestMapping(value = "{bis}/odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateODSReport2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateODSReport2] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        	
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filterUsuario Usuario
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "csvReport", linkTo = { 
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport") })
	@RequestMapping(value = "csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateCSVReport(
			@RequestJsonBody(param = "filter", required = false) Usuario filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateCSVReport] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	@UDALink(name = "csvReport2", linkTo = { 
			@UDALinkAllower(name = "clipboardReport2"),
			@UDALinkAllower(name = "excelReport2"),
			@UDALinkAllower(name = "pdfReport2"),
			@UDALinkAllower(name = "odsReport2") })
	@RequestMapping(value = "{bis}/csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateCSVReport2(
			@PathVariable @TrustAssertion(idFor = NoEntity.class) final String bis,
			@RequestJsonBody(param = "filter", required = false) Usuario2 filterUsuario, 
			@RequestJsonBody(param = "columns", required = false) String[] columns2, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableUsuarioController.logger.info("[POST - generateCSVReport2] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
        
        // Corregir nombres de columnas
        ArrayList<String> tempColumns = new ArrayList<String>();
        for (String column : columns2) {
        	String newColumn = column.substring(0, column.length() - 1);
        	tempColumns.add(newColumn);
        }
        String[] columns = tempColumns.toArray(new String[0]);
        
		this.tableUsuarioService.generateReport(filterUsuario, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
}
