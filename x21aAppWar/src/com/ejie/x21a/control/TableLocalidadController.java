/*
* Copyright 2020 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, VersiÃƒÂ³n 1.1 exclusivamente (la Ã‚Â«LicenciaÃ‚Â»);
* Solo podrÃƒÂ¡ usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislaciÃƒÂ³n aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye Ã‚Â«TAL CUALÃ‚Â»,
* SIN GARANTÃƒï¿½AS NI CONDICIONES DE NINGÃƒÅ¡N TIPO, ni expresas ni implÃƒÂ­citas.
* VÃƒÂ©ase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hdiv.services.TrustAssertion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.hateoas.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.Localidad;
import com.ejie.x21a.service.LocalidadService;
import com.ejie.x21a.util.Constants;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResourceResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.hdiv.annotation.UDALink;
import com.ejie.x38.hdiv.annotation.UDALinkAllower;
import com.ejie.x38.hdiv.util.IdentifiableModelWrapperFactory;
import com.ejie.x38.rup.table.filter.model.Filter;
import com.ejie.x38.rup.table.filter.service.FilterService;
import com.ejie.x38.util.ResourceUtils;

/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
 * @author UDA
 */
@Controller
@RequestMapping (value = "/tableLocalidad")
public class TableLocalidadController {
	private static final Logger logger = LoggerFactory.getLogger(TableLocalidadController.class);

	@Autowired 
	private LocalidadService localidadService;
	
	@Autowired
	private FilterService filterService;
	
	@UDALink(name = "getTableLocalidadEditForm", linkTo = {
			@UDALinkAllower(name = "get"),
			@UDALinkAllower(name = "add"),
			@UDALinkAllower(name = "edit"),
			@UDALinkAllower(name = "filter") })
	@PostMapping(value = "/editForm")
	public String getTableLocalidadEditForm (
			@RequestParam(required = true) String actionType,
			@RequestParam(required = false) BigDecimal pkValue,
			@RequestParam(required = false) BigDecimal pkValueIdPadre,
			Model model) {		
		model.addAttribute(Constants.MODEL_LOCALIDAD, new Localidad());
		model.addAttribute(Constants.MODEL_COMARCA, new Comarca());
		model.addAttribute(Constants.MODEL_ACTIONTYPE, actionType);
		model.addAttribute(Constants.MODEL_ENCTYPE, Constants.APPLICATION_URLENCODED);
		
		if (pkValue != null) {
			model.addAttribute(Constants.MODEL_PKVALUE, IdentifiableModelWrapperFactory.getInstance(new Localidad(pkValue), "code"));
		}
		
		if (pkValueIdPadre != null) {
			model.addAttribute("pkValueIdPadre", IdentifiableModelWrapperFactory.getInstance(new Comarca(pkValueIdPadre), "code"));
		}
		
		if (actionType.equals("POST")) {
			model.addAttribute(Constants.MODEL_ENDPOINT, "add");
		} else {
			model.addAttribute(Constants.MODEL_ENDPOINT, "edit");
		}
		
		return "tableLocalidadEditForm";
	}
	
	/**
	 * Method 'getById'.
	 *
	 * @param code BigDecimal
	 * @return localidad Localidad
	 */
	@UDALink(name = "get", linkTo = { @UDALinkAllower(name = "edit"), @UDALinkAllower(name = "remove"), @UDALinkAllower(name = "filter")})
	@RequestMapping(value = "/{code}", method = RequestMethod.GET)
	public @ResponseBody Resource<Localidad> getById(@PathVariable @TrustAssertion(idFor = Localidad.class) BigDecimal code) {
        Localidad localidad = new Localidad();
		localidad.setCode(code);
        localidad = this.localidadService.find(localidad);
        TableLocalidadController.logger.info("[GET - findBy_PK] : Obtener Localidad por PK");
        return new Resource<Localidad>(localidad);
	}
	
	/**
	 * Method 'edit'.
	 *
	 * @param localidad Localidad 
	 * @return Localidad
	 */
	@UDALink(name = "edit", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/edit", method = RequestMethod.PUT)
    public @ResponseBody Resource<Localidad> edit(@RequestBody Localidad localidad) {		
        Localidad localidadAux = this.localidadService.update(localidad);
        TableLocalidadController.logger.info("[PUT] : Localidad actualizado correctamente");
        return new Resource<Localidad>(localidadAux);
    }

	/**
	 * Method 'add'.
	 *
	 * @param localidad Localidad 
	 * @return Localidad
	 */
	@UDALink(name = "add", linkTo = { @UDALinkAllower(name = "filter") })
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public @ResponseBody Resource<Localidad> add(@RequestBody Localidad localidad) {		
        Localidad localidadAux = this.localidadService.add(localidad);
        TableLocalidadController.logger.info("[POST] : Localidad insertado correctamente");
        return new Resource<Localidad>(localidadAux);
	}

	/**
	 * Method 'remove'.
	 *
	 * @param code BigDecimal
	 * @return localidad
	 */
	@UDALink(name = "remove")
	@RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody Resource<Localidad> remove(@PathVariable @TrustAssertion(idFor = Localidad.class) BigDecimal code) {
        Localidad localidad = new Localidad();
        localidad.setCode(code);
        this.localidadService.remove(localidad);
        TableLocalidadController.logger.info("[DELETE] : Localidad borrado correctamente");
        return new Resource<Localidad>(localidad);
    }
	
	/**
	 * RUP_TABLE
	 */
	@UDALink(name = "filter", linkTo = { 
			@UDALinkAllower(name = "get"), 
			@UDALinkAllower(name = "remove"), 
			@UDALinkAllower(name = "filter"),
			@UDALinkAllower(name = "clipboardReport"),
			@UDALinkAllower(name = "excelReport"),
			@UDALinkAllower(name = "pdfReport"),
			@UDALinkAllower(name = "odsReport"),
			@UDALinkAllower(name = "csvReport") })
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResourceResponseDto<Localidad> filter(
			@RequestJsonBody(param="filter") Localidad localidad,
			@RequestJsonBody final TableRequestDto tableRequestDto) {
		TableLocalidadController.logger.info("[GET - table] : Obtener Localidades");
		return localidadService.filter(localidad, tableRequestDto, false);
	}
	
	@UDALink(name = "multifilterAdd")
	@PostMapping(value = "/multiFilter/add")
	public @ResponseBody Resource<Filter> filterAdd(@RequestJsonBody(param="filtro") Filter filtro){
		TableLocalidadController.logger.info("[POST - table] : add filter");
		return new Resource<Filter>(filterService.insert(filtro));
	}	
	
	@UDALink(name = "multifilterDelete")
	@DeleteMapping(value = "/multiFilter/delete")
	public @ResponseBody Resource<Filter>  filterDelete(
			@RequestJsonBody(param="filtro") Filter filtro) {
		TableLocalidadController.logger.info("[DELETE - table] : delete filter");
		return new Resource<Filter>(filterService.delete(filtro));
	}
	
	@UDALink(name = "multifilterDefault")
	@RequestMapping(value = "/multiFilter/getDefault", method = RequestMethod.GET)
	public @ResponseBody Resource<Filter> filterGetDefault(
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "localidad", required = true) String filterLocalidad) {
		TableLocalidadController.logger.info("[get - table] : getDefault filter");
		return ResourceUtils.toResource(filterService.getDefault(filterSelector, filterLocalidad));
	}
	
	@UDALink(name = "multifilterGetAll")
	@RequestMapping(value = "/multiFilter/getAll", method = RequestMethod.GET)
	public @ResponseBody List<Resource<Filter>> filterGetAll(
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "localidad", required = true) String filterLocalidad) {
		TableLocalidadController.logger.info("[get - table] : GetAll filter");
		return ResourceUtils.fromListToResource(filterService.getAllFilters(filterSelector, filterLocalidad));
	}
	
	@UDALink(name = "search", linkTo = { @UDALinkAllower(name = "filter")})
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<Localidad>> search(
			@RequestJsonBody(param="filter") Localidad localidadFilter,
			@RequestJsonBody(param="search") Localidad localidadSearch,
			@RequestJsonBody final TableRequestDto tableRequestDto){
		TableLocalidadController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return localidadService.search(localidadFilter, localidadSearch, tableRequestDto, true);
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve los datos exportados de la tabla.
	 *
	 * @param filterLocalidad Localidad
	 * @param tableRequestDto TableRequestDto
	 */
	@UDALink(name = "clipboardReport")
	@PostMapping(value = "/filter", params = "clipboardReport")
	public @ResponseBody List<Resource<Localidad>> getClipboardReport(
			@RequestJsonBody(param = "filter", required = false) Localidad filterLocalidad,
			@RequestParam(required = false) String[] columns, 
			@RequestParam(required = false) String[] columnsName,
			@RequestParam(required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		TableLocalidadController.logger.info("[POST - clipboardReport] : Copiar multiples Localidades");
		return ResourceUtils.fromListToResource(this.localidadService.getDataForReports(filterLocalidad, tableRequestDto));
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filterLocalidad Localidad
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "excelReport")
	@RequestMapping(value = {"/xlsReport" , "/xlsxReport"}, method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateExcelReport(
			@RequestJsonBody(param = "filter", required = false) Localidad filterLocalidad, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName, 
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response) throws ServletException{
		TableLocalidadController.logger.info("[POST - generateExcelReport] : Devuelve un fichero excel");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.localidadService.generateReport(filterLocalidad, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
    }
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filterLocalidad Localidad
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "pdfReport")
	@RequestMapping(value = "pdfReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generatePDFReport(
			@RequestJsonBody(param = "filter", required = false) Localidad filterLocalidad, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableLocalidadController.logger.info("[POST - generatePDFReport] : Devuelve un fichero pdf");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.localidadService.generateReport(filterLocalidad, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filterLocalidad Localidad
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "odsReport")
	@RequestMapping(value = "odsReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateODSReport(
			@RequestJsonBody(param = "filter", required = false) Localidad filterLocalidad, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableLocalidadController.logger.info("[POST - generateODSReport] : Devuelve un fichero ods");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.localidadService.generateReport(filterLocalidad, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filterLocalidad Localidad
	 * @param columns String[]
	 * @param columnsName String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	@UDALink(name = "csvReport")
	@RequestMapping(value = "csvReport", method = RequestMethod.POST, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public @ResponseBody void generateCSVReport(
			@RequestJsonBody(param = "filter", required = false) Localidad filterLocalidad, 
			@RequestJsonBody(param = "columns", required = false) String[] columns, 
			@RequestJsonBody(param = "columnsName", required = false) String[] columnsName,
			@RequestJsonBody(param = "fileName", required = false) String fileName, 
			@RequestJsonBody(param = "sheetTitle", required = false) String sheetTitle,
			@RequestJsonBody(param = "reportsParams", required = false) ArrayList<?> reportsParams,
			@RequestJsonBody TableRequestDto tableRequestDto,
			HttpServletRequest request,
			HttpServletResponse response){
		TableLocalidadController.logger.info("[POST - generateCSVReport] : Devuelve un fichero csv");
		//Idioma
        Locale locale = LocaleContextHolder.getLocale();
		this.localidadService.generateReport(filterLocalidad, columns, columnsName, fileName, sheetTitle, reportsParams, tableRequestDto, locale, request, response);
	}
}