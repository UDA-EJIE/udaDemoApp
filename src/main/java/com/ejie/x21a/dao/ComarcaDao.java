/*
* Copyright 2020 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import java.util.List;

import com.ejie.x21a.model.Comarca;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * ComarcaDao generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */

public interface ComarcaDao {
    
    /**
     * Inserts a single row in the Comarca table.
     *
     * @param comarca Comarca
     * @return Comarca
     */
    Comarca add(Comarca comarca);

    /**
     * Updates a single row in the Comarca table.
     *
     * @param comarca Comarca
     * @return Comarca
     */
    Comarca update(Comarca comarca);

    /**
     * Finds a single row in the Comarca table.
     *
     * @param comarca Comarca
     * @return Comarca
     */
    Comarca find(Comarca comarca);

    /**
     * Deletes a single row in the Comarca table.
     *
     * @param comarca Comarca
     * @return 
     */
    void remove(Comarca comarca);

    /**
     * Finds a List of rows in the Comarca table.
     *
     * @param comarca Comarca
     * @param tableRequestDto TableRequestDto
     * @return List
     */
    List<Comarca> findAll(Comarca comarca, TableRequestDto tableRequestDto);

    /**
     * Counts rows in the Comarca table.
     *
     * @param comarca Comarca
     * @return Long
     */
    Long findAllCount(Comarca comarca);
	
	/**
     * Finds rows in the Comarca table using like.
     *
     * @param comarca Comarca
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List
     */
    List<Comarca> findAllLike(Comarca comarca, TableRequestDto tableRequestDto, Boolean startsWith);
	
    /**
     * Counts rows in the Comarca table using like.
     *
     * @param comarca Comarca
     * @param startsWith Boolean
     * @return Long
     */
    Long findAllLikeCount(Comarca comarca, Boolean startsWith);

    /*
	 * OPERACIONES RUP_TABLE
	 */

    /**
	 * Deletes multiple rows in the Comarca table.
	 *
	 * @param filterComarca Comarca
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean	 
	 */	
	void removeMultiple(Comarca filterComarca, TableRequestDto tableRequestDto, Boolean startsWith);
	
	List<Comarca> getMultiple(Comarca filterComarca, TableRequestDto tableRequestDto, Boolean startsWith);
    
    List<TableRowDto<Comarca>> reorderSelection(Comarca comarca, TableRequestDto tableRequestDto, Boolean startsWith);
    
    List<TableRowDto<Comarca>> search(Comarca filterParams, Comarca searchParams, TableRequestDto tableRequestDto, Boolean startsWith);
}
