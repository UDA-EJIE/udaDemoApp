/*
* Copyright 2011 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ejie.x21a.model.Alumno;
import com.ejie.x21a.service.AlumnoService;
import com.ejie.x38.control.exception.ControlException;
import com.ejie.x38.control.exception.MethodFailureException;
import com.ejie.x38.control.exception.ResourceNotFoundException;
import com.ejie.x38.control.exception.ServiceUnavailableException;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;
/**
 * AlumnoServiceImpl generated by UDA 1.0, 08-sep-2011 13:10:43.
* @author UDA
 */
@Controller
@RequestMapping (value = "/alumno")

public class AlumnoController  {

	 private static final  Logger logger = LoggerFactory.getLogger(AlumnoController.class);

	@Autowired
	private AlumnoService alumnoService;
	
	@Autowired
	private Properties appConfiguration;
	 /**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public ModelAndView getCreateForm(Model model) {
		model.addAttribute("defaultLanguage",
				appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout",
				appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("alumno", "model", model);
	}

	 /**
	 * Method 'getById'.
	 * @param  idA BigDecimal
	 * @param  idB BigDecimal
	 * @return String
	 */
	@RequestMapping(value = "/{idA}/{idB}", method = RequestMethod.GET)
	public @ResponseBody Alumno getById(@PathVariable BigDecimal idA, @PathVariable BigDecimal idB) {
		try{
            Alumno alumno = new Alumno();
			alumno.setIdA(idA);
			alumno.setIdB(idB);
            alumno = this.alumnoService.find(alumno);
            if (alumno == null) {
                throw new Exception(idA.toString() + idB.toString());
            }
            return alumno;
		}catch (Exception e){
		    throw new ResourceNotFoundException(idA.toString() + idB.toString());
		}
	}


	 /**
	 * Method 'getAll'.
	*@param	  idA BigDecimal
	*@param	  idB BigDecimal
	*@param	  nombre String
	*@param	  apellido1 String
	*@param	  apellido2 String
	*@param	  fechaAlta String
	*@param request HttpServletRequest
	 * @return String
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(
@RequestParam(value = "idA", required = false) BigDecimal idA,
@RequestParam(value = "idB", required = false) BigDecimal idB,
@RequestParam(value = "nombre", required = false) String nombre,
@RequestParam(value = "apellido1", required = false) String apellido1,
@RequestParam(value = "apellido2", required = false) String apellido2,
@RequestParam(value = "fechaAlta", required = false) String fechaAlta,
			HttpServletRequest request) {
			try{
				Alumno filterAlumno = new Alumno(idA, idB, nombre, apellido1, apellido2, fechaAlta);
                Pagination pagination = null;
			    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
				    pagination = new Pagination();
				    pagination.setPage(Long.valueOf(request.getParameter("page")));
				    pagination.setRows(Long.valueOf(request.getParameter("rows")));
				    pagination.setSort(request.getParameter("sidx"));
				    pagination.setAscDsc(request.getParameter("sord"));
                    List<Alumno> alumnos =  this.alumnoService.findAll(filterAlumno, pagination);

     			    if (alumnos == null) {
	    	            throw new Exception("No data Found.");
		            }
					
			        Long total =  getAllCount(filterAlumno, request);
				    JQGridJSONModel data = new JQGridJSONModel();
				    data.setPage(request.getParameter("page"));
				    data.setRecords(total.intValue());
				    data.setTotal(total, pagination.getRows());
				    data.setRows(alumnos);
				    return data;
				}else{
				    List<Alumno> alumnos =  this.alumnoService.findAll(filterAlumno, pagination);
					if (alumnos == null) {
	    	            throw new Exception("No data Found.");
		            }
				    return alumnos;
				}
            }catch(Exception e){
			    throw new ResourceNotFoundException("No data Found.");
			}
	}

	/**
	 * Method 'getAllCount'.
	 * @param filterAlumno Alumno 
	 * @param request  HttpServletRequest
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(
	@RequestParam(value = "alumno", required = false) Alumno  filterAlumno, HttpServletRequest request) {
	    try {
			return alumnoService
					.findAllCount(filterAlumno != null ? filterAlumno
							: new Alumno ());
		} catch (Exception e) {
			throw new ServiceUnavailableException("Count Service is not responding.");
		}
	}
	
	 /**
	 * Method 'edit'.
	 * @param	 alumno Alumno 
	 * @param response  HttpServletResponse
	 * @return Alumno
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Alumno edit(@RequestBody Alumno alumno, HttpServletResponse response) {		
		try {
            Alumno alumnoAux  = this.alumnoService.update(alumno);
			logger.info("Entity correctly inserted!");
            return alumnoAux;
        } catch(Exception e) {
            throw new MethodFailureException("Method failed");
        }
    }

	 /**
	 * Method 'add'.
	 * @param	 alumno Alumno 
	 * @return Alumno
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Alumno add(@RequestBody Alumno alumno) {		
        try {
            Alumno alumnoAux = this.alumnoService.add(alumno);
            logger.info("Entity correctly inserted!");
        	return alumnoAux;
		} catch(Exception e) {
        	throw new MethodFailureException("Method failed");
		}
	}

	 /**
	 * Method 'remove'.
	 * @param  idA  BigDecimal
	 * @param  idB  BigDecimal
	 * @param response  HttpServletResponse
	 *
	 */
	@RequestMapping(value = "/{idA}/{idB}", method = RequestMethod.DELETE)
    public void remove(
				@PathVariable BigDecimal idA,
				@PathVariable BigDecimal idB,
					HttpServletResponse  response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
    	try{
            Alumno alumno = new Alumno();
            alumno.setIdA(idA);
            alumno.setIdB(idB);
            this.alumnoService.remove(alumno);
            response.setStatus(HttpServletResponse.SC_OK);
    	} catch(Exception e) {
    		logger.error( "Unable to delete " +  idA +  idB);
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    		throw new MethodFailureException("Method failed");
    	}
    }
	
	 /**
	 * Method 'removeAll'.
	 * @param  alumnoIds  ArrayList
	 * @param response  HttpServletResponse
	 *
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	public void removeMultiple(@RequestBody ArrayList<ArrayList<String>> alumnoIds,
			HttpServletResponse response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
        ArrayList<Alumno> alumnoList = new ArrayList<Alumno>();
        try{		    
            for (ArrayList<String> alumnoId:alumnoIds) {
			    Iterator<String> iterator = alumnoId.iterator();
				    Alumno alumno = new Alumno();
			        alumno.setIdA(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
			        alumno.setIdB(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
				    alumnoList.add(alumno);
		    }
            this.alumnoService.removeMultiple(alumnoList);
			response.setStatus(HttpServletResponse.SC_OK);
		} catch(Exception e) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			throw new MethodFailureException("Method failed");
		}
	}	

	/**
	 * Method 'handle'.
	 * @param e ControlException
	 * @return String
	 *
	 */
	@ExceptionHandler
	public @ResponseBody String handle(ControlException e) {
		logger.warn(e.getMessage());
		return e.getMessage();
	}

	/**
	 * Method 'getAlumnoService'.
	 *
	 * @return AlumnoService
	 *
	 */
	protected AlumnoService getAlumnoService() {
		return this.alumnoService;
	}

	/**
	 * Method 'setAlumnoService'.
	 *
	 * @param alumnoService  AlumnoService
	 *
	 */
	public void setAlumnoService(AlumnoService alumnoService) {
		this.alumnoService = alumnoService;
	}
	
	/**
	 * Method 'getAppConfiguration'.
	 * 
	 * @return appConfiguration
	 * 
	 */
	public Properties getAppConfiguration() {
		return appConfiguration;
	}

	/**
	 * Method 'setAppConfiguration'.
	 * 
	 * @paramappConfiguration Properties
	 * 
	 */
	public void setAppConfiguration(Properties appConfiguration) {
		this.appConfiguration = appConfiguration;
	}
}	
	
