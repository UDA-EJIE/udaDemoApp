/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ejie.x21a.control.genericObjectUtils.GenericObject;
import com.ejie.x21a.control.genericObjectUtils.RUPBean;
import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.DepartamentoProvincia;
import com.ejie.x21a.model.Localidad;
import com.ejie.x21a.model.NoraCalle;
import com.ejie.x21a.model.NoraMunicipio;
import com.ejie.x21a.model.NoraProvincia;
import com.ejie.x21a.model.Provincia;
import com.ejie.x21a.service.ComarcaService;
import com.ejie.x21a.service.DepartamentoProvinciaService;
import com.ejie.x21a.service.LocalidadService;
import com.ejie.x21a.service.NoraCalleService;
import com.ejie.x21a.service.NoraMunicipioService;
import com.ejie.x21a.service.NoraProvinciaService;
import com.ejie.x38.control.exception.MethodFailureException;
import com.ejie.x38.control.exception.ResourceNotFoundException;
import com.ejie.x38.control.exception.ServiceUnavailableException;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;

/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 10:46:22.
 * 
 * @author UDA
 */
@Controller
@RequestMapping(value = "/experimental")
public class ExperimentalController {

	private static final Logger logger = LoggerFactory.getLogger(ExperimentalController.class);

	@Autowired
	private Properties appConfiguration;
	
	//Generic Object
	@RequestMapping(value = "generic_object", method = RequestMethod.GET)
	public ModelAndView getGenericObject(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("generic_object", "model", model);
	}
	
	//Tabla Maestro-Detalle
	@RequestMapping(value = "maestro_detalle", method = RequestMethod.GET)
	public ModelAndView getMD(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("maestro_detalle", "model", model);
	}

	//z-index
	@RequestMapping(value = "z-index", method = RequestMethod.GET)
	public ModelAndView getZIndex(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("z-index", "model", model);
	}
	
	//multi entidad
	@RequestMapping(value = "mant_multi_entidad", method = RequestMethod.GET)
	public ModelAndView getMultiEntidad(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("mant_multi_entidad", "model", model);
	}
	
	//mantenimiento clave compuesta multiseleccion
	@RequestMapping(value = "mant_clave_compuesta_multi", method = RequestMethod.GET)
	public ModelAndView getClaveCompuestaMulti(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("mant_clave_compuesta_multi", "model", model);
	}
	
	//mantenimiento clave compuesta edicion en linea
	@RequestMapping(value = "mant_clave_compuesta_edlinea", method = RequestMethod.GET)
	public ModelAndView getClaveCompuestaEdlinea(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("mant_clave_compuesta_edlinea", "model", model);
	}
	//Nora
	@RequestMapping(value = "nora", method = RequestMethod.GET)
	public ModelAndView getNora(Model model) {
		model.addAttribute("defaultLanguage", appConfiguration.get("x21aMantenimientosWar.default.language"));
		model.addAttribute("defaultLayout", appConfiguration.get("x21aMantenimientosWar.default.layout"));
		return new ModelAndView("nora", "model", model);
	}
	
	/**
	 * SERVICIOS NECESARIOS:
	 * 		- Comarca
	 * 		- Localidad
	 * 		- DepartamentoProvincia
	 */
		@Autowired 
		private ComarcaService comarcaService;
		
		@Autowired 
		private LocalidadService localidadService;
		
		@Autowired 
		private DepartamentoProvinciaService departamentoProvinciaService;
		
		@Autowired 
		private NoraProvinciaService provinciaService;
		
		@Autowired 
		private NoraMunicipioService municipioService;
		
		@Autowired 
		private NoraCalleService calleService;
		
	/**
	 * MAESTRO-DETALLE (Comarca)
	 */
		/**
		 * Method 'getById'.
		 * @param  code BigDecimal
		 * @return String
		 */
		@RequestMapping(value = "comarca/{code}", method = RequestMethod.GET)
		public @ResponseBody Comarca getById(@PathVariable BigDecimal code) {
			try{
	            Comarca comarca = new Comarca();
				comarca.setCode(code);
	            comarca = this.comarcaService.find(comarca);
	            if (comarca == null) {
	                throw new Exception(code.toString());
	            }
	            return comarca;
			}catch (Exception e){
			    throw new ResourceNotFoundException(code.toString());
			}
		}
		@RequestMapping(value = "comarca",method = RequestMethod.GET)
		public @ResponseBody Object getAll(
			@RequestParam(value = "code", required = false) BigDecimal code,
			@RequestParam(value = "descEs", required = false) String descEs,
			@RequestParam(value = "descEu", required = false) String descEu,
			@RequestParam(value = "css", required = false) String css,
			@RequestParam(value = "codeProvincia", required = false) BigDecimal codeProvincia,
			HttpServletRequest request) {
				try{
					Comarca filterComarca = new Comarca(code, descEs, descEu, css, new Provincia());
	                Pagination pagination = null;
				    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
					    pagination = new Pagination();
					    pagination.setPage(Long.valueOf(request.getParameter("page")));
					    pagination.setRows(Long.valueOf(request.getParameter("rows")));
					    pagination.setSort(request.getParameter("sidx"));
					    pagination.setAscDsc(request.getParameter("sord"));
	                    List<Comarca> comarcas =  this.comarcaService.findAll(filterComarca, pagination);

	     			    if (comarcas == null) {
		    	            throw new Exception("No data Found.");
			            }
						
				        Long total =  getAllCount(filterComarca, request);
					    JQGridJSONModel data = new JQGridJSONModel();
					    data.setPage(request.getParameter("page"));
					    data.setRecords(total.intValue());
					    data.setTotal(total, pagination.getRows());
					    data.setRows(comarcas);
					    return data;
					}else{
					    List<Comarca> comarcas =  this.comarcaService.findAll(filterComarca, pagination);
						if (comarcas == null) {
		    	            throw new Exception("No data Found.");
			            }
					    return comarcas;
					}
	            }catch(Exception e){
				    throw new ResourceNotFoundException("No data Found.");
				}
		}

		@RequestMapping(value = "comarca/count", method = RequestMethod.GET)
		public @ResponseBody Long getAllCount(
		@RequestParam(value = "comarca", required = false) Comarca  filterComarca, HttpServletRequest request) {
		    try {
				return comarcaService.findAllCount(filterComarca != null ? filterComarca: new Comarca ());
			} catch (Exception e) {
				throw new ServiceUnavailableException("Count Service is not responding.");
			}
		}
		/**
		 * Method 'edit'.
		 * @param	 comarca Comarca 
		 * @param response  HttpServletResponse
		 * @return Comarca
		 */
		@RequestMapping(value="comarca", method = RequestMethod.PUT)
	    public @ResponseBody Comarca edit(@RequestBody Comarca comarca, HttpServletResponse response) {		
			try {
	            Comarca comarcaAux  = this.comarcaService.update(comarca);
				logger.info( "Entity correctly inserted!");
	            return comarcaAux;
	        } catch(Exception e) {
	            throw new MethodFailureException("Method failed");
	        }
	    }

		 /**
		 * Method 'add'.
		 * @param	 comarca Comarca 
		 * @return Comarca
		 */
		@RequestMapping(method = RequestMethod.POST)
		public @ResponseBody Comarca add(@RequestBody Comarca comarca) {		
	        try {
	            Comarca comarcaAux = this.comarcaService.add(comarca);
	            logger.info( "Entity correctly inserted!");
	        	return comarcaAux;
			} catch(Exception e) {
	        	throw new MethodFailureException("Method failed");
			}
		}

		 /**
		 * Method 'remove'.
		 * @param  code  BigDecimal
		 * @param response  HttpServletResponse
		 *
		 */
		@RequestMapping(value = "comarca/{code}", method = RequestMethod.DELETE)
	    public void remove(
					@PathVariable BigDecimal code,
						HttpServletResponse  response) {
	        response.setContentType("text/javascript;charset=utf-8");
	        response.setHeader("Pragma", "cache");
	        response.setHeader("Expires", "0");
	        response.setHeader("Cache-Control", "private");
	    	try{
	            Comarca comarca = new Comarca();
	            comarca.setCode(code);
	            this.comarcaService.remove(comarca);
	            response.setStatus(HttpServletResponse.SC_OK);
	    	} catch(Exception e) {
	    		logger.error( "Unable to delete " +  code);
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
	    		throw new MethodFailureException("Method failed");
	    	}
	    }
		
		 /**
		 * Method 'removeAll'.
		 * @param  comarcaIds  ArrayList
		 * @param response  HttpServletResponse
		 *
		 */	
		@RequestMapping(value = "comarca/deleteAll", method = RequestMethod.POST)
		public void removeMultiple(@RequestBody ArrayList<ArrayList<String>> comarcaIds,
				HttpServletResponse response) {
	        response.setContentType("text/javascript;charset=utf-8");
	        response.setHeader("Pragma", "cache");
	        response.setHeader("Expires", "0");
	        response.setHeader("Cache-Control", "private");
	        ArrayList<Comarca> comarcaList = new ArrayList<Comarca>();
	        try{		    
	            for (ArrayList<String> comarcaId:comarcaIds) {
				    Iterator<String> iterator = comarcaId.iterator();
					    Comarca comarca = new Comarca();
				        comarca.setCode(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
					    comarcaList.add(comarca);
			    }
	            this.comarcaService.removeMultiple(comarcaList);
				response.setStatus(HttpServletResponse.SC_OK);
			} catch(Exception e) {
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				throw new MethodFailureException("Method failed");
			}
		}	
		
	/**
	 * MAESTRO-DETALLE (Localidad)
	 */
		@RequestMapping(value = "localidad",method = RequestMethod.GET)
		public @ResponseBody Object getAll(
			@RequestParam(value = "code", required = false) BigDecimal code,
			@RequestParam(value = "comarcaCode", required = false) BigDecimal comarcaCode,
			@RequestParam(value = "descEs", required = false) String descEs,
			@RequestParam(value = "descEu", required = false) String descEu,
			@RequestParam(value = "css", required = false) String css,
			HttpServletRequest request) {
				try{
					Localidad filterLocalidad = new Localidad(code, descEs, descEu, css, new Comarca(comarcaCode, null, null, null, null, null));
	                Pagination pagination = null;
				    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
					    pagination = new Pagination();
					    pagination.setPage(Long.valueOf(request.getParameter("page")));
					    pagination.setRows(Long.valueOf(request.getParameter("rows")));
					    pagination.setSort(request.getParameter("sidx"));
					    pagination.setAscDsc(request.getParameter("sord"));
	                    List<Localidad> localidads =  this.localidadService.findAll(filterLocalidad, pagination);

	     			    if (localidads == null) {
		    	            throw new Exception("No data Found.");
			            }
						
				        Long total =  getAllCount(filterLocalidad, request);
					    JQGridJSONModel data = new JQGridJSONModel();
					    data.setPage(request.getParameter("page"));
					    data.setRecords(total.intValue());
					    data.setTotal(total, pagination.getRows());
					    data.setRows(localidads);
					    return data;
					}else{
					    List<Localidad> localidads =  this.localidadService.findAll(filterLocalidad, pagination);
						if (localidads == null) {
		    	            throw new Exception("No data Found.");
			            }
					    return localidads;
					}
	            }catch(Exception e){
				    throw new ResourceNotFoundException("No data Found.");
				}
		}
		@RequestMapping(value = "localidad/count", method = RequestMethod.GET)
		public @ResponseBody Long getAllCount(
				@RequestParam(value = "localidad", required = false) Localidad  filterLocalidad, HttpServletRequest request) {
		    try {
				return localidadService.findAllCount(filterLocalidad != null ? filterLocalidad: new Localidad ());
			} catch (Exception e) {
				throw new ServiceUnavailableException("Count Service is not responding.");
			}
		}
		/**
		 * Method 'edit'.
		 * 
		 * @param localidad
		 *            Localidad
		 * @param response
		 *            HttpServletResponse
		 * @return Localidad
		 */
		@RequestMapping(value="localidad", method = RequestMethod.PUT)
		public @ResponseBody
		Localidad editLocalidad(@RequestBody Localidad localidad,
				HttpServletResponse response) {
			try {
				Localidad localidadAux = this.localidadService.update(localidad);
				logger.info( "Entity correctly inserted!");
				return localidadAux;
			} catch (Exception e) {
				throw new MethodFailureException("Method failed");
			}
		}

		/**
		 * Method 'add'.
		 * 
		 * @param localidad
		 *            Localidad
		 * @return Localidad
		 */
		@RequestMapping(value="localidad", method = RequestMethod.POST)
		public @ResponseBody
		Localidad addLocalidad(@RequestBody Localidad localidad) {
			try {
				Localidad localidadAux = this.localidadService.add(localidad);
				logger.info( "Entity correctly inserted!");
				return localidadAux;
			} catch (Exception e) {
				throw new MethodFailureException("Method failed");
			}
		}

		/**
		 * Method 'remove'.
		 * 
		 * @param code
		 *            BigDecimal
		 * @param response
		 *            HttpServletResponse
		 * 
		 */
		@RequestMapping(value = "localidad/{code}", method = RequestMethod.DELETE)
		public void removeLocalidad(@PathVariable BigDecimal code,
				HttpServletResponse response) {
			response.setContentType("text/javascript;charset=utf-8");
			response.setHeader("Pragma", "cache");
			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "private");
			try {
				Localidad localidad = new Localidad();
				localidad.setCode(code);
				this.localidadService.remove(localidad);
				response.setStatus(HttpServletResponse.SC_OK);
			} catch (Exception e) {
				logger.error( "Unable to delete " + code);
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				throw new MethodFailureException("Method failed");
			}
		}

		/**
		 * Method 'removeAll'.
		 * 
		 * @param localidadIds
		 *            ArrayList
		 * @param response
		 *            HttpServletResponse
		 * 
		 */
		@RequestMapping(value = "localidad/deleteAll", method = RequestMethod.POST)
		public void removeMultipleLocalidad(
				@RequestBody ArrayList<ArrayList<String>> localidadIds,
				HttpServletResponse response) {
			response.setContentType("text/javascript;charset=utf-8");
			response.setHeader("Pragma", "cache");
			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "private");
			ArrayList<Localidad> localidadList = new ArrayList<Localidad>();
			try {
				for (ArrayList<String> localidadId : localidadIds) {
					Iterator<String> iterator = localidadId.iterator();
					Localidad localidad = new Localidad();
					localidad.setCode(ObjectConversionManager.convert(
							iterator.next(), java.math.BigDecimal.class));
					localidadList.add(localidad);
				}
				this.localidadService.removeMultiple(localidadList);
				response.setStatus(HttpServletResponse.SC_OK);
			} catch (Exception e) {
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
				throw new MethodFailureException("Method failed");
			}
		}
		/**
		 * Method 'getById'.
		 * 
		 * @param code
		 *            BigDecimal
		 * @return String
		 */
		@RequestMapping(value = "localidad/{codeLocalidad}", method = RequestMethod.GET)
		public @ResponseBody
		Localidad getByIdLocalidad(@PathVariable BigDecimal codeLocalidad) {
			try {
				Localidad localidad = new Localidad();
				localidad.setCode(codeLocalidad);
				localidad = this.localidadService.find(localidad);
				if (localidad == null) {
					throw new Exception(codeLocalidad.toString());
				}
				return localidad;
			} catch (Exception e) {
				throw new ResourceNotFoundException(codeLocalidad.toString());
			}
		}
			
			
	/**
	 * GENERIC OBJECT
	 */
		@RequestMapping(value="genericObject",method=RequestMethod.POST)
		public @ResponseBody List<RUPBean> patronPruebaEnvio(@RequestBody GenericObject genericObject) throws Exception{
			
			logger.trace( "ENTIDADES:");
			Map<String, Object> entidades = genericObject.getEntidades();
			Set<String> keys = entidades.keySet();
			for (Iterator<?> iterator = keys.iterator(); iterator.hasNext();) {
				String key = (String) iterator.next();
				logger.trace( "key: "+key+" / value: "+ entidades.get(key));
			}
			
			logger.trace( "EXTRA DATA:");
			logger.trace( "label:"+genericObject.getData().get("label"));
			logger.trace( "value:"+genericObject.getData().get("value"));
			logger.trace( "style:"+genericObject.getData().get("style"));
			
			List<RUPBean> retorno = new ArrayList<RUPBean>();
			DepartamentoProvincia departamentoProvincia = (DepartamentoProvincia) genericObject.getEntidades().get("departamentoProvincia");
			for (DepartamentoProvincia element : departamentoProvinciaService.findAll(departamentoProvincia, null)) {
				retorno.add(new RUPBean(element.getCode().toString(), element.getDescEs(), ""));
			}
			return retorno;
		}
		
		
			
		/**
		 * Multi_Entidad
		 */
		
		@RequestMapping(value = "comboEnlazado/remoteEnlazadoProvincia", method=RequestMethod.GET)
		public @ResponseBody List<NoraProvincia> getEnlazadoProvincia() {
			try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); }
			List<NoraProvincia> findAll = provinciaService.findAll(null, null);
			return findAll;
		}
		
		@RequestMapping(value = "comboEnlazado/remoteEnlazadoMunicipio", method=RequestMethod.GET)
		public @ResponseBody List<NoraMunicipio> getEnlazadoMunicipio(
				@RequestParam(value = "provincia", required = false) BigDecimal provincia_code) {
			
			//Convertir parámetros en entidad para búsqueda
			NoraMunicipio municipio = new NoraMunicipio();
			municipio.setProvinciaId(provincia_code.toString());
			try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); }
			return municipioService.findAll(municipio, null);
		}
		
		
		/**
		 * AUTOCOMPLETE REMOTO
		 */
	@RequestMapping(value = "autocomplete/calleRemote", method = RequestMethod.GET)
	public @ResponseBody
	List<NoraCalle> getCalleRemoteAutocomplete(
			@RequestParam(value = "q", required = true) String q,
			@RequestParam(value = "c", required = true) Boolean c,
			@RequestParam(value = "provinciaId", required = false) String provinciaId,
			@RequestParam(value = "municipioId", required = false) String municipioId) {
		try {
			// Filtro
			NoraCalle calle = new NoraCalle();
			calle.setDsO(q);
			calle.setMunicipioId(municipioId);
			calle.setProvinciaId(provinciaId);
			List<NoraCalle> findAllLike = calleService.findAllLike(calle, null,
					!c);
			return findAllLike;
		} catch (Exception ex) {
			throw new MethodFailureException(
					"Method getRemoteAutocomplete failed");
		}
	}
			
}
