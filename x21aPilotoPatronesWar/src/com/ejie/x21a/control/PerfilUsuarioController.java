package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.support.ByteArrayMultipartFileEditor;
import org.springframework.web.servlet.ModelAndView;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.Localidad;
import com.ejie.x21a.model.PerfilUsuario;
import com.ejie.x21a.model.Provincia;
import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.service.PerfilUsuarioService;
import com.ejie.x38.control.exception.ControlException;
import com.ejie.x38.control.exception.MethodFailureException;
import com.ejie.x38.control.exception.ResourceNotFoundException;
import com.ejie.x38.control.exception.ServiceUnavailableException;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.DateTimeManager;
import com.ejie.x38.util.ObjectConversionManager;

/**
 *  * PerfilUsuarioController generated by UDA, 14-nov-2011 9:41:53.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/perfilusuario")

public class PerfilUsuarioController  {

	private static final Logger logger = LoggerFactory.getLogger(PerfilUsuarioController.class);

	@Autowired
	private PerfilUsuarioService perfilUsuarioService;
	
	@Autowired
	private Properties appConfiguration;
	
	@InitBinder
	protected void initBinder(HttpServletRequest request,
			ServletRequestDataBinder binder) throws ServletException {
		
		binder.registerCustomEditor(byte[].class,
				new ByteArrayMultipartFileEditor());
		
		binder.registerCustomEditor(Date.class, new CustomDateEditor(DateTimeManager.getDateTimeFormat(LocaleContextHolder.getLocale()), true));
	}
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public ModelAndView getCreateForm(Model model) {
		model.addAttribute("defaultLanguage",
				appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout",
				appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		
		PerfilUsuario perfilUsuario = new PerfilUsuario();
		
		perfilUsuario.setId(new BigDecimal(4));
		
		model.addAttribute("perfilUsuario", perfilUsuario);
		return new ModelAndView("perfilusuario", "model", model);
	}

	/**
	 * Method 'getById'.
	 * @param  id BigDecimal
	 * @return String
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody PerfilUsuario getById(@PathVariable BigDecimal id) {
		try{
            PerfilUsuario perfilUsuario = new PerfilUsuario();
			perfilUsuario.setId(id);
            perfilUsuario = this.perfilUsuarioService.find(perfilUsuario);
            if (perfilUsuario == null) {
                throw new Exception(id.toString());
            }
            return perfilUsuario;
		}catch (Exception e){
		    throw new ResourceNotFoundException(id.toString());
		}
	}


	/**
	 * Method 'getAll'.
	 *@param	  id BigDecimal
	 *@param	  usuarioId String
	 *@param	  localidadCode BigDecimal
	 *@param	  comarcaCode BigDecimal
	 *@param	  provinciaCode BigDecimal
	 *@param	  userId String
	 *@param	  pass String
	 *@param	  activo String
	 *@param	  tipo String
	 *@param	  fechaAlta Timestamp
	 *@param	  fechaBaja Date
	 *@param	  horaEntrada Timestamp
	 * @param request HttpServletRequest
	 * @return String
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(
	@RequestParam(value = "id", required = false) BigDecimal id,
	@RequestParam(value = "usuarioId", required = false) String usuarioId,
	@RequestParam(value = "localidadCode", required = false) BigDecimal localidadCode,
	@RequestParam(value = "comarcaCode", required = false) BigDecimal comarcaCode,
	@RequestParam(value = "provinciaCode", required = false) BigDecimal provinciaCode,
	@RequestParam(value = "userId", required = false) String userId,
	@RequestParam(value = "pass", required = false) String pass,
	@RequestParam(value = "activo", required = false) String activo,
	@RequestParam(value = "tipo", required = false) String tipo,
	@RequestParam(value = "fechaAlta", required = false) Timestamp fechaAlta,
	@RequestParam(value = "fechaBaja", required = false) Date fechaBaja,
	@RequestParam(value = "horaEntrada", required = false) Timestamp horaEntrada,
			HttpServletRequest request) {
			try{
				PerfilUsuario filterPerfilUsuario = new PerfilUsuario(id, userId, pass, activo, tipo, null, fechaAlta, fechaBaja, horaEntrada, new Usuario(usuarioId, null, null, null, null, null, null, null), new Localidad(localidadCode, null, null, null, null), new Comarca(comarcaCode, null, null, null, null, null), new Provincia(provinciaCode, null, null, null, null));
                Pagination pagination = null;
			    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
				    pagination = new Pagination();
				    pagination.setPage(Long.valueOf(request.getParameter("page")));
				    pagination.setRows(Long.valueOf(request.getParameter("rows")));
				    pagination.setSort(request.getParameter("sidx"));
				    pagination.setAscDsc(request.getParameter("sord"));
                    List<PerfilUsuario> perfilUsuarios =  this.perfilUsuarioService.findAll(filterPerfilUsuario, pagination);

     			    if (perfilUsuarios == null) {
	    	            throw new Exception("No data Found.");
		            }
					
			        Long total =  getAllCount(filterPerfilUsuario, request);
				    JQGridJSONModel data = new JQGridJSONModel();
				    data.setPage(request.getParameter("page"));
				    data.setRecords(total.intValue());
				    data.setTotal(total, pagination.getRows());
				    data.setRows(perfilUsuarios);
				    return data;
				}else{
				    List<PerfilUsuario> perfilUsuarios =  this.perfilUsuarioService.findAll(filterPerfilUsuario, pagination);
					if (perfilUsuarios == null) {
	    	            throw new Exception("No data Found.");
		            }
				    return perfilUsuarios;
				}
            }catch(Exception e){
			    throw new ResourceNotFoundException("No data Found.");
			}
	}

	/**
	 * Method 'getAllCount'.
	 * @param filterPerfilUsuario PerfilUsuario 
	 * @param request  HttpServletRequest
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(
	@RequestParam(value = "perfilUsuario", required = false) PerfilUsuario  filterPerfilUsuario, HttpServletRequest request) {
	    try {
			return perfilUsuarioService
					.findAllCount(filterPerfilUsuario != null ? filterPerfilUsuario
							: new PerfilUsuario ());
		} catch (Exception e) {
			throw new ServiceUnavailableException("Count Service is not responding.");
		}
	}
	
	/**
	 * Method 'edit'.
	 * @param perfilUsuario PerfilUsuario 
	 * @param response HttpServletResponse
	 * @return PerfilUsuario
	 */
	@RequestMapping(method = RequestMethod.POST, headers="rup_maint_mode=edit")
    public @ResponseBody PerfilUsuario edit(
    		@ModelAttribute @Valid PerfilUsuario perfilUsuario, BindingResult bindingResult,
    		HttpServletResponse response) {		
		try {
			bindingResult.hasErrors();
            PerfilUsuario perfilUsuarioAux  = this.perfilUsuarioService.update(perfilUsuario);
			logger.info("Entity correctly inserted!");
            return perfilUsuarioAux;
        } catch(Exception e) {
            throw new MethodFailureException("Method failed");
        }
    }

	/**
	 * Method 'add'.
	 * @param perfilUsuario PerfilUsuario 
	 * @return PerfilUsuario
	 */
	@RequestMapping(method = RequestMethod.POST, headers="rup_maint_mode=add")
	public @ResponseBody PerfilUsuario add(
			@ModelAttribute @Valid PerfilUsuario perfilUsuario, BindingResult bindingResult,
    		HttpServletResponse response) {		
        try {
            PerfilUsuario perfilUsuarioAux = this.perfilUsuarioService.add(perfilUsuario);
            logger.info("Entity correctly inserted!");
        	return perfilUsuarioAux;
		} catch(Exception e) {
        	throw new MethodFailureException("Method failed");
		}
	}

	/**
	 * Method 'remove'.
	 * @param  id  BigDecimal
	 * @param response  HttpServletResponse
	 * @return 
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public void remove(
				@PathVariable BigDecimal id,
					HttpServletResponse  response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
    	try{
            PerfilUsuario perfilUsuario = new PerfilUsuario();
            perfilUsuario.setId(id);
            this.perfilUsuarioService.remove(perfilUsuario);
            response.setStatus(HttpServletResponse.SC_OK);
    	} catch(Exception e) {
    		logger.error("Unable to delete " +  id);
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    		throw new MethodFailureException("Method failed");
    	}
    }
	
	/**
	 * Method 'removeAll'.
	 * @param  perfilUsuarioIds  ArrayList
	 * @param response  HttpServletResponse
	 * @return
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	public void removeMultiple(@RequestBody ArrayList<ArrayList<String>> perfilUsuarioIds,
			HttpServletResponse response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
        ArrayList<PerfilUsuario> perfilUsuarioList = new ArrayList<PerfilUsuario>();
        try{		    
            for (ArrayList<String> perfilUsuarioId:perfilUsuarioIds) {
			    Iterator<String> iterator = perfilUsuarioId.iterator();
				    PerfilUsuario perfilUsuario = new PerfilUsuario();
			        perfilUsuario.setId(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
				    perfilUsuarioList.add(perfilUsuario);
		    }
            this.perfilUsuarioService.removeMultiple(perfilUsuarioList);
			response.setStatus(HttpServletResponse.SC_OK);
		} catch(Exception e) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			throw new MethodFailureException("Method failed");
		}
	}	

	/**
	 * Method 'handle'.
	 * @param e ControlException
	 * @return String
	 */
	@ExceptionHandler
	public @ResponseBody String handle(ControlException e) {
		logger.warn(e.getMessage());
		return e.getMessage();
	}

	/**
	 * Method 'getPerfilUsuarioService'.
	 *
	 * @return PerfilUsuarioService
	 */
	protected PerfilUsuarioService getPerfilUsuarioService() {
		return this.perfilUsuarioService;
	}

	/**
	 * Method 'setPerfilUsuarioService'.
	 *
	 * @param perfilUsuarioService  PerfilUsuarioService
	 * @return
	 */
	public void setPerfilUsuarioService(PerfilUsuarioService perfilUsuarioService) {
		this.perfilUsuarioService = perfilUsuarioService;
	}
	
	/**
	 * Method 'getAppConfiguration'.
	 * 
	 * @return appConfiguration 
	 */
	public Properties getAppConfiguration() {
		return appConfiguration;
	}

	/**
	 * Method 'setAppConfiguration'.
	 * 
	 * @param appConfiguration Properties
	 * @return
	 */
	public void setAppConfiguration(Properties appConfiguration) {
		this.appConfiguration = appConfiguration;
	}
}	
	
