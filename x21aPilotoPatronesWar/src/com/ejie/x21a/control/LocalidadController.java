package com.ejie.x21a.control;


import com.ejie.x21a.service.LocalidadService;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.ejie.x21a.model.Localidad;

/**
 * LocalidadController generated by UDA, 14-ago-2012 12:59:41.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/localidad")

public class LocalidadController  {

	private static final Logger logger = LoggerFactory.getLogger(LocalidadController.class);

	@Autowired
	private LocalidadService localidadService;
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public String getCreateForm(Model model) {
		LocalidadController.logger.info("[GET - View] : localidad");
		return "localidad";
	}

	/**
	 * Method 'getById'.
	 *
	 * @param code BigDecimal
	 * @return localidad Localidad
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.GET)
	public @ResponseBody Localidad getById(@PathVariable BigDecimal code) {
        Localidad localidad = new Localidad();
		localidad.setCode(code);
        localidad = this.localidadService.find(localidad);
        LocalidadController.logger.info("[GET - findBy_PK] : Obtener Localidad por PK");
        return localidad;
	}

	/**
	 * Method 'getAll'.
	 *
	 * @param filterLocalidad Localidad
	 * @return List
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody List<Localidad> getAll(@ModelAttribute Localidad filterLocalidad) {
		LocalidadController.logger.info("[GET - find_ALL] : Obtener Localidad por filtro");
	    return this.localidadService.findAll(filterLocalidad, null);
	}

	/**
	 * Method 'edit'.
	 *
	 * @param localidad Localidad 
	 * @return Localidad
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Localidad edit(@RequestBody Localidad localidad) {		
        Localidad localidadAux = this.localidadService.update(localidad);
		LocalidadController.logger.info("[PUT] : Localidad actualizado correctamente");
        return localidadAux;
    }

	/**
	 * Method 'add'.
	 *
	 * @param localidad Localidad 
	 * @return Localidad
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Localidad add(@RequestBody Localidad localidad) {		
        Localidad localidadAux = this.localidadService.add(localidad);
        LocalidadController.logger.info("[POST] : Localidad insertado correctamente");
    	return localidadAux;
	}

	/**
	 * Method 'remove'.
	 *
	 * @param code BigDecimal
	 * @return localidad
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody Localidad remove(@PathVariable BigDecimal code) {
        Localidad localidad = new Localidad();
        localidad.setCode(code);
        this.localidadService.remove(localidad);
       	LocalidadController.logger.info("[DELETE] : Localidad borrado correctamente");
       	return localidad;
    }
	
	/**
	 * Method 'removeAll'.
	 *
	 * @param localidadIds List
	 * @return localidadList
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> localidadIds) {
        List<Localidad> localidadList = new ArrayList<Localidad>();
        for (List<String> localidadId:localidadIds) {
		    Iterator<String> iterator = localidadId.iterator();
		    Localidad localidad = new Localidad(); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
	        localidad.setCode(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
		    localidadList.add(localidad);
	    }
        this.localidadService.removeMultiple(localidadList);
		LocalidadController.logger.info("[POST - DELETE_ALL] : Localidad borrados correctamente");
		return localidadIds;
	}	

	/**
	 * Method 'getAllJQGrid'.
	 *
	 * @param filterLocalidad Localidad
	 * @param pagination Pagination
	 * @return JQGridJSONModel
	 */
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
	public @ResponseBody JQGridJSONModel getAllJQGrid(@ModelAttribute Localidad filterLocalidad, @ModelAttribute Pagination pagination) {
        List<Localidad> localidads = this.localidadService.findAll(filterLocalidad, pagination);
        Long recordNum = this.localidadService.findAllCount(filterLocalidad);
        LocalidadController.logger.info("[GET - jqGrid] : Obtener Localidad");
		return new JQGridJSONModel(pagination, recordNum, localidads);
	}
	
}	
