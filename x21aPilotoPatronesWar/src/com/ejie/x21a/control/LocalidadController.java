package com.ejie.x21a.control;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.service.LocalidadService;
import com.ejie.x38.control.exception.ControlException;
import com.ejie.x38.control.exception.MethodFailureException;
import com.ejie.x38.control.exception.ResourceNotFoundException;
import com.ejie.x38.control.exception.ServiceUnavailableException;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ejie.x21a.model.Localidad;
/**
 * LocalidadServiceImpl generated by UDA 1.0, 29-jul-2011 9:08:13.
* @author UDA
 */
@Controller
@RequestMapping (value = "/localidad")

public class LocalidadController  {

	private static final Logger logger = LoggerFactory.getLogger(LocalidadController.class);

	@Autowired
	private LocalidadService localidadService;
	
	@Autowired
	private Properties appConfiguration;
	 /**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public ModelAndView getCreateForm(Model model) {
		model.addAttribute("defaultLanguage",
				appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout",
				appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("localidad", "model", model);
	}

	 /**
	 * Method 'getById'.
	 * @param  code BigDecimal
	 * @return String
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.GET)
	public @ResponseBody Localidad getById(@PathVariable BigDecimal code) {
		try{
            Localidad localidad = new Localidad();
			localidad.setCode(code);
            localidad = this.localidadService.find(localidad);
            if (localidad == null) {
                throw new Exception(code.toString());
            }
            return localidad;
		}catch (Exception e){
		    throw new ResourceNotFoundException(code.toString());
		}
	}


	 /**
	 * Method 'getAll'.
	*@param	  code BigDecimal
	*@param	  comarcaCode BigDecimal
	*@param	  descEs String
	*@param	  descEu String
	*@param	  css String
	*@param request HttpServletRequest
	 * @return String
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(
@RequestParam(value = "code", required = false) BigDecimal code,
@RequestParam(value = "comarcaCode", required = false) BigDecimal comarcaCode,
@RequestParam(value = "descEs", required = false) String descEs,
@RequestParam(value = "descEu", required = false) String descEu,
@RequestParam(value = "css", required = false) String css,
			HttpServletRequest request) {
			try{
				Localidad filterLocalidad = new Localidad(code, descEs, descEu, css, new Comarca(comarcaCode, null, null, null, null, null));
                Pagination pagination = null;
			    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
				    pagination = new Pagination();
				    pagination.setPage(Long.valueOf(request.getParameter("page")));
				    pagination.setRows(Long.valueOf(request.getParameter("rows")));
				    pagination.setSort(request.getParameter("sidx"));
				    pagination.setAscDsc(request.getParameter("sord"));
                    List<Localidad> localidads =  this.localidadService.findAll(filterLocalidad, pagination);

     			    if (localidads == null) {
	    	            throw new Exception("No data Found.");
		            }
					
			        Long total =  getAllCount(filterLocalidad, request);
				    JQGridJSONModel data = new JQGridJSONModel();
				    data.setPage(request.getParameter("page"));
				    data.setRecords(total.intValue());
				    data.setTotal(total, pagination.getRows());
				    data.setRows(localidads);
				    return data;
				}else{
				    List<Localidad> localidads =  this.localidadService.findAll(filterLocalidad, pagination);
					if (localidads == null) {
	    	            throw new Exception("No data Found.");
		            }
				    return localidads;
				}
            }catch(Exception e){
			    throw new ResourceNotFoundException("No data Found.");
			}
	}

	/**
	 * Method 'getAllCount'.
	 * @param filterLocalidad Localidad 
	 * @param request  HttpServletRequest
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(
	@RequestParam(value = "localidad", required = false) Localidad  filterLocalidad, HttpServletRequest request) {
	    try {
			return localidadService
					.findAllCount(filterLocalidad != null ? filterLocalidad
							: new Localidad ());
		} catch (Exception e) {
			throw new ServiceUnavailableException("Count Service is not responding.");
		}
	}
	
	 /**
	 * Method 'edit'.
	 * @param	 localidad Localidad 
	 * @param response  HttpServletResponse
	 * @return Localidad
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Localidad edit(@RequestBody Localidad localidad, HttpServletResponse response) {		
		try {
            Localidad localidadAux  = this.localidadService.update(localidad);
			logger.info( "Entity correctly inserted!");
            return localidadAux;
        } catch(Exception e) {
            throw new MethodFailureException("Method failed");
        }
    }

	 /**
	 * Method 'add'.
	 * @param	 localidad Localidad 
	 * @return Localidad
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Localidad add(@RequestBody Localidad localidad) {		
        try {
            Localidad localidadAux = this.localidadService.add(localidad);
            logger.info( "Entity correctly inserted!");
        	return localidadAux;
		} catch(Exception e) {
        	throw new MethodFailureException("Method failed");
		}
	}

	 /**
	 * Method 'remove'.
	 * @param  code  BigDecimal
	 * @param response  HttpServletResponse
	 *
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
    public void remove(
				@PathVariable BigDecimal code,
					HttpServletResponse  response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
    	try{
            Localidad localidad = new Localidad();
            localidad.setCode(code);
            this.localidadService.remove(localidad);
            response.setStatus(HttpServletResponse.SC_OK);
    	} catch(Exception e) {
    		logger.error( "Unable to delete " +  code);
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    		throw new MethodFailureException("Method failed");
    	}
    }
	
	 /**
	 * Method 'removeAll'.
	 * @param  localidadIds  ArrayList
	 * @param response  HttpServletResponse
	 *
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	public void removeMultiple(@RequestBody ArrayList<ArrayList<String>> localidadIds,
			HttpServletResponse response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
        ArrayList<Localidad> localidadList = new ArrayList<Localidad>();
        try{		    
            for (ArrayList<String> localidadId:localidadIds) {
			    Iterator<String> iterator = localidadId.iterator();
				    Localidad localidad = new Localidad();
			        localidad.setCode(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
				    localidadList.add(localidad);
		    }
            this.localidadService.removeMultiple(localidadList);
			response.setStatus(HttpServletResponse.SC_OK);
		} catch(Exception e) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			throw new MethodFailureException("Method failed");
		}
	}	

	/**
	 * Method 'handle'.
	 * @param e ControlException
	 * @return String
	 *
	 */
	@ExceptionHandler
	public @ResponseBody String handle(ControlException e) {
		logger.warn( e.getMessage());
		return e.getMessage();
	}

	/**
	 * Method 'getLocalidadService'.
	 *
	 * @return LocalidadService
	 *
	 */
	protected LocalidadService getLocalidadService() {
		return this.localidadService;
	}

	/**
	 * Method 'setLocalidadService'.
	 *
	 * @param localidadService  LocalidadService
	 *
	 */
	public void setLocalidadService(LocalidadService localidadService) {
		this.localidadService = localidadService;
	}
	
	/**
	 * Method 'getAppConfiguration'.
	 * 
	 * @return appConfiguration
	 * 
	 */
	public Properties getAppConfiguration() {
		return appConfiguration;
	}

	/**
	 * Method 'setAppConfiguration'.
	 * 
	 * @paramappConfiguration Properties
	 * 
	 */
	public void setAppConfiguration(Properties appConfiguration) {
		this.appConfiguration = appConfiguration;
	}
}	
	
