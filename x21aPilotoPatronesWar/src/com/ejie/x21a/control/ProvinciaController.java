package com.ejie.x21a.control;

import com.ejie.x21a.service.ProvinciaService;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.ejie.x21a.model.Provincia;

/**
 * ProvinciaController generated by UDA, 14-ago-2012 12:59:41.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/provincia")

public class ProvinciaController  {

	private static final Logger logger = LoggerFactory.getLogger(ProvinciaController.class);

	@Autowired
	private ProvinciaService provinciaService;
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public String getCreateForm(Model model) {
		ProvinciaController.logger.info("[GET - View] : provincia");
		return "provincia";
	}

	/**
	 * Method 'getById'.
	 *
	 * @param code BigDecimal
	 * @return provincia Provincia
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.GET)
	public @ResponseBody Provincia getById(@PathVariable BigDecimal code) {
        Provincia provincia = new Provincia();
		provincia.setCode(code);
        provincia = this.provinciaService.find(provincia);
        ProvinciaController.logger.info("[GET - findBy_PK] : Obtener Provincia por PK");
        return provincia;
	}

	/**
	 * Method 'getAll'.
	 *
	 * @param filterProvincia Provincia
	 * @return List
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody List<Provincia> getAll(@ModelAttribute Provincia filterProvincia) {
		ProvinciaController.logger.info("[GET - find_ALL] : Obtener Provincia por filtro");
	    return this.provinciaService.findAll(filterProvincia, null);
	}

	/**
	 * Method 'edit'.
	 *
	 * @param provincia Provincia 
	 * @return Provincia
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Provincia edit(@RequestBody Provincia provincia) {		
        Provincia provinciaAux = this.provinciaService.update(provincia);
		ProvinciaController.logger.info("[PUT] : Provincia actualizado correctamente");
        return provinciaAux;
    }

	/**
	 * Method 'add'.
	 *
	 * @param provincia Provincia 
	 * @return Provincia
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Provincia add(@RequestBody Provincia provincia) {		
        Provincia provinciaAux = this.provinciaService.add(provincia);
        ProvinciaController.logger.info("[POST] : Provincia insertado correctamente");
    	return provinciaAux;
	}

	/**
	 * Method 'remove'.
	 *
	 * @param code BigDecimal
	 * @return provincia
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody Provincia remove(@PathVariable BigDecimal code) {
        Provincia provincia = new Provincia();
        provincia.setCode(code);
        this.provinciaService.remove(provincia);
       	ProvinciaController.logger.info("[DELETE] : Provincia borrado correctamente");
       	return provincia;
    }
	
	/**
	 * Method 'removeAll'.
	 *
	 * @param provinciaIds List
	 * @return provinciaList
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> provinciaIds) {
        List<Provincia> provinciaList = new ArrayList<Provincia>();
        for (List<String> provinciaId:provinciaIds) {
		    Iterator<String> iterator = provinciaId.iterator();
		    Provincia provincia = new Provincia(); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
	        provincia.setCode(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
		    provinciaList.add(provincia);
	    }
        this.provinciaService.removeMultiple(provinciaList);
		ProvinciaController.logger.info("[POST - DELETE_ALL] : Provincia borrados correctamente");
		return provinciaIds;
	}	

	/**
	 * Method 'getAllJQGrid'.
	 *
	 * @param filterProvincia Provincia
	 * @param pagination Pagination
	 * @return JQGridJSONModel
	 */
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
	public @ResponseBody JQGridJSONModel getAllJQGrid(@ModelAttribute Provincia filterProvincia, @ModelAttribute Pagination pagination) {
        List<Provincia> provincias = this.provinciaService.findAll(filterProvincia, pagination);
        Long recordNum = this.provinciaService.findAllCount(filterProvincia);
        ProvinciaController.logger.info("[GET - jqGrid] : Obtener Provincia");
		return new JQGridJSONModel(pagination, recordNum, provincias);
	}
	
}	
