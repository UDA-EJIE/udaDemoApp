/*
* Copyright 2011 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import com.ejie.x21a.model.Provincia;
import com.ejie.x21a.service.ComarcaService;
import com.ejie.x38.control.exception.ControlException;
import com.ejie.x38.control.exception.MethodFailureException;
import com.ejie.x38.control.exception.ResourceNotFoundException;
import com.ejie.x38.control.exception.ServiceUnavailableException;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ejie.x21a.model.Comarca;
/**
 * ComarcaServiceImpl generated by UDA 1.0, 29-jul-2011 9:08:13.
* @author UDA
 */
@Controller
@RequestMapping (value = "/comarca")

public class ComarcaController  {

	private static final Logger logger = LoggerFactory.getLogger(ComarcaController.class);

	@Autowired
	private ComarcaService comarcaService;
	
	@Autowired
	private Properties appConfiguration;
	 /**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public ModelAndView getCreateForm(Model model) {
		model.addAttribute("defaultLanguage",
				appConfiguration.get("x21aPilotoPatronesWar.default.language"));
		model.addAttribute("defaultLayout",
				appConfiguration.get("x21aPilotoPatronesWar.default.layout"));
		return new ModelAndView("comarca", "model", model);
	}

	 /**
	 * Method 'getById'.
	 * @param  code BigDecimal
	 * @return String
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.GET)
	public @ResponseBody Comarca getById(@PathVariable BigDecimal code) {
		try{
            Comarca comarca = new Comarca();
			comarca.setCode(code);
            comarca = this.comarcaService.find(comarca);
            if (comarca == null) {
                throw new Exception(code.toString());
            }
            return comarca;
		}catch (Exception e){
		    throw new ResourceNotFoundException(code.toString());
		}
	}


	 /**
	 * Method 'getAll'.
	*@param	  code BigDecimal
	*@param	  provinciaCode BigDecimal
	*@param	  descEs String
	*@param	  descEu String
	*@param	  css String
	*@param request HttpServletRequest
	 * @return String
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(
@RequestParam(value = "code", required = false) BigDecimal code,
@RequestParam(value = "comarca.provincia.code", required = false) BigDecimal provinciaCode,
@RequestParam(value = "descEs", required = false) String descEs,
@RequestParam(value = "descEu", required = false) String descEu,
@RequestParam(value = "css", required = false) String css,
			HttpServletRequest request) {
			try{
				Comarca filterComarca = new Comarca(code, descEs, descEu, css, new Provincia(provinciaCode, null, null, null, null));
                Pagination pagination = null;
			    if (request.getHeader("JQGridModel") != null &&  request.getHeader("JQGridModel").equals("true")) {
				    pagination = new Pagination();
				    pagination.setPage(Long.valueOf(request.getParameter("page")));
				    pagination.setRows(Long.valueOf(request.getParameter("rows")));
				    pagination.setSort(request.getParameter("sidx"));
				    pagination.setAscDsc(request.getParameter("sord"));
                    List<Comarca> comarcas =  this.comarcaService.findAll(filterComarca, pagination);

     			    if (comarcas == null) {
	    	            throw new Exception("No data Found.");
		            }
					
			        Long total =  getAllCount(filterComarca, request);
				    JQGridJSONModel data = new JQGridJSONModel();
				    data.setPage(request.getParameter("page"));
				    data.setRecords(total.intValue());
				    data.setTotal(total, pagination.getRows());
				    data.setRows(comarcas);
				    return data;
				}else{
				    List<Comarca> comarcas =  this.comarcaService.findAll(filterComarca, pagination);
					if (comarcas == null) {
	    	            throw new Exception("No data Found.");
		            }
				    return comarcas;
				}
            }catch(Exception e){
			    throw new ResourceNotFoundException("No data Found.");
			}
	}

	/**
	 * Method 'getAllCount'.
	 * @param filterComarca Comarca 
	 * @param request  HttpServletRequest
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(
	@RequestParam(value = "comarca", required = false) Comarca  filterComarca, HttpServletRequest request) {
	    try {
			return comarcaService
					.findAllCount(filterComarca != null ? filterComarca
							: new Comarca ());
		} catch (Exception e) {
			throw new ServiceUnavailableException("Count Service is not responding.");
		}
	}
	
	 /**
	 * Method 'edit'.
	 * @param	 comarca Comarca 
	 * @param response  HttpServletResponse
	 * @return Comarca
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Comarca edit(@RequestBody Comarca comarca, HttpServletResponse response) {		
		try {
            Comarca comarcaAux  = this.comarcaService.update(comarca);
			logger.info( "Entity correctly inserted!");
            return comarcaAux;
        } catch(Exception e) {
            throw new MethodFailureException("Method failed");
        }
    }

	 /**
	 * Method 'add'.
	 * @param	 comarca Comarca 
	 * @return Comarca
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Comarca add(@RequestBody Comarca comarca) {		
        try {
            Comarca comarcaAux = this.comarcaService.add(comarca);
            logger.info( "Entity correctly inserted!");
        	return comarcaAux;
		} catch(Exception e) {
        	throw new MethodFailureException("Method failed");
		}
	}

	 /**
	 * Method 'remove'.
	 * @param  code  BigDecimal
	 * @param response  HttpServletResponse
	 *
	 */
	@RequestMapping(value = "/{code}", method = RequestMethod.DELETE)
    public void remove(
				@PathVariable BigDecimal code,
					HttpServletResponse  response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
    	try{
            Comarca comarca = new Comarca();
            comarca.setCode(code);
            this.comarcaService.remove(comarca);
            response.setStatus(HttpServletResponse.SC_OK);
    	} catch(Exception e) {
    		logger.error( "Unable to delete " +  code);
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    		throw new MethodFailureException("Method failed");
    	}
    }
	
	 /**
	 * Method 'removeAll'.
	 * @param  comarcaIds  ArrayList
	 * @param response  HttpServletResponse
	 *
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	public void removeMultiple(@RequestBody ArrayList<ArrayList<String>> comarcaIds,
			HttpServletResponse response) {
        response.setContentType("text/javascript;charset=utf-8");
        response.setHeader("Pragma", "cache");
        response.setHeader("Expires", "0");
        response.setHeader("Cache-Control", "private");
        ArrayList<Comarca> comarcaList = new ArrayList<Comarca>();
        try{		    
            for (ArrayList<String> comarcaId:comarcaIds) {
			    Iterator<String> iterator = comarcaId.iterator();
				    Comarca comarca = new Comarca();
			        comarca.setCode(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
				    comarcaList.add(comarca);
		    }
            this.comarcaService.removeMultiple(comarcaList);
			response.setStatus(HttpServletResponse.SC_OK);
		} catch(Exception e) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			throw new MethodFailureException("Method failed");
		}
	}	

	/**
	 * Method 'handle'.
	 * @param e ControlException
	 * @return String
	 *
	 */
	@ExceptionHandler
	public @ResponseBody String handle(ControlException e) {
		logger.warn( e.getMessage());
		return e.getMessage();
	}

	/**
	 * Method 'getComarcaService'.
	 *
	 * @return ComarcaService
	 *
	 */
	protected ComarcaService getComarcaService() {
		return this.comarcaService;
	}

	/**
	 * Method 'setComarcaService'.
	 *
	 * @param comarcaService  ComarcaService
	 *
	 */
	public void setComarcaService(ComarcaService comarcaService) {
		this.comarcaService = comarcaService;
	}
	
	/**
	 * Method 'getAppConfiguration'.
	 * 
	 * @return appConfiguration
	 * 
	 */
	public Properties getAppConfiguration() {
		return appConfiguration;
	}

	/**
	 * Method 'setAppConfiguration'.
	 * 
	 * @paramappConfiguration Properties
	 * 
	 */
	public void setAppConfiguration(Properties appConfiguration) {
		this.appConfiguration = appConfiguration;
	}
}	
	
