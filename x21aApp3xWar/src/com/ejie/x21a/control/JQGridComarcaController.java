/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.model.Provincia;
import com.ejie.x21a.service.JQGridComarcaService;
import com.ejie.x21a.service.ProvinciaService;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.JQGridRequestDto;
import com.ejie.x38.dto.JQGridResponseDto;
import com.ejie.x38.rup.table.filter.model.Filter;
import com.ejie.x38.rup.table.filter.service.FilterService;
/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
* @author UDA
 */
@Controller
@RequestMapping (value = "/jqGridComarca")
public class JQGridComarcaController  {

	private static final Logger logger = LoggerFactory.getLogger(JQGridComarcaController.class);

	
	@Autowired 
	private JQGridComarcaService comarcaService;
	
	@Autowired 
	private ProvinciaService provinciaService;
	
	@Autowired
	private FilterService filterService;
	
	/**
	 * Method 'getById'.
	 * @param  id String
	 * @return String
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Comarca getById(@PathVariable BigDecimal id) {
        Comarca comarca = new Comarca();
        comarca.setCode(id);
        comarca = this.comarcaService.find(comarca);
        
        return comarca;
	}
	
	
	 /**
		 * Method 'edit'.
		 * @param comarca Comarca 
		 * @return Comarca
		 */
		@RequestMapping(method = RequestMethod.PUT)
	    public @ResponseBody Comarca edit(@Validated @RequestBody Comarca comarca) {		
	        Comarca comarcaAux = this.comarcaService.update(comarca);
			logger.info("Entity correctly updated!");
	        return comarcaAux;
	    }

		 /**
		 * Method 'add'.
		 * @param comarca Comarca 
		 * @return Comarca
		 */
		@RequestMapping(method = RequestMethod.POST)
		public @ResponseBody Comarca add(@Validated @RequestBody Comarca comarca) {		
	        Comarca comarcaAux = this.comarcaService.add(comarca);
	        logger.info("Entity correctly inserted!");
	    	return comarcaAux;
		}

		 /**
		 * Method 'remove'.
		 * @param id String
		 *
		 */
		@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
		@ResponseStatus(value=HttpStatus.OK)
	    public @ResponseBody Comarca remove(@PathVariable(value="id") BigDecimal id, HttpServletResponse  response) {
	        Comarca comarca = new Comarca();
	        comarca.setCode(id);
	        this.comarcaService.remove(comarca);
	        logger.info("Entity correctly deleted!");
	        return comarca;
	    }
		
	
	 /**
	  * RUP_TABLE
	  */
		
//		@Json(mixins={@JsonMixin(target=Usuario.class, mixin=UsuarioMixIn.class)})
		@RequestMapping(value = "/filter", method = RequestMethod.POST)
		public @ResponseBody JQGridResponseDto<Comarca> filter(
				@RequestJsonBody(param="filter") Comarca comarca,
				@RequestJsonBody JQGridRequestDto jqGridRequestDto) {
			JQGridComarcaController.logger.info("[GET - jqGrid] : Obtener Comarcas");
			
			return comarcaService.filter(comarca, jqGridRequestDto, false);
		}
		
		
		@RequestMapping(value = "/multiFilter/add", method = RequestMethod.POST)
		public @ResponseBody Filter filterAdd(@RequestJsonBody(param="filtro") Filter filtro){
			JQGridComarcaController.logger.info("[POST - jqGrid] : add filter");
			
			 return filterService.insert(filtro);
		}	
		

		
		@RequestMapping(value = "/multiFilter/delete", method = RequestMethod.POST)
		public @ResponseBody Filter  filterDelete(
				@RequestJsonBody(param="filtro") Filter filtro) {
			JQGridComarcaController.logger.info("[POST - jqGrid] : delete filter");
			return  filterService.delete(filtro);
		}
		
		
		@RequestMapping(value = "/multiFilter/getDefault", method = RequestMethod.GET)
		public @ResponseBody Filter filterGetDefault(
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "comarca", required = true) String filterComarca) {
			JQGridComarcaController.logger.info("[get - jqGrid] : getDefault filter");
			 return filterService.getDefault(filterSelector, filterComarca);
		}
		
		
		
		
		@RequestMapping(value = "/multiFilter/getAll", method = RequestMethod.GET)
		public @ResponseBody List<Filter> filterGetAll(
			@RequestParam(value = "filterSelector", required = true) String filterSelector,
			@RequestParam(value = "comarca", required = true) String filterComarca) {
			JQGridComarcaController.logger.info("[get - jqGrid] : GetAll filter");
			 return filterService.getAllFilters(filterSelector, filterComarca);
		}
		
		
		
		@RequestMapping(value = "/search", method = RequestMethod.POST)
		public @ResponseBody Object search(
				@RequestJsonBody(param="filter") Comarca comarcaFilter,
				@RequestJsonBody(param="search") Comarca comarcaSearch,
				@RequestJsonBody JQGridRequestDto jqGridRequestDto){
			
			JQGridComarcaController.logger.info("[GET - search] : Obtener Comarcas por filtro");
			return comarcaService.search(comarcaFilter, comarcaSearch, jqGridRequestDto, true);
		}
		
		
	/**
	 * N/A	
	 */
		
		/**
		 * Method 'getAllCount'.
		 * @param filterComarca Comarca 
		 * @return Long
		 */
//		@RequestMapping(value = "/count", method = RequestMethod.GET)
//		public @ResponseBody Long getAllCount(@RequestParam(value = "comarca", required = false) Comarca  filterComarca) {
//			return jqGridComarcaService.findAllLikeCount(filterComarca != null ? filterComarca: new Comarca(),false);
//		}
		
		
		
//		 /**
//		 * Method 'removeAll'.
//		 * @param  comarcaIds  ArrayList
//		 *
//		 */	
//		@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
//		@ResponseStatus(value=HttpStatus.OK)
//		public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> comarcaIds) {
//		List<Comarca> comarcaList = new ArrayList<Comarca>();
//        for (List<String> comarcaId:comarcaIds) {
//		    Iterator<String> iterator = comarcaId.iterator();
//			    Comarca comarca = new Comarca();
//		        comarca.setId(ObjectConversionManager.convert(iterator.next(), String.class));
//			    comarcaList.add(comarca);
//	    }
//        this.jqGridComarcaService.removeMultiple(comarcaList);
//        logger.info("All entities correctly deleted!");
//        return comarcaIds;
//	}	
		
		
		
	/*
	 * MAPPING PARA EL COMBO DE PROVINCIAS
	 */
	@RequestMapping(value = "/provincia", method=RequestMethod.GET)
	public @ResponseBody List<Provincia> getProvincias() {
		
		Provincia filtroProvincia = new Provincia();
		
		List<Provincia> findAll = provinciaService.findAll(filtroProvincia, null);
		return findAll;
	}
	
	/*
	 * MAPPING PARA EL COMBO DE COMARCAS
	 */
	@RequestMapping(value = "/comarca", method=RequestMethod.GET)
	public @ResponseBody List<Comarca> getComarcas() {
		
		Comarca filtroComarca = new Comarca();
		
		List<Comarca> findAll = comarcaService.findAll(filtroComarca, null);
		return findAll;
	}
}