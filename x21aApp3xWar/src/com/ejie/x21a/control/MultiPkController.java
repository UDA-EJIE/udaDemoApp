package com.ejie.x21a.control;


import com.ejie.x21a.model.MultiPk;
import com.ejie.x21a.service.TableMultiPkService;
import com.ejie.x38.control.bind.annotation.RequestJsonBody;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import java.math.BigDecimal;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;


/**
 * MultiPkController generated by UDA, 28-may-2018 16:28:35.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/table/multipk")

public class MultiPkController  {

	private static final Logger logger = LoggerFactory.getLogger(MultiPkController.class);

	@Autowired
	private TableMultiPkService multiPkService;
	
	/*
	 * OPERACIONES CRUD (Create, Read, Update, Delete)
	 * 
	 */
	
	/**
	 * Operacion CRUD Read. Devuelve el bean correspondiente al identificador indicado.
	 * 
	 * @param ida BigDecimal
	 * @param idb BigDecimal
	 * @return MultiPk 
	 *            Objeto correspondiente al identificador indicado.
	 */
	@RequestMapping(value = "/{ida}/{idb}", method = RequestMethod.GET)
	public @ResponseBody MultiPk get(@PathVariable BigDecimal ida, @PathVariable BigDecimal idb) {
        MultiPk multiPk = new MultiPk();
		multiPk.setIda(ida);
		multiPk.setIdb(idb);
        multiPk = this.multiPkService.find(multiPk);
        MultiPkController.logger.info("[GET - findBy_PK] : Obtener MultiPk por PK");
        return multiPk;
	}
	
	@RequestMapping(method = RequestMethod.GET)
	public String getFiltroSimple (Model model) {
		
		return "multipk";
	}

	/**
	 * Devuelve una lista de beans correspondientes a los valores de filtrados
	 * indicados en el objeto pasado como parametro.
	 *
	 * @param filterMultiPk MultiPk
	 *            Objeto que contiene los parametros de filtrado utilizados en
	 *            la busqueda.
	 * @return List<MultiPk> 
	 *            Lista de objetos correspondientes a la busqueda realizada.
	 */
	@RequestMapping(value = "/all", method = RequestMethod.GET)
	public @ResponseBody List<MultiPk> getAll(@ModelAttribute MultiPk filterMultiPk) {
		MultiPkController.logger.info("[GET - find_ALL] : Obtener MultiPk por filtro");
	    return this.multiPkService.findAll(filterMultiPk, null);
	}

	/**
	 * Operacion CRUD Edit. Modificacion del bean indicado.
	 *
	 * @param multiPk MultiPk 
	 *            Bean que contiene la informacion a modificar.
	 * @return MultiPk 
	 *            Bean resultante de la modificacion.
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody MultiPk edit(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.update(multiPk);
		MultiPkController.logger.info("[PUT] : MultiPk actualizado correctamente");
        return multiPkAux;
    }

	/**
	 * Operacion CRUD Create. Creacion de un nuevo registro a partir del bean
	 * indicado.
	 *
	 * @param multiPk MultiPk 
	 *            Bean que contiene la informacion con la que se va a crear el
	 *            nuevo registro.
	 * @return MultiPk
	 *            Bean resultante del proceso de creacion.
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody MultiPk add(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.add(multiPk);
        MultiPkController.logger.info("[POST] : MultiPk insertado correctamente");
    	return multiPkAux;
	}

	/**
	 * Operacion CRUD Delete. Borrado del registro correspondiente al
	 * identificador especificado.
	 *
	 * @param ida BigDecimal
	 * @param idb BigDecimal
	 *            Identificador del objeto que se desea eliminar.
	 * @return MultiPk
	 *            Bean eliminado.
	 */
	@RequestMapping(value = "/{ida}/{idb}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody MultiPk remove(@PathVariable BigDecimal ida, @PathVariable BigDecimal idb) {
        MultiPk multiPk = new MultiPk();
        multiPk.setIda(ida);
        multiPk.setIdb(idb);
        this.multiPkService.remove(multiPk);
       	MultiPkController.logger.info("[DELETE] : MultiPk borrado correctamente");
       	return multiPk;
    }
    
	
	/*
	 * METODOS COMPONENTE RUP_TABLE
	 * 
	 */

	 /**
	 * Metodo de presentacion del RUP_TABLE.
	 * 
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "/maint", method = RequestMethod.GET)
	public String getFormEdit(Model model) {
		MultiPkController.logger.info("[GET - View] : multipk");
		return "multipk";
	}
	 
	 /**
	 * Operacion de filtrado del componente RUP_TABLE.
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en el filtrado.
	 * @return TableResponseDto<MultiPk>
	 *            Dto que contiene el resultado del filtrado realizado por el 
	 *            componente RUP_TABLE.
	 */
	@RequestMapping(value = "/filter", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<MultiPk> filter(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		MultiPkController.logger.info("[POST - filter] : Obtener MultiPks");
		return this.multiPkService.filter(filterMultiPk, tableRequestDto, false);
	}
	
	@RequestMapping(value = "/filter2", method = RequestMethod.POST)
	public @ResponseBody TableResponseDto<MultiPk> filter2() {
		MultiPkController.logger.info("[POST - filter] : Obtener MultiPks2");
		return this.multiPkService.filter(new MultiPk(), new TableRequestDto(), false);
	}
	 
	/**
	 * Operacion de busqueda del componente RUP_TABLE.
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param searchMultiPk MultiPk
	 *            Bean que contiene los parametros de busqueda a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la b√∫squeda.
	 * @return TableRowDto<MultiPk> 
	 *            Dto que contiene el resultado de la busqueda realizada por el
	 *            componente RUP_TABLE. 
	 */
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody List<TableRowDto<MultiPk>> search(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody(param="search") MultiPk searchMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		MultiPkController.logger.info("[POST - search] : Buscar MultiPks");
		return this.multiPkService.search(filterMultiPk, searchMultiPk, tableRequestDto, false);
	}
	
	/**
	 * Borrado multiple de registros
	 * 
	 * @param filterMultiPk MultiPk
	 *            Bean que contiene los parametros de filtrado a emplear.
	 * @param tableRequestDto
	 *            Dto que contiene los parametros de configuracion propios del
	 *            RUP_TABLE a aplicar en la busqueda.
	 * @return List<String>
	 *            Lista de los identificadores de los registros eliminados.
	 * 
	 */
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<String> removeMultiple(
			@RequestJsonBody(param="filter") MultiPk filterMultiPk,
			@RequestJsonBody TableRequestDto tableRequestDto) {
		MultiPkController.logger.info("[POST - search] : [POST - removeMultiple] : Eliminar multiples MultiPks");
		this.multiPkService.removeMultiple(filterMultiPk, tableRequestDto, false);
		MultiPkController.logger.info("All entities correctly deleted!");
		
		return tableRequestDto.getMultiselection().getSelectedIds();
	}
	

	
	/**
 	 * EXPORTERS
 	 */
 	 
	@RequestMapping(value = "/clipboardReport", method = RequestMethod.POST)
	protected @ResponseBody List<MultiPk> getClipboardReport(
			@RequestJsonBody(param="filter") MultiPk  filterMultiPk ,
			@RequestJsonBody TableRequestDto  tableRequestDto) {
		MultiPkController.logger.info("[POST - clipboardReport] : : Copiar multiples usuarios");
		return this.multiPkService.getMultiple(filterMultiPk, tableRequestDto, false);
	}
	
}	
