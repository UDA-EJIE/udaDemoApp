/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.TaskDao;
import com.ejie.x21a.model.Task;
import com.ejie.x38.dto.Pagination;

/**
 * ComarcaServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "taskService")
public class TaskServiceImpl implements TaskService {

	@Autowired
	private TaskDao taskDao;

	/**
	 * Inserts a single row in the Comarca table.
	 *
	 * @param task Comarca
	 * @return Comarca
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Task add(Task task) {
		return this.taskDao.add(task);
	}

	/**
	 * Updates a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Comarca
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Task update(Task task) {
		return this.taskDao.update(task);
	 }

	/**
	 * Finds a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Comarca
	 */
	public Task find(Task task) {
		return (Task) this.taskDao.find(task);
	}

	/**
	 * Finds a List of rows in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Task> findAll(Task task, Pagination pagination) {
		return (List<Task>) this.taskDao.findAll(task, pagination);
	}

	@Override
	public void delete(Task task) {
		this.taskDao.remove(task);
	}

	@Override
	public void done(Task task) {
		 this.taskDao.done(task);
		
	}
    
	
	
	
}

