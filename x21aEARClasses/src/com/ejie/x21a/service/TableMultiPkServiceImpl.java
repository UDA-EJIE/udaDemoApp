package com.ejie.x21a.service;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;
import org.odftoolkit.odfdom.doc.table.OdfTable;
import org.odftoolkit.odfdom.doc.table.OdfTableRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.TableMultiPkDao;
import com.ejie.x21a.model.MultiPk;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.lowagie.text.Document;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
;

/**
 * MultiPkServiceImpl generated by UDA, 28-may-2018 16:28:34.
 * @author UDA
 */

@Service(value = "multiPkService")
public class TableMultiPkServiceImpl implements TableMultiPkService {

	@Autowired
	private TableMultiPkDao multiPkDao;

	/**
	 * Inserts a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk add(MultiPk multiPk) {
		return this.multiPkDao.add(multiPk);
	}

	/**
	 * Updates a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk update(MultiPk multiPk) {
		return this.multiPkDao.update(multiPk);
	 }

	/**
	 * Finds a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	public MultiPk find(MultiPk multiPk) {
		return (MultiPk) this.multiPkDao.find(multiPk);
	}
	
	/**
	 * Deletes a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(MultiPk multiPk) {
		this.multiPkDao.remove(multiPk);
	}

	/**
	 * Finds a list of rows in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return List<MultiPk>
	 */
	public List<MultiPk> findAll(MultiPk multiPk, TableRequestDto tableRequestDto){
		return (List<MultiPk>) this.multiPkDao.findAll(multiPk, tableRequestDto);
	}
    
	/**
	 * Finds rows in the MultiPk table using like.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean	 
	 * @return List<MultiPk>
	 */
	public List<MultiPk> findAllLike(MultiPk multiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return (List<MultiPk>) this.multiPkDao.findAllLike(multiPk, tableRequestDto, startsWith);
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Removes rows from the MultiPk table.
	 *
	 * @param tableRequestDto TableRequestDto
	 */	
	public void removeMultiple(TableRequestDto tableRequestDto){
		this.multiPkDao.removeMultiple(tableRequestDto);
	}
        
	/**
	 * Filter method in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<MultiPk>
	 */	
	public TableResponseDto< MultiPk> filter(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith){
		List<MultiPk> listaMultiPk =  this.multiPkDao.findAllLike(filterMultiPk, tableRequestDto, false);
		Long recordNum =  this.multiPkDao.findAllLikeCount(filterMultiPk != null ? filterMultiPk: new MultiPk (),false);
		
		TableResponseDto<MultiPk> usuarioDto = new TableResponseDto<MultiPk>(tableRequestDto, recordNum, listaMultiPk);
		
		if (tableRequestDto.getMultiselection().getSelectedIds()!=null){
			List< TableRowDto< MultiPk>> reorderSelection = this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
			usuarioDto.setReorderedSelection(reorderSelection);
			usuarioDto.addAdditionalParam("reorderedSelection", reorderSelection);
			usuarioDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds()!=null){
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List< TableRowDto< MultiPk>> reorderSeeker = this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
			usuarioDto.setReorderedSeeker(reorderSeeker);
			usuarioDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return usuarioDto;   
	}
    /**
	 * Searches rows in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param searchMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List<TableRowDto<MultiPk>>
	 */	
    public List< TableRowDto< MultiPk>> search(MultiPk filterMultiPk, MultiPk searchMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.multiPkDao.search(filterMultiPk, searchMultiPk, tableRequestDto, startsWith);
	}
    
    /**
	 * Reorder the selection made in MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return Object
	 */	
    public Object reorderSelection(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
	}
    
    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
	 
	/**
	 * Finder method in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	public TableResponseDto<JerarquiaDto<MultiPk>> jerarquia(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		List<JerarquiaDto<MultiPk>> listaMultiPk =  this.multiPkDao.findAllLikeJerarquia(filterMultiPk, tableRequestDto);
		Long recordNum = this.multiPkDao.findAllLikeCountJerarquia(filterMultiPk, tableRequestDto);
		return new TableResponseDto<JerarquiaDto<MultiPk>>(tableRequestDto, recordNum, listaMultiPk);
	}
	
	/**
	 * Finder method for siblings rows in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	public TableResponseDto<JerarquiaDto<MultiPk>> jerarquiaChildren(MultiPk filterMultiPk, TableRequestDto tableRequestDto){
		TableResponseDto<JerarquiaDto<MultiPk>> tableResponseDto = new TableResponseDto<JerarquiaDto<MultiPk>>();
		tableResponseDto.addAdditionalParam(TableResponseDto.CHILDREN, this.multiPkDao.findAllChild(filterMultiPk, tableRequestDto));
		return tableResponseDto;
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve un fichero en el formato deseado que contiene los datos exportados de la tabla.
	 *
	 * @param filterMultiPk MultiPk
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	public void generateReport(MultiPk filterMultiPk, String[] columns, String fileName, String sheetTitle, ArrayList<?> reportsParams, TableRequestDto tableRequestDto, Locale locale, HttpServletRequest request, HttpServletResponse response) {
		// Accede a la DB para recuperar datos
		List<MultiPk> filteredData = getDataForReports(filterMultiPk, tableRequestDto);
		String extension = null;
		
		// Obtener idioma
		String language = locale.getLanguage();
		
		// Comprobar si las siguientes variables estan vacias, en caso de estarlo se las asigna un valor generico
		fileName = (fileName != null && !fileName.isEmpty()) ? fileName : "report";
		sheetTitle = (sheetTitle != null && !sheetTitle.isEmpty()) ? sheetTitle : MultiPk.class.getSimpleName();
		
		// Obtener el formato de fecha especifico del locale
        SimpleDateFormat formatter = (SimpleDateFormat) SimpleDateFormat.getDateInstance(DateFormat.SHORT, locale);
		
		// Cuando no se definen columnas porque se quieren obtener todas
        if (columns == null) {
        	Field[] fields = MultiPk.class.getDeclaredFields();
        	ArrayList<String> tempColumns = new ArrayList<String>();
	        
	        for(int i = 0; i < fields.length; i++) {
	        	try {
	        		String methodName = fields[i].getName();
	        		methodName = methodName.substring(0, 1).toUpperCase() + methodName.substring(1);
	        		MultiPk.class.getMethod("get" + methodName);
    				tempColumns.add(fields[i].getName());
    			} catch (NoSuchMethodException e) {
    				e.printStackTrace();
    			}
	        	
	        }
	        columns = tempColumns.toArray(new String[0]);
        }
		
		String servletPath = request.getServletPath();
		String reportType = null;
		if (servletPath.contains("/") && (servletPath.lastIndexOf("/") + 1 != servletPath.length())) {
			reportType = servletPath.substring(servletPath.lastIndexOf("/") + 1, servletPath.length());
		} else {
			reportType = servletPath.substring(0, servletPath.length());
		}
		
		if (reportType.equals("xlsReport")) {
			extension = ".xls";
			generateExcelReport(filteredData, columns, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("xlsxReport")) {
			extension = ".xlsx";
			generateExcelReport(filteredData, columns, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("pdfReport")) {
			extension = ".pdf";
			generatePDFReport(filteredData, columns, fileName, formatter, response);
		} else if (reportType.equals("odsReport")) {
			extension = ".ods";
			generateODSReport(filteredData, columns, fileName, sheetTitle, formatter, response);
		} else if (reportType.equals("csvReport")) {
			extension = ".csv";
			generateCSVReport(filteredData, columns, fileName, sheetTitle, formatter, language, response);
		}
	}

	/**
	 * Devuelve los datos recuperados de la DB.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 */
	public List<MultiPk> getDataForReports(MultiPk filterMultiPk, TableRequestDto tableRequestDto) {
		if (tableRequestDto.getMultiselection().getSelectedAll() && tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			if (filterMultiPk != null) {
				return this.multiPkDao.findAllLike(filterMultiPk, tableRequestDto, false);
			} else {
				return this.multiPkDao.findAll(new MultiPk(), null);
			}
		} else {
			return this.multiPkDao.getMultiple(filterMultiPk, tableRequestDto, false);
		}
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<MultiPk>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param extension String
	 * @param formatter SimpleDateFormat
	 * @param response HttpServletResponse
	 */
	private void generateExcelReport(List<MultiPk> filteredData, String[] columns, String fileName, String sheetTitle, String extension, SimpleDateFormat formatter, HttpServletResponse response) {
		try {
			// Creacion del Excel
			Workbook workbook = null;
			if (extension == ".xlsx"){
				workbook = new XSSFWorkbook();
				response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			} else {
				workbook = new HSSFWorkbook();
				response.setContentType("application/vnd.ms-excel");
			}
			
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + extension + "");
			
			// Creacion de una hoja y asignacion de su nombre
	        Sheet sheet = workbook.createSheet(sheetTitle);
	        
	        // Se crea una fuente para estilizar las cabeceras
	        Font headerFont = workbook.createFont();
	        headerFont.setBold(true);
	        headerFont.setFontHeightInPoints((short) 12);
	        
	        // Se crea un CellStyle con la fuente
	        CellStyle headerCellStyle = workbook.createCellStyle();
	        headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerCellStyle.setFont(headerFont);
	        
	        // Inicializar contador de filas
	        int rowNumber = 0;
	        
	        // Se crea la fila para insertar los titulos de las columnas
	        Row row = sheet.createRow(rowNumber++);
	        
	        // A�adir titulos
	        for(int i = 0; i < columns.length; i++) {
	        	Cell cell = row.createCell(i);
	            cell.setCellValue(columns[i]);
	            cell.setCellStyle(headerCellStyle);
	        }
	        
	        // CreationHelper ayudara a mantener la compatibilidad del DataFormat tanto si se crea un .xls como un .xlsx
	        CreationHelper createHelper = workbook.getCreationHelper();
	        
	        // Se crea un CellStyle para a�adir el formateador de fechas
	        CellStyle dateCellStyle = workbook.createCellStyle();
	        dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat(formatter.toPattern()));
	        
	        // A�adir datos
	        for (MultiPk rowMultiPk : filteredData) {
	        	int cellNumber = 0;
	        	row = sheet.createRow(rowNumber++);
	        	
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		column = column.substring(0, 1).toUpperCase() + column.substring(1);
	        		Cell cellUsuario = row.createCell(cellNumber++);
	        		cellUsuario.setCellValue(getCellValue(column, rowMultiPk, formatter));
	        	}
	        }
	        
	        // Se adapta el ancho de las columnas al contenido
	        for(int i = 0; i < columns.length; i++) {
	            sheet.autoSizeColumn(i);
	        }

			// Se a�ade el fichero excel al response
	        workbook.write(response.getOutputStream());
            workbook.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<MultiPk>
	 * @param columns String[]
	 * @param fileName String
	 * @param formatter SimpleDateFormat
	 * @param response HttpServletResponse
	 */
	private void generatePDFReport(List<MultiPk> filteredData, String[] columns, String fileName, SimpleDateFormat formatter, HttpServletResponse response) {
		try {
			// Se a�ade el fichero excel al response y se a�ade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".pdf");
			response.setContentType("application/pdf");
			
			Document document = new Document();
			// Se a�ade el fichero pdf al response
			PdfWriter.getInstance(document, response.getOutputStream());
			
			document.open();
			 
			PdfPTable table = new PdfPTable(columns.length);

			for (String column : columns) {
				PdfPCell header = new PdfPCell();
		        header.setBorderWidth(2);
		        header.setPhrase(new Phrase(column));
		        table.addCell(header);
        	}
			
			// A�adir datos
	        for (MultiPk rowMultiPk : filteredData) {
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		table.addCell(getCellValue(column, rowMultiPk, formatter));
	        	}
	        }
			
			document.add(table);
			document.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<MultiPk>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param formatter SimpleDateFormat
	 * @param response HttpServletResponse
	 */
	private void generateODSReport(List<MultiPk> filteredData, String[] columns, String fileName, String sheetTitle, SimpleDateFormat formatter, HttpServletResponse response) {
		try {
			// Se a�ade el fichero ods al response y se a�ade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".ods");
			response.setContentType("application/vnd.oasis.opendocument.spreadsheet");
			
			OdfSpreadsheetDocument ods = OdfSpreadsheetDocument.newSpreadsheetDocument();
			ods.getOrCreateDocumentStyles();
			
			// Hay que eliminar la hoja que se genera por defecto
	        ods.getTableByName("Sheet1").remove();
	        
	        // Hoja nueva
			OdfTable table = OdfTable.newTable(ods, filteredData.size() + 1, columns.length);
			table.setTableName(sheetTitle);
	        
			// Inicializar contador de filas
	        int rowNumber = 0;
			
	        // Cabeceras
			OdfTableRow row = table.getRowByIndex(rowNumber++);
	        for(int i = 0; i < columns.length; i++) {
	        	row.getCellByIndex(i).setStringValue(columns[i]);
	        }

			// A�adir datos
	        for (MultiPk rowMultiPk : filteredData) {
	        	row = table.getRowByIndex(rowNumber++);
				int cellNumber = 0;
				
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
        			row.getCellByIndex(cellNumber++).setStringValue(getCellValue(column, rowMultiPk, formatter));
	        	}
	        }
			
	        // Se a�ade el fichero ods al response
			ods.save(response.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<MultiPk>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param formatter SimpleDateFormat
	 * @param language String
	 * @param response HttpServletResponse
	 */
	private void generateCSVReport(List<MultiPk> filteredData, String[] columns, String fileName, String sheetTitle, SimpleDateFormat formatter, String language, HttpServletResponse response) {
		try {
		    // Se a�ade el fichero excel al response y se a�ade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".csv");
			response.setContentType("text/csv");
			
			// Separador de campos dependiendo del idioma
			String separator = ";";
			if (language.equals("en")) {
				separator = ",";
			}
			
			// Se a�ade el fichero csv al response
		    OutputStream out = response.getOutputStream();
		    // A�adir titulos
		    boolean addTitles = true;
			
			// A�adir datos
	        for (MultiPk rowMultiPk : filteredData) {
	        	int cellNumber = 1;
	        	StringBuilder columnsTitles = new StringBuilder();
	        	StringBuilder row = new StringBuilder();
	        	
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		String cellValue = getCellValue(column, rowMultiPk, formatter);
	        		
	        		if (cellNumber < columns.length) {
        				if (addTitles) {
        					columnsTitles.append("\"");
        					columnsTitles.append(column);
        					columnsTitles.append("\"");
        					columnsTitles.append(separator);
        				}
        				row.append("\"");
    					row.append(cellValue);
    					row.append("\"");
    					row.append(separator);
    					cellNumber++;
    				} else {
        				if (addTitles) {
        					columnsTitles.append("\"");
        					columnsTitles.append(column);
        					columnsTitles.append("\"\n");
        				}
        				row.append("\"");
    					row.append(cellValue);
    					row.append("\"\n");
    				}
	        	}
	        	
	        	if (addTitles) {
	        		out.write(columnsTitles.toString().getBytes());
					addTitles = false;
	        	}
	        	out.write(row.toString().getBytes());
	        }
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Mediante java reflection llama dinamicamente a los getters y asi alimenta las celdas
	 *
	 * @param column String
	 * @param rowMultiPk MultiPk
	 * @param formatter SimpleDateFormat
	 */
	private String getCellValue(String column, MultiPk rowMultiPk, SimpleDateFormat formatter) {
		column = column.substring(0, 1).toUpperCase() + column.substring(1);
		String cellValue = "";
		try {
			Method method = MultiPk.class.getMethod("get" + column);
			if (method.invoke(rowMultiPk) != null) {
				if (Date.class.equals(method.getReturnType())) {
					cellValue = new SimpleDateFormat(formatter.toPattern()).format((Date) method.invoke(rowMultiPk));
				} else if (Integer.class.equals(method.getReturnType())) {
					cellValue = Integer.toString((Integer) method.invoke(rowMultiPk));
				} else if (BigDecimal.class.equals(method.getReturnType())) {
					cellValue = method.invoke(rowMultiPk).toString();
				} else {
					cellValue = (String) method.invoke(rowMultiPk);
				}
			}
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
		
		return cellValue;
	}
}
