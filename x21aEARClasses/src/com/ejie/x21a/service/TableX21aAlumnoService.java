package com.ejie.x21a.service;


import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ejie.x21a.model.X21aAlumno;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * X21aAlumnoService generated by UDA, 15-nov-2018 9:05:36.
 * @author UDA
 */

public interface TableX21aAlumnoService {

	/**
	 * Inserts a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
    X21aAlumno add(X21aAlumno x21aAlumno);

	/**
	 * Updates a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
	X21aAlumno update(X21aAlumno x21aAlumno);

	/**
	 * Finds a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
	X21aAlumno find(X21aAlumno x21aAlumno);

	/**
	 * Deletes a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 */
	void remove(X21aAlumno x21aAlumno);

	/**
	 * Finds a list of rows in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @return List<X21aAlumno>
	 */
	List<X21aAlumno> findAll(X21aAlumno x21aAlumno, TableRequestDto tableRequestDto);

	/**
	 * Finds rows in the X21aAlumno table using like.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean	 
	 * @return List<X21aAlumno>
	 */
	List<X21aAlumno> findAllLike(X21aAlumno x21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith);

	/*
	 * OPERACIONES RUP_TABLE
	 */

	/**
	 * Removes rows from the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */	
	void removeMultiple(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith);
   
    
	/**
	 * Filter method in the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<X21aAlumno>
	 */	
	TableResponseDto<X21aAlumno> filter(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith);
    
    /**
	 * Searches rows in the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param searchX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List<TableRowDto<X21aAlumno>>
	 */	
    List<TableRowDto<X21aAlumno>> search(X21aAlumno filterX21aAlumno, X21aAlumno searchX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /**
	 * Reorder the selection made in X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return Object
	 */	
    Object reorderSelection(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
	 
	/**
	 * Finder method in the hierarchical the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 */	
	TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquia(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith);
	
	/**
	 * Finder method for siblings rows in the hierarchical the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 */	
	TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquiaChildren(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto);
    
    /**
	 * Devuelve los datos recuperados de la DB.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 */
	public List<X21aAlumno> getDataForReports(X21aAlumno filterUsuario, TableRequestDto tableRequestDto);
	
	/**
	 * Devuelve un fichero en el formato deseado que contiene los datos exportados de la tabla.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param locale Locale
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	public void generateReport(X21aAlumno filterUsuario, String[] columns, String fileName, String sheetTitle, ArrayList<?> reportsParams, TableRequestDto tableRequestDto, Locale locale, HttpServletRequest request, HttpServletResponse response);
}
