/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.JQGridLocalidadDao;
import com.ejie.x21a.model.Localidad;
import com.ejie.x38.dto.JQGridRequestDto;
import com.ejie.x38.dto.JQGridResponseDto;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.dto.TableRowDto;

/**
 * LocalidadServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "jqGridLocalidadService")
public class JQGridLocalidadServiceImpl implements JQGridLocalidadService {

	@Autowired
	private JQGridLocalidadDao localidadDao;

	/**
	 * Inserts a single row in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @return Localidad
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Localidad add(Localidad localidad) {
		return this.localidadDao.add(localidad);
	}

	/**
	 * Updates a single row in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @return Localidad
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Localidad update(Localidad localidad) {
		return this.localidadDao.update(localidad);
	 }

	/**
	 * Finds a single row in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @return Localidad
	 */
	public Localidad find(Localidad localidad) {
		return (Localidad) this.localidadDao.find(localidad);
	}

	/**
	 * Finds a List of rows in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Localidad> findAll(Localidad localidad, JQGridRequestDto jqGridRequestDto) {
		return (List<Localidad>) this.localidadDao.findAll(localidad, jqGridRequestDto);
	}
    
	/**
	 * Counts rows in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @return Long
	 */
	public Long findAllCount(Localidad localidad) {        
		return  this.localidadDao.findAllCount(localidad);
	}

	/**
	 * Finds rows in the Localidad table using like.
	 *
	 * @param localidad Localidad
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Localidad> findAllLike(Localidad localidad, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		return (List<Localidad>) this.localidadDao.findAllLike(localidad, jqGridRequestDto, startsWith);
	}

	/**
	 * Counts rows in the Localidad table using like.
	 *
	 * @param localidad Localidad
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Localidad localidad, Boolean startsWith) {
		return this.localidadDao.findAllLikeCount(localidad, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Localidad table.
	 *
	 * @param localidad Localidad
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Localidad localidad) {
		this.localidadDao.remove(localidad);
	}
	
	/**
	 * Deletes multiple rows in the Localidad table.
	 *
	 * @param localidadList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Localidad> localidadList) {
		for (Localidad  localidadAux:localidadList) {
			this.localidadDao.remove(localidadAux);
		}
	}
	

	@Override
	public Object reorderSelection(Localidad localidad, JQGridRequestDto jqGridRequestDto,
			Boolean startsWith) {
		return this.localidadDao.reorderSelection(localidad, jqGridRequestDto, startsWith);
	}

	@Override
	public List<TableRowDto<Localidad>> search(Localidad filterParams, Localidad searchParams, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		return this.localidadDao.search(filterParams, searchParams, jqGridRequestDto, startsWith);
	}

	public JQGridResponseDto<Localidad> filter(Localidad localidad, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		List<Localidad> localidads =  this.localidadDao.findAllLike(localidad, jqGridRequestDto, false);
		Long recordNum =  this.localidadDao.findAllLikeCount(localidad != null ? localidad: new Localidad (),false);
		if (jqGridRequestDto.getMultiselection().getSelectedIds()!=null){
			List<TableRowDto<Localidad>> reorderSelection = this.localidadDao.reorderSelection(localidad, jqGridRequestDto, startsWith);
			return new JQGridResponseDto<Localidad>(jqGridRequestDto, recordNum, localidads, reorderSelection);
		}
		return new JQGridResponseDto<Localidad>(jqGridRequestDto, recordNum, localidads);  
	}
	
}

