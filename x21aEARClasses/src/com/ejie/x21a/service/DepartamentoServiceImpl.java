/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import com.ejie.x21a.dao.DepartamentoDao;
import com.ejie.x38.dto.Pagination;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Departamento;

/**
 * DepartamentoServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "departamentoService")
public class DepartamentoServiceImpl implements DepartamentoService {

	@Autowired
	private DepartamentoDao departamentoDao;

	/**
	 * Inserts a single row in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @return Departamento
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Departamento add(Departamento departamento) {
		return this.departamentoDao.add(departamento);
	}

	/**
	 * Updates a single row in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @return Departamento
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Departamento update(Departamento departamento) {
		return this.departamentoDao.update(departamento);
	 }

	/**
	 * Finds a single row in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @return Departamento
	 */
	public Departamento find(Departamento departamento) {
		return (Departamento) this.departamentoDao.find(departamento);
	}

	/**
	 * Finds a List of rows in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Departamento> findAll(Departamento departamento, Pagination pagination) {
		return (List<Departamento>) this.departamentoDao.findAll(departamento, pagination);
	}
    
	/**
	 * Counts rows in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @return Long
	 */
	public Long findAllCount(Departamento departamento) {        
		return  this.departamentoDao.findAllCount(departamento);
	}

	/**
	 * Finds rows in the Departamento table using like.
	 *
	 * @param departamento Departamento
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Departamento> findAllLike(Departamento departamento, Pagination pagination, Boolean startsWith) {
		return (List<Departamento>) this.departamentoDao.findAllLike(departamento, pagination, startsWith);
	}

	/**
	 * Counts rows in the Departamento table using like.
	 *
	 * @param departamento Departamento
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Departamento departamento, Boolean startsWith) {
		return this.departamentoDao.findAllLikeCount(departamento, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Departamento table.
	 *
	 * @param departamento Departamento
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Departamento departamento) {
		this.departamentoDao.remove(departamento);
	}
	
	/**
	 * Deletes multiple rows in the Departamento table.
	 *
	 * @param departamentoList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Departamento> departamentoList) {
		for (Departamento  departamentoAux:departamentoList) {
			this.departamentoDao.remove(departamentoAux);
		}
	}
	
}

