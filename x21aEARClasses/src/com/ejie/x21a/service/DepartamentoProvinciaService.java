/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;


import com.ejie.x38.dto.Pagination;
import java.util.List;

import com.ejie.x21a.model.DepartamentoProvincia;

/**
 * DepartamentoProvinciaService generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

public interface DepartamentoProvinciaService {

	/**
	 * Inserts a single row in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @return DepartamentoProvincia
	 */
    DepartamentoProvincia add(DepartamentoProvincia departamentoProvincia);

	/**
	 * Updates a single row in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @return DepartamentoProvincia
	 */
	DepartamentoProvincia update(DepartamentoProvincia departamentoProvincia);

	/**
	 * Finds a single row in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @return DepartamentoProvincia
	 */
	DepartamentoProvincia find(DepartamentoProvincia departamentoProvincia);

	/**
	 * Finds a List of rows in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @param pagination Pagination
	 * @return List
	 */
	List<DepartamentoProvincia> findAll(DepartamentoProvincia departamentoProvincia, Pagination pagination);

	/**
	 * Counts rows in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @return Long
	 */
	Long findAllCount(DepartamentoProvincia departamentoProvincia);
	
	/**
	 * Finds rows in the DepartamentoProvincia table using like.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @param pagination Pagination
     * @param startsWith Boolean	 
	 * @return List
	 */
	List<DepartamentoProvincia> findAllLike(DepartamentoProvincia departamentoProvincia, Pagination pagination, Boolean startsWith) ;

	/**
	 * Counts rows in the DepartamentoProvincia table using like.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
     * @param startsWith Boolean	 
	 * @return Long
	 */
	Long findAllLikeCount(DepartamentoProvincia departamentoProvincia, Boolean startsWith) ;
  
	/**
	 * Deletes a single row in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvincia DepartamentoProvincia
	 * @return 
	 */
	void remove(DepartamentoProvincia departamentoProvincia);
	
	/**
	 * Deletes multiple rows in the DepartamentoProvincia table.
	 *
	 * @param departamentoProvinciaList List
	 * @return 
	 */	
	void removeMultiple(List<DepartamentoProvincia> departamentoProvinciaList);
    
}


