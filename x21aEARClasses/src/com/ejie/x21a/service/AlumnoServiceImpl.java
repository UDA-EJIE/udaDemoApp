package com.ejie.x21a.service;
import com.ejie.x21a.dao.AlumnoDao;
import com.ejie.x38.dto.Pagination;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Alumno;
/**
 * AlumnoServiceImpl generated by UDA 1.0, 08-sep-2011 13:10:35.
* @author UDA
*/
@Service(value = "alumnoService")
public  class AlumnoServiceImpl implements AlumnoService {
    /**
    * Final static logger.
    */
    private static final  Logger  logger = Logger.getLogger(AlumnoServiceImpl.class);
@Autowired
    private AlumnoDao alumnoDao;

   /**
    * Inserts a single row in the Alumno table.
    *
    * @param alumno Alumno
    * @return Alumno
    */
	@Transactional(rollbackFor = Throwable.class)
    public Alumno add(Alumno alumno) {
      return this.alumnoDao.add(alumno);
    }

    /**
    * Updates a single row in the Alumno table.
    *
    * @param alumno Alumno
    * @return Alumno
    */
	@Transactional(rollbackFor = Throwable.class)
    public Alumno update(Alumno alumno) {
      return this.alumnoDao.update(alumno);
    }

    /**
    * Finds a single row in the Alumno table.
    *
    * @param alumno Alumno
    * @return Alumno
    */
    public Alumno find(Alumno alumno) {
        return (Alumno) this.alumnoDao.find(alumno);
    }

    /**
     * Finds a List of rows in the Alumno table.
     *
     * @param alumno Alumno
     * @param pagination Pagination
     * @return List
     */
    public List<Alumno> findAll(Alumno alumno, Pagination pagination) {
       return (List<Alumno>) this.alumnoDao.findAll(alumno, pagination);
    }
    /**
    * Counts rows in the Alumno table.
    *
    * @param alumno Alumno
    * @return Long
    */
    public Long findAllCount(Alumno alumno) {        
        return  this.alumnoDao.findAllCount(alumno);
    }

	 /**
     * Finds rows in the Alumno table using like.
     *
     * @param alumno Alumno
     * @param pagination Pagination
     * @return List
     */
    public List<Alumno> findAllLike(Alumno alumno, Pagination pagination, Boolean startsWith) {
       return (List<Alumno>) this.alumnoDao.findAllLike(alumno, pagination, startsWith);
    }
    /**
     * Deletes a single row in the Alumno table.
     *
     * @param alumno Alumno
     */
	@Transactional(rollbackFor = Throwable.class)
    public void remove(Alumno alumno) {
        this.alumnoDao.remove(alumno);
    }
	
    /**
     * Deletes multiple rows in the Alumno table.
     *
     * @param alumnoList ArrayList
     */
	@Transactional(rollbackFor = Throwable.class)
    public void removeMultiple(ArrayList<Alumno> alumnoList) {
		for (Alumno  alumnoAux:alumnoList) {
            this.alumnoDao.remove(alumnoAux);
		}        
    }	

    /**
     *
     * @return AlumnoDao
     */
    public AlumnoDao getAlumnoDao() {
      return this.alumnoDao;
    }
    /**
     *
     * @param  alumnoDao AlumnoDao
     */
    public void setAlumnoDao(AlumnoDao alumnoDao) {
        logger.log(Level.INFO, "Setting Dependency "+alumnoDao);
        this.alumnoDao = alumnoDao;
    }
}

