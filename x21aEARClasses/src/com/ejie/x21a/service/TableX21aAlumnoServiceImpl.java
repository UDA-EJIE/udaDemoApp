package com.ejie.x21a.service;
import com.ejie.x21a.dao.TableX21aAlumnoDao;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.X21aAlumno;

/**
 * X21aAlumnoServiceImpl generated by UDA, 15-nov-2018 9:05:36.
 * @author UDA
 */

@Service(value = "x21aAlumnoService")
public class TableX21aAlumnoServiceImpl implements TableX21aAlumnoService {

	@Autowired
	private TableX21aAlumnoDao x21aAlumnoDao;

	/**
	 * Inserts a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public X21aAlumno add(X21aAlumno x21aAlumno) {
		return this.x21aAlumnoDao.add(x21aAlumno);
	}

	/**
	 * Updates a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public X21aAlumno update(X21aAlumno x21aAlumno) {
		return this.x21aAlumnoDao.update(x21aAlumno);
	 }

	/**
	 * Finds a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @return X21aAlumno
	 */
	public X21aAlumno find(X21aAlumno x21aAlumno) {
		return (X21aAlumno) this.x21aAlumnoDao.find(x21aAlumno);
	}
	
	/**
	 * Deletes a single row in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(X21aAlumno x21aAlumno) {
		this.x21aAlumnoDao.remove(x21aAlumno);
	}

	/**
	 * Finds a list of rows in the X21aAlumno table.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @return List<X21aAlumno>
	 */
	public List<X21aAlumno> findAll(X21aAlumno x21aAlumno, TableRequestDto tableRequestDto){
		return (List<X21aAlumno>) this.x21aAlumnoDao.findAll(x21aAlumno, tableRequestDto);
	}
    
	/**
	 * Finds rows in the X21aAlumno table using like.
	 *
	 * @param x21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean	 
	 * @return List<X21aAlumno>
	 */
	public List<X21aAlumno> findAllLike(X21aAlumno x21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith){
		return (List<X21aAlumno>) this.x21aAlumnoDao.findAllLike(x21aAlumno, tableRequestDto, startsWith);
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Removes rows from the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */	
	public void removeMultiple(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith){
		this.x21aAlumnoDao.removeMultiple(filterX21aAlumno, tableRequestDto, startsWith);
	}
        
	/**
	 * Filter method in the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<X21aAlumno>
	 */	
	public TableResponseDto< X21aAlumno> filter(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith){
		List<X21aAlumno> listaX21aAlumno =  this.x21aAlumnoDao.findAllLike(filterX21aAlumno, tableRequestDto, false);
		Long recordNum =  this.x21aAlumnoDao.findAllLikeCount(filterX21aAlumno != null ? filterX21aAlumno: new X21aAlumno (),false);
		
		TableResponseDto<X21aAlumno> usuarioDto = new TableResponseDto<X21aAlumno>(tableRequestDto, recordNum, listaX21aAlumno);
		
		if (tableRequestDto.getMultiselection().getSelectedIds()!=null){
			List< TableRowDto< X21aAlumno>> reorderSelection = this.x21aAlumnoDao.reorderSelection(filterX21aAlumno, tableRequestDto, startsWith);
			usuarioDto.setReorderedSelection(reorderSelection);
			usuarioDto.addAdditionalParam("reorderedSelection", reorderSelection);
			usuarioDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds()!=null){
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List< TableRowDto< X21aAlumno>> reorderSeeker = this.x21aAlumnoDao.reorderSelection(filterX21aAlumno, tableRequestDto, startsWith);
			usuarioDto.setReorderedSeeker(reorderSeeker);
			usuarioDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return usuarioDto;   
	}
    /**
	 * Searches rows in the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param searchX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List<TableRowDto<X21aAlumno>>
	 */	
    public List< TableRowDto< X21aAlumno>> search(X21aAlumno filterX21aAlumno, X21aAlumno searchX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.x21aAlumnoDao.search(filterX21aAlumno, searchX21aAlumno, tableRequestDto, startsWith);
	}
    
    /**
	 * Reorder the selection made in X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return Object
	 */	
    public Object reorderSelection(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.x21aAlumnoDao.reorderSelection(filterX21aAlumno, tableRequestDto, startsWith);
	}
    
    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
	 
	/**
	 * Finder method in the hierarchical the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 */	
	public TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquia(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto, Boolean startsWith){
		List<JerarquiaDto<X21aAlumno>> listaX21aAlumno =  this.x21aAlumnoDao.findAllLikeJerarquia(filterX21aAlumno, tableRequestDto);
		Long recordNum = this.x21aAlumnoDao.findAllLikeCountJerarquia(filterX21aAlumno, tableRequestDto);
		return new TableResponseDto<JerarquiaDto<X21aAlumno>>(tableRequestDto, recordNum, listaX21aAlumno);
	}
	
	/**
	 * Finder method for siblings rows in the hierarchical the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @return TableResponseDto<JerarquiaDto<X21aAlumno>>
	 */	
	public TableResponseDto<JerarquiaDto<X21aAlumno>> jerarquiaChildren(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto){
		TableResponseDto<JerarquiaDto<X21aAlumno>> tableResponseDto = new TableResponseDto<JerarquiaDto<X21aAlumno>>();
		tableResponseDto.addAdditionalParam(TableResponseDto.CHILDREN, this.x21aAlumnoDao.findAllChild(filterX21aAlumno, tableRequestDto));
		return tableResponseDto;
	}
	
	/**
    * Exporta Datos al clipBoard
    *
    */
    public List<X21aAlumno> getMultiple(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith){
		return this.x21aAlumnoDao.getMultiple(filterX21aAlumno, tableRequestDto, startsWith);
	}
      
	
	
}

