package com.ejie.x21a.service;
import com.ejie.x21a.dao.MultiPkDao;
import com.ejie.x38.dto.Pagination;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.MultiPk;

/**
 * MultiPkServiceImpl generated by UDA, 06-sep-2012 8:37:04.
 * @author UDA
 */

@Service(value = "multiPkService")
public class MultiPkServiceImpl implements MultiPkService {

	@Autowired
	private MultiPkDao multiPkDao;

	/**
	 * Inserts a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk add(MultiPk multiPk) {
		return this.multiPkDao.add(multiPk);
	}

	/**
	 * Updates a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk update(MultiPk multiPk) {
		return this.multiPkDao.update(multiPk);
	 }

	/**
	 * Finds a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	public MultiPk find(MultiPk multiPk) {
		return (MultiPk) this.multiPkDao.find(multiPk);
	}

	/**
	 * Finds a List of rows in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @param pagination Pagination
	 * @return List
	 */
	public List<MultiPk> findAll(MultiPk multiPk, Pagination pagination) {
		return (List<MultiPk>) this.multiPkDao.findAll(multiPk, pagination);
	}
    
	/**
	 * Counts rows in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return Long
	 */
	public Long findAllCount(MultiPk multiPk) {        
		return  this.multiPkDao.findAllCount(multiPk);
	}

	/**
	 * Finds rows in the MultiPk table using like.
	 *
	 * @param multiPk MultiPk
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<MultiPk> findAllLike(MultiPk multiPk, Pagination pagination, Boolean startsWith) {
		return (List<MultiPk>) this.multiPkDao.findAllLike(multiPk, pagination, startsWith);
	}

	/**
	 * Counts rows in the MultiPk table using like.
	 *
	 * @param multiPk MultiPk
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(MultiPk multiPk, Boolean startsWith) {
		return this.multiPkDao.findAllLikeCount(multiPk, startsWith);
	}
	    
	/**
	 * Deletes a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(MultiPk multiPk) {
		this.multiPkDao.remove(multiPk);
	}
	
	/**
	 * Deletes multiple rows in the MultiPk table.
	 *
	 * @param multiPkList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<MultiPk> multiPkList) {
		for (MultiPk  multiPkAux:multiPkList) {
			this.multiPkDao.remove(multiPkAux);
		}
	}
	
}

