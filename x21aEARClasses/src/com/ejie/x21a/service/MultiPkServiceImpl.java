package com.ejie.x21a.service;

import com.ejie.x21a.dao.MultiPkDao;
import com.ejie.x21a.model.MultiPk;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
;

/**
 * MultiPkServiceImpl generated by UDA, 28-may-2018 16:28:34.
 * @author UDA
 */

@Service(value = "multiPkService")
public class MultiPkServiceImpl implements MultiPkService {

	@Autowired
	private MultiPkDao multiPkDao;

	/**
	 * Inserts a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk add(MultiPk multiPk) {
		return this.multiPkDao.add(multiPk);
	}

	/**
	 * Updates a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public MultiPk update(MultiPk multiPk) {
		return this.multiPkDao.update(multiPk);
	 }

	/**
	 * Finds a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	public MultiPk find(MultiPk multiPk) {
		return (MultiPk) this.multiPkDao.find(multiPk);
	}
	
	/**
	 * Deletes a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(MultiPk multiPk) {
		this.multiPkDao.remove(multiPk);
	}

	/**
	 * Finds a list of rows in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return List<MultiPk>
	 */
	public List<MultiPk> findAll(MultiPk multiPk, TableRequestDto tableRequestDto){
		return (List<MultiPk>) this.multiPkDao.findAll(multiPk, tableRequestDto);
	}
    
	/**
	 * Finds rows in the MultiPk table using like.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean	 
	 * @return List<MultiPk>
	 */
	public List<MultiPk> findAllLike(MultiPk multiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return (List<MultiPk>) this.multiPkDao.findAllLike(multiPk, tableRequestDto, startsWith);
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */
	 
	/**
	 * Removes rows from the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */	
	public void removeMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith){
		this.multiPkDao.removeMultiple(filterMultiPk, tableRequestDto, startsWith);
	}
        
	/**
	 * Filter method in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<MultiPk>
	 */	
	public TableResponseDto< MultiPk> filter(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith){
		List<MultiPk> listaMultiPk =  this.multiPkDao.findAllLike(filterMultiPk, tableRequestDto, false);
		Long recordNum =  this.multiPkDao.findAllLikeCount(filterMultiPk != null ? filterMultiPk: new MultiPk (),false);
		
		TableResponseDto<MultiPk> usuarioDto = new TableResponseDto<MultiPk>(tableRequestDto, recordNum, listaMultiPk);
		
		if (tableRequestDto.getMultiselection().getSelectedIds()!=null){
			List< TableRowDto< MultiPk>> reorderSelection = this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
			usuarioDto.setReorderedSelection(reorderSelection);
			usuarioDto.addAdditionalParam("reorderedSelection", reorderSelection);
			usuarioDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds()!=null){
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List< TableRowDto< MultiPk>> reorderSeeker = this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
			usuarioDto.setReorderedSeeker(reorderSeeker);
			usuarioDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return usuarioDto;   
	}
    /**
	 * Searches rows in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param searchMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List<TableRowDto<MultiPk>>
	 */	
    public List< TableRowDto< MultiPk>> search(MultiPk filterMultiPk, MultiPk searchMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.multiPkDao.search(filterMultiPk, searchMultiPk, tableRequestDto, startsWith);
	}
    
    /**
	 * Reorder the selection made in MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return Object
	 */	
    public Object reorderSelection(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		return this.multiPkDao.reorderSelection(filterMultiPk, tableRequestDto, startsWith);
	}
    
    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
	 
	/**
	 * Finder method in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	public TableResponseDto<JerarquiaDto<MultiPk>> jerarquia(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith){
		List<JerarquiaDto<MultiPk>> listaMultiPk =  this.multiPkDao.findAllLikeJerarquia(filterMultiPk, tableRequestDto);
		Long recordNum = this.multiPkDao.findAllLikeCountJerarquia(filterMultiPk, tableRequestDto);
		return new TableResponseDto<JerarquiaDto<MultiPk>>(tableRequestDto, recordNum, listaMultiPk);
	}
	
	/**
	 * Finder method for siblings rows in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	public TableResponseDto<JerarquiaDto<MultiPk>> jerarquiaChildren(MultiPk filterMultiPk, TableRequestDto tableRequestDto){
		TableResponseDto<JerarquiaDto<MultiPk>> tableResponseDto = new TableResponseDto<JerarquiaDto<MultiPk>>();
		tableResponseDto.addAdditionalParam(TableResponseDto.CHILDREN, this.multiPkDao.findAllChild(filterMultiPk, tableRequestDto));
		return tableResponseDto;
	}
	
	/**
    * Exporta Datos al clipBoard
    *
    */
    public List<MultiPk> getMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith){
		return this.multiPkDao.getMultiple(filterMultiPk, tableRequestDto, startsWith);
	}
      
	
	
}

