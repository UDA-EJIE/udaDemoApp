package com.ejie.x21a.service;
import java.util.List;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.UsuarioJerarquiaDao;
import com.ejie.x21a.model.UsuarioJerarquia;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.Pagination;

/**
 * UsuarioJerarquiaServiceImpl generated by UDA, 03-oct-2012 10:36:40.
 * @author UDA
 */

@Service(value = "usuarioJerarquiaService")
public class UsuarioJerarquiaServiceImpl implements UsuarioJerarquiaService {

	@Autowired
	private UsuarioJerarquiaDao usuarioJerarquiaDao;

	/**
	 * Inserts a single row in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @return UsuarioJerarquia
	 */
	@Transactional(rollbackFor = Throwable.class)
	public UsuarioJerarquia add(UsuarioJerarquia usuarioJerarquia) {
		return this.usuarioJerarquiaDao.add(usuarioJerarquia);
	}

	/**
	 * Updates a single row in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @return UsuarioJerarquia
	 */
	@Transactional(rollbackFor = Throwable.class)
	public UsuarioJerarquia update(UsuarioJerarquia usuarioJerarquia) {
		return this.usuarioJerarquiaDao.update(usuarioJerarquia);
	 }

	/**
	 * Finds a single row in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @return UsuarioJerarquia
	 */
	public UsuarioJerarquia find(UsuarioJerarquia usuarioJerarquia) {
		return (UsuarioJerarquia) this.usuarioJerarquiaDao.find(usuarioJerarquia);
	}

	/**
	 * Finds a List of rows in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @return List
	 */
	public List<UsuarioJerarquia> findAll(UsuarioJerarquia usuarioJerarquia, Pagination pagination) {
		return (List<UsuarioJerarquia>) this.usuarioJerarquiaDao.findAll(usuarioJerarquia, pagination);
	}
    
	/**
	 * Counts rows in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @return Long
	 */
	public Long findAllCount(UsuarioJerarquia usuarioJerarquia) {        
		return  this.usuarioJerarquiaDao.findAllCount(usuarioJerarquia);
	}

	/**
	 * Finds rows in the UsuarioJerarquia table using like.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<UsuarioJerarquia> findAllLike(UsuarioJerarquia usuarioJerarquia, Pagination pagination, Boolean startsWith) {
		return (List<UsuarioJerarquia>) this.usuarioJerarquiaDao.findAllLike(usuarioJerarquia, pagination, startsWith);
	}

	/**
	 * Counts rows in the UsuarioJerarquia table using like.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(UsuarioJerarquia usuarioJerarquia, Boolean startsWith) {
		return this.usuarioJerarquiaDao.findAllLikeCount(usuarioJerarquia, startsWith);
	}
	    
	/**
	 * Deletes a single row in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(UsuarioJerarquia usuarioJerarquia) {
		this.usuarioJerarquiaDao.remove(usuarioJerarquia);
	}
	
	/**
	 * Deletes multiple rows in the UsuarioJerarquia table.
	 *
	 * @param usuarioJerarquiaList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<UsuarioJerarquia> usuarioJerarquiaList) {
		for (UsuarioJerarquia  usuarioJerarquiaAux:usuarioJerarquiaList) {
			this.usuarioJerarquiaDao.remove(usuarioJerarquiaAux);
		}
	}
	
	

	/*************
	 * JERARQUIA *
	 *************/
	
	/**
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @param pagination pagination
	 * @return UsuarioJerarquia
	 * @throws Exception
	 */
	public List<JerarquiaDto<UsuarioJerarquia>> findAllLikeJerarquia(UsuarioJerarquia usuarioJerarquia, Pagination pagination){
		return (List<JerarquiaDto<UsuarioJerarquia>>) this.usuarioJerarquiaDao.findAllLikeJerarquia(usuarioJerarquia, pagination);
	}

	/**
	 * @param usuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @return Long
	 */
	public Long findAllLikeCountJerarquia(UsuarioJerarquia usuarioJerarquia, Pagination pagination) {
		return this.usuarioJerarquiaDao.findAllLikeCountJerarquia(usuarioJerarquia, pagination);
	}
	
	public TreeMap<String, TreeMap<String, String>> findAllLikeSelected(UsuarioJerarquia usuarioJerarquia, Pagination pagination) {
		return this.usuarioJerarquiaDao.findAllLikeSelected(usuarioJerarquia, pagination);
	}
}

