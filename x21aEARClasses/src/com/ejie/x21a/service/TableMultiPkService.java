package com.ejie.x21a.service;


import com.ejie.x21a.model.MultiPk;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResponseDto;
import com.ejie.x38.dto.TableRowDto;
import java.util.List;


/**
 * MultiPkService generated by UDA, 28-may-2018 16:28:34.
 * @author UDA
 */

public interface TableMultiPkService {

	/**
	 * Inserts a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
    MultiPk add(MultiPk multiPk);

	/**
	 * Updates a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	MultiPk update(MultiPk multiPk);

	/**
	 * Finds a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @return MultiPk
	 */
	MultiPk find(MultiPk multiPk);

	/**
	 * Deletes a single row in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 */
	void remove(MultiPk multiPk);

	/**
	 * Finds a list of rows in the MultiPk table.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return List<MultiPk>
	 */
	List<MultiPk> findAll(MultiPk multiPk, TableRequestDto tableRequestDto);

	/**
	 * Finds rows in the MultiPk table using like.
	 *
	 * @param multiPk MultiPk
	 * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean	 
	 * @return List<MultiPk>
	 */
	List<MultiPk> findAllLike(MultiPk multiPk, TableRequestDto tableRequestDto, Boolean startsWith);

	/*
	 * OPERACIONES RUP_TABLE
	 */

	/**
	 * Removes rows from the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 */	
	void removeMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith);
   
    
	/**
	 * Filter method in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<MultiPk>
	 */	
	TableResponseDto<MultiPk> filter(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith);
    
    /**
	 * Searches rows in the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param searchMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List<TableRowDto<MultiPk>>
	 */	
    List<TableRowDto<MultiPk>> search(MultiPk filterMultiPk, MultiPk searchMultiPk, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /**
	 * Reorder the selection made in MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return Object
	 */	
    Object reorderSelection(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith);
    
    /*
	 * OPERACIONES RUP_TABLE JERARQUIA
	 */
	 
	/**
	 * Finder method in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	TableResponseDto<JerarquiaDto<MultiPk>> jerarquia(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith);
	
	/**
	 * Finder method for siblings rows in the hierarchical the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @return TableResponseDto<JerarquiaDto<MultiPk>>
	 */	
	TableResponseDto<JerarquiaDto<MultiPk>> jerarquiaChildren(MultiPk filterMultiPk, TableRequestDto tableRequestDto);
    
    /**
    * Exporta Datos al clipBoard
    *
    */
    List<MultiPk> getMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith);
    
}


