/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import com.ejie.x21a.dao.ComarcaDao;
import com.ejie.x38.dto.Pagination;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Comarca;

/**
 * ComarcaServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "comarcaService")
public class ComarcaServiceImpl implements ComarcaService {

	@Autowired
	private ComarcaDao comarcaDao;

	/**
	 * Inserts a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Comarca
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Comarca add(Comarca comarca) {
		return this.comarcaDao.add(comarca);
	}

	/**
	 * Updates a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Comarca
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Comarca update(Comarca comarca) {
		return this.comarcaDao.update(comarca);
	 }

	/**
	 * Finds a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Comarca
	 */
	public Comarca find(Comarca comarca) {
		return (Comarca) this.comarcaDao.find(comarca);
	}

	/**
	 * Finds a List of rows in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Comarca> findAll(Comarca comarca, Pagination pagination) {
		return (List<Comarca>) this.comarcaDao.findAll(comarca, pagination);
	}
    
	/**
	 * Counts rows in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return Long
	 */
	public Long findAllCount(Comarca comarca) {        
		return  this.comarcaDao.findAllCount(comarca);
	}

	/**
	 * Finds rows in the Comarca table using like.
	 *
	 * @param comarca Comarca
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Comarca> findAllLike(Comarca comarca, Pagination pagination, Boolean startsWith) {
		return (List<Comarca>) this.comarcaDao.findAllLike(comarca, pagination, startsWith);
	}

	/**
	 * Counts rows in the Comarca table using like.
	 *
	 * @param comarca Comarca
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Comarca comarca, Boolean startsWith) {
		return this.comarcaDao.findAllLikeCount(comarca, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Comarca table.
	 *
	 * @param comarca Comarca
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Comarca comarca) {
		this.comarcaDao.remove(comarca);
	}
	
	/**
	 * Deletes multiple rows in the Comarca table.
	 *
	 * @param comarcaList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Comarca> comarcaList) {
		for (Comarca  comarcaAux:comarcaList) {
			this.comarcaDao.remove(comarcaAux);
		}
	}
	
}

