package com.ejie.x21a.service;
import com.ejie.x21a.dao.ComarcaDao;
import com.ejie.x38.dto.Pagination;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Comarca;
/**
 * ComarcaServiceImpl generated by UDA 1.0, 29-jul-2011 9:08:11.
* @author UDA
*/
@Service(value = "comarcaService")
public  class ComarcaServiceImpl implements ComarcaService {
    /**
    * Final static logger.
    */
    private static final  Logger  logger = LoggerFactory.getLogger(ComarcaServiceImpl.class);
@Autowired
    private ComarcaDao comarcaDao;

   /**
    * Inserts a single row in the Comarca table.
    *
    * @param comarca Comarca
    * @return Comarca
    */
	@Transactional(rollbackFor = Throwable.class)
    public Comarca add(Comarca comarca) {
      return this.comarcaDao.add(comarca);
    }

    /**
    * Updates a single row in the Comarca table.
    *
    * @param comarca Comarca
    * @return Comarca
    */
	@Transactional(rollbackFor = Throwable.class)
    public Comarca update(Comarca comarca) {
      return this.comarcaDao.update(comarca);
    }

    /**
    * Finds a single row in the Comarca table.
    *
    * @param comarca Comarca
    * @return Comarca
    */
    public Comarca find(Comarca comarca) {
        return (Comarca) this.comarcaDao.find(comarca);
    }

    /**
     * Finds a List of rows in the Comarca table.
     *
     * @param comarca Comarca
     * @param pagination Pagination
     * @return List
     */
    public List<Comarca> findAll(Comarca comarca, Pagination pagination) {
       return (List<Comarca>) this.comarcaDao.findAll(comarca, pagination);
    }
    /**
    * Counts rows in the Comarca table.
    *
    * @param comarca Comarca
    * @return Long
    */
    public Long findAllCount(Comarca comarca) {        
        return  this.comarcaDao.findAllCount(comarca);
    }

	 /**
     * Finds rows in the Comarca table using like.
     *
     * @param comarca Comarca
     * @param pagination Pagination
     * @return List
     */
    public List<Comarca> findAllLike(Comarca comarca, Pagination pagination, Boolean startsWith) {
       return (List<Comarca>) this.comarcaDao.findAllLike(comarca, pagination, startsWith);
    }
    /**
     * Deletes a single row in the Comarca table.
     *
     * @param comarca Comarca
     */
	@Transactional(rollbackFor = Throwable.class)
    public void remove(Comarca comarca) {
        this.comarcaDao.remove(comarca);
    }
	
    /**
     * Deletes multiple rows in the Comarca table.
     *
     * @param comarcaList ArrayList
     */
	@Transactional(rollbackFor = Throwable.class)
    public void removeMultiple(ArrayList<Comarca> comarcaList) {
		for (Comarca  comarcaAux:comarcaList) {
            this.comarcaDao.remove(comarcaAux);
		}        
    }	

    /**
     *
     * @return ComarcaDao
     */
    public ComarcaDao getComarcaDao() {
      return this.comarcaDao;
    }
    /**
     *
     * @param  comarcaDao ComarcaDao
     */
    public void setComarcaDao(ComarcaDao comarcaDao) {
        logger.info( "Setting Dependency "+comarcaDao);
        this.comarcaDao = comarcaDao;
    }
}

