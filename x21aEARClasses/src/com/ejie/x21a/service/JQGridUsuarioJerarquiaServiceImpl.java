/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.JQGridUsuarioJerarquiaDao;
import com.ejie.x21a.model.Usuario;
import com.ejie.x38.dto.JQGridRequestDto;
import com.ejie.x38.dto.JQGridResponseDto;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * UsuarioServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "jqGridUsuarioServiceJerarquia")
public class JQGridUsuarioJerarquiaServiceImpl implements JQGridUsuarioJerarquiaService {

	@Autowired
	private JQGridUsuarioJerarquiaDao jqGridUsuarioJerarquiaDao;

	/**
	 * Inserts a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Usuario add(Usuario usuario) {
		return this.jqGridUsuarioJerarquiaDao.add(usuario);
	}

	/**
	 * Updates a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Usuario update(Usuario usuario) {
		return this.jqGridUsuarioJerarquiaDao.update(usuario);
	 }

	/**
	 * Finds a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	public Usuario find(Usuario usuario) {
		return (Usuario) this.jqGridUsuarioJerarquiaDao.find(usuario);
	}

	/**
	 * Finds a List of rows in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Usuario> findAll(Usuario usuario, JQGridRequestDto jqGridRequestDto) {
		return (List<Usuario>) this.jqGridUsuarioJerarquiaDao.findAll(usuario, jqGridRequestDto);
	}
    
	/**
	 * Counts rows in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Long
	 */
	public Long findAllCount(Usuario usuario) {        
		return  this.jqGridUsuarioJerarquiaDao.findAllCount(usuario);
	}

	/**
	 * Finds rows in the Usuario table using like.
	 *
	 * @param usuario Usuario
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Usuario> findAllLike(Usuario usuario, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		return (List<Usuario>) this.jqGridUsuarioJerarquiaDao.findAllLike(usuario, jqGridRequestDto, startsWith);
	}

	/**
	 * Counts rows in the Usuario table using like.
	 *
	 * @param usuario Usuario
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Usuario usuario, Boolean startsWith) {
		return this.jqGridUsuarioJerarquiaDao.findAllLikeCount(usuario, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Usuario usuario) {
		this.jqGridUsuarioJerarquiaDao.remove(usuario);
	}
	
	/**
	 * Deletes multiple rows in the Usuario table.
	 *
	 * @param usuarioList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Usuario> usuarioList) {
		for (Usuario  usuarioAux:usuarioList) {
			this.jqGridUsuarioJerarquiaDao.remove(usuarioAux);
		}
	}

	@Override
	public Object reorderSelection(Usuario usuario, JQGridRequestDto jqGridRequestDto,
			Boolean startsWith) {
		return this.jqGridUsuarioJerarquiaDao.reorderSelection(usuario, jqGridRequestDto, startsWith);
	}

	@Override
	public List<TableRowDto<Usuario>> search(Usuario filterParams, Usuario searchParams, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		return this.jqGridUsuarioJerarquiaDao.search(filterParams, searchParams, jqGridRequestDto, startsWith);
	}

	public JQGridResponseDto<Usuario> filter(Usuario usuario, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		List<Usuario> usuarios =  this.jqGridUsuarioJerarquiaDao.findAllLike(usuario, jqGridRequestDto, false);
		Long recordNum =  this.jqGridUsuarioJerarquiaDao.findAllLikeCount(usuario != null ? usuario: new Usuario (),false);
		if (jqGridRequestDto.getMultiselection().getSelectedIds()!=null){
			List<TableRowDto<Usuario>> reorderSelection = this.jqGridUsuarioJerarquiaDao.reorderSelection(usuario, jqGridRequestDto, startsWith);
			return new JQGridResponseDto<Usuario>(jqGridRequestDto, recordNum, usuarios, reorderSelection);
		}
		return new JQGridResponseDto<Usuario>(jqGridRequestDto, recordNum, usuarios);  
	}
	
	public JQGridResponseDto<JerarquiaDto<Usuario>> jerarquia (Usuario filterUsuario, JQGridRequestDto jqGridRequestDto, Boolean startsWith) {
		List<JerarquiaDto<Usuario>> usuarios =  this.jqGridUsuarioJerarquiaDao.findAllLikeJerarquia(filterUsuario, jqGridRequestDto);
		Long recordNum = this.jqGridUsuarioJerarquiaDao.findAllLikeCountJerarquia(filterUsuario, jqGridRequestDto);
		return new JQGridResponseDto<JerarquiaDto<Usuario>>(jqGridRequestDto, recordNum, usuarios);
	}
	
	public JQGridResponseDto<JerarquiaDto<Usuario>> jerarquiaChildren (Usuario filterUsuario, JQGridRequestDto jqGridRequestDto){
		JQGridResponseDto<JerarquiaDto<Usuario>> jqGridResponseDto = new JQGridResponseDto<JerarquiaDto<Usuario>>();
		jqGridResponseDto.addAdditionalParam(JQGridResponseDto.CHILDREN, this.jqGridUsuarioJerarquiaDao.findAllChild(filterUsuario, jqGridRequestDto));
		return jqGridResponseDto;
	}

}

