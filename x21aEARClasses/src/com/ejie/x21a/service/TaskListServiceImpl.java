/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.TaskDao;
import com.ejie.x21a.dao.TaskListDao;
import com.ejie.x21a.model.Task;
import com.ejie.x21a.model.TaskList;
import com.ejie.x38.dto.Pagination;

/**
 * ListServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "taskListService")
public class TaskListServiceImpl implements TaskListService {

	@Autowired
	private TaskListDao taskListDao;
	@Autowired
	private TaskDao taskDao;

	/**
	 * Inserts a single row in the List table.
	 *
	 * @param task List
	 * @return List
	 */
	@Transactional(rollbackFor = Throwable.class)
	public TaskList add(TaskList task) {
		return this.taskListDao.add(task);
	}

	/**
	 * Updates a single row in the List table.
	 *
	 * @param List List
	 * @return List
	 */
	@Transactional(rollbackFor = Throwable.class)
	public TaskList update(TaskList List) {
		return this.taskListDao.update(List);
	 }

	
		
	@Override
	public TaskList delete(TaskList taskList) {
		return this.taskListDao.delete(taskList);
	}

	/**
	 * Finds a single row in the List table.
	 *
	 * @param List List
	 * @return List
	 */
	public TaskList find(TaskList List) {
		return (TaskList) this.taskListDao.find(List);
	}

	/**
	 * Finds a List of rows in the List table.
	 *
	 * @param List List
	 * @param pagination Pagination
	 * @return List
	 */
	public List<TaskList> findAll(TaskList List, Pagination pagination) {
		List<TaskList> list = (List<TaskList>) this.taskListDao.findAll(List, pagination);
		
		for (TaskList taskList : list) {
			Task task = new Task();
			task.setList(taskList);
			taskList.setTaskNum(taskDao.count(task, pagination));
			
		}
		
		return list;
	}
   
}

