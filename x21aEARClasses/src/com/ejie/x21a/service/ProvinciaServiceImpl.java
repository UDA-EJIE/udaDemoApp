/*
* Copyright 2020 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.odftoolkit.odfdom.doc.OdfSpreadsheetDocument;
import org.odftoolkit.odfdom.doc.table.OdfTable;
import org.odftoolkit.odfdom.doc.table.OdfTableRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.ProvinciaDao;
import com.ejie.x21a.model.Provincia;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableResourceResponseDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.util.DateTimeManager;
import com.lowagie.text.Document;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;

/**
 * ProvinciaServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "provinciaService")
public class ProvinciaServiceImpl implements ProvinciaService {

	@Autowired
	private ProvinciaDao provinciaDao;

	/**
	 * Inserts a single row in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @return Provincia
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Provincia add(Provincia provincia) {
		return this.provinciaDao.add(provincia);
	}

	/**
	 * Updates a single row in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @return Provincia
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Provincia update(Provincia provincia) {
		return this.provinciaDao.update(provincia);
	 }

	/**
	 * Finds a single row in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @return Provincia
	 */
	public Provincia find(Provincia provincia) {
		return (Provincia) this.provinciaDao.find(provincia);
	}

	/**
	 * Finds a List of rows in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @param tableRequestDto TableRequestDto
	 * @return List
	 */
	public List<Provincia> findAll(Provincia provincia, TableRequestDto tableRequestDto) {
		return (List<Provincia>) this.provinciaDao.findAll(provincia, tableRequestDto);
	}
    
	/**
	 * Counts rows in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @return Long
	 */
	public Long findAllCount(Provincia provincia) {        
		return this.provinciaDao.findAllCount(provincia);
	}

	/**
	 * Finds rows in the Provincia table using like.
	 *
	 * @param provincia Provincia
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Provincia> findAllLike(Provincia provincia, TableRequestDto tableRequestDto, Boolean startsWith) {
		return (List<Provincia>) this.provinciaDao.findAllLike(provincia, tableRequestDto, startsWith);
	}

	/**
	 * Counts rows in the Provincia table using like.
	 *
	 * @param provincia Provincia
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Provincia provincia, Boolean startsWith) {
		return this.provinciaDao.findAllLikeCount(provincia, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Provincia table.
	 *
	 * @param provincia Provincia
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Provincia provincia) {
		this.provinciaDao.remove(provincia);
	}
	
	/**
	 * Deletes multiple rows in the Provincia table.
	 *
	 * @param provinciaList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Provincia> provinciaList) {
		for (Provincia  provinciaAux:provinciaList) {
			this.provinciaDao.remove(provinciaAux);
		}
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */
	
	/**
	 * Deletes multiple rows in the Provincia table.
	 *
	 * @param filterProvincia Provincia
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(Provincia filterProvincia, TableRequestDto tableRequestDto, Boolean startsWith) {
		this.provinciaDao.removeMultiple(filterProvincia, tableRequestDto, startsWith);
	}
	
	@Transactional(rollbackFor = Throwable.class)
	public List<Provincia> getMultiple(Provincia filterProvincia, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.provinciaDao.getMultiple(filterProvincia, tableRequestDto, startsWith);
	}

	@Override
	public Object reorderSelection(Provincia provincia, TableRequestDto tableRequestDto,
			Boolean startsWith) {
		return this.provinciaDao.reorderSelection(provincia, tableRequestDto, startsWith);
	}

	@Override
	public List<TableRowDto<Provincia>> search(Provincia filterParams, Provincia searchParams, TableRequestDto tableRequestDto, Boolean startsWith) {
		return this.provinciaDao.search(filterParams, searchParams, tableRequestDto, startsWith);
	}

	@Override
	public TableResourceResponseDto<Provincia> filter(Provincia filterProvincia, TableRequestDto tableRequestDto, Boolean startsWith) {
		List<Provincia> listaProvincia = this.provinciaDao.findAllLike(filterProvincia, tableRequestDto, false);
		Long recordNum = this.provinciaDao.findAllLikeCount(filterProvincia != null ? filterProvincia : new Provincia(), false);
		TableResourceResponseDto<Provincia> provinciaDto = new TableResourceResponseDto<Provincia>(tableRequestDto, recordNum, listaProvincia);
		if (tableRequestDto.getMultiselection().getSelectedIds() != null && !tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			List<TableRowDto<Provincia>> reorderSelection = this.provinciaDao.reorderSelection(filterProvincia, tableRequestDto, startsWith);
			provinciaDto.setReorderedSelection(reorderSelection);
			provinciaDto.addAdditionalParam("reorderedSelection", reorderSelection);
			provinciaDto.addAdditionalParam("selectedAll", tableRequestDto.getMultiselection().getSelectedAll());
		}
		if (tableRequestDto.getSeeker().getSelectedIds() != null) {
			tableRequestDto.setMultiselection(tableRequestDto.getSeeker());
			List<TableRowDto<Provincia>> reorderSeeker = this.provinciaDao.reorderSelection(filterProvincia, tableRequestDto, startsWith);
			provinciaDto.setReorderedSeeker(reorderSeeker);
			provinciaDto.addAdditionalParam("reorderedSeeker", reorderSeeker);
		}
		return provinciaDto; 
	}
	
	/*
	 * EXPORTACIONES DE DATOS
	 */
	
	/**
	 * Devuelve un fichero en el formato deseado que contiene los datos exportados de la tabla.
	 *
	 * @param filterProvincia Provincia
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param reportsParams ArrayList<?>
	 * @param tableRequestDto TableRequestDto
	 * @param request HttpServletRequest
	 * @param response HttpServletResponse
	 */
	public void generateReport(Provincia filterProvincia, String[] columns, String fileName, String sheetTitle, ArrayList<?> reportsParams, TableRequestDto tableRequestDto, Locale locale, HttpServletRequest request, HttpServletResponse response) {
		// Accede a la DB para recuperar datos
		List<Provincia> filteredData = getDataForReports(filterProvincia, tableRequestDto);
		String extension = null;
		
		// Obtener idioma
		String language = locale.getLanguage();
		
		// Comprobar si las siguientes variables estan vacias, en caso de estarlo se las asigna un valor generico
		fileName = (fileName != null && !fileName.isEmpty()) ? fileName : "report";
		sheetTitle = (sheetTitle != null && !sheetTitle.isEmpty()) ? sheetTitle : Provincia.class.getSimpleName();
		
		// Obtener el formato de fecha especifico del locale
        SimpleDateFormat formatter = DateTimeManager.getDateTimeFormat(locale);
		
		// Cuando no se definen columnas porque se quieren obtener todas
        if (columns == null) {
        	Field[] fields = Provincia.class.getDeclaredFields();
        	ArrayList<String> tempColumns = new ArrayList<String>();
	        
	        for(int i = 0; i < fields.length; i++) {
	        	try {
	        		String methodName = fields[i].getName();
	        		methodName = methodName.substring(0, 1).toUpperCase() + methodName.substring(1);
    				Provincia.class.getMethod("get" + methodName);
    				tempColumns.add(fields[i].getName());
    			} catch (NoSuchMethodException e) {
    				e.printStackTrace();
    			}
	        	
	        }
	        columns = tempColumns.toArray(new String[0]);
        }
		
		String servletPath = request.getServletPath();
		String reportType = null;
		if (servletPath.contains("/") && (servletPath.lastIndexOf("/") + 1 != servletPath.length())) {
			reportType = servletPath.substring(servletPath.lastIndexOf("/") + 1, servletPath.length());
		} else {
			reportType = servletPath.substring(0, servletPath.length());
		}
		
		if (reportType.equals("xlsReport")) {
			extension = ".xls";
			generateExcelReport(filteredData, columns, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("xlsxReport")) {
			extension = ".xlsx";
			generateExcelReport(filteredData, columns, fileName, sheetTitle, extension, formatter, response);
		} else if (reportType.equals("pdfReport")) {
			extension = ".pdf";
			generatePDFReport(filteredData, columns, fileName, response);
		} else if (reportType.equals("odsReport")) {
			extension = ".ods";
			generateODSReport(filteredData, columns, fileName, sheetTitle, response);
		} else if (reportType.equals("csvReport")) {
			extension = ".csv";
			generateCSVReport(filteredData, columns, fileName, sheetTitle, language, response);
		}
	}

	/**
	 * Devuelve los datos recuperados de la DB.
	 *
	 * @param filterProvincia Provincia
	 * @param tableRequestDto TableRequestDto
	 */
	public List<Provincia> getDataForReports(Provincia filterProvincia, TableRequestDto tableRequestDto) {
		if (tableRequestDto.getMultiselection().getSelectedAll() && tableRequestDto.getMultiselection().getSelectedIds().isEmpty()) {
			if (filterProvincia != null) {
				return this.provinciaDao.findAllLike(filterProvincia, tableRequestDto, false);
			} else {
				return this.provinciaDao.findAll(new Provincia(), null);
			}
		} else {
			return this.provinciaDao.getMultiple(filterProvincia, tableRequestDto, false);
		}
	}
	
	/**
	 * Devuelve un fichero excel que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<Provincia>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param extension String
	 * @param formatter SimpleDateFormat
	 * @param response HttpServletResponse
	 */
	private void generateExcelReport(List<Provincia> filteredData, String[] columns, String fileName, String sheetTitle, String extension, SimpleDateFormat formatter, HttpServletResponse response) {
		try {
			// Creacion del Excel
			Workbook workbook = null;
			if (extension == ".xlsx"){
				workbook = new XSSFWorkbook();
				response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			} else {
				workbook = new HSSFWorkbook();
				response.setContentType("application/vnd.ms-excel");
			}
			
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + extension + "");
			
			// Creacion de una hoja y asignacion de su nombre
	        Sheet sheet = workbook.createSheet(sheetTitle);
	        
	        // Se crea una fuente para estilizar las cabeceras
	        Font headerFont = workbook.createFont();
	        headerFont.setBold(true);
	        headerFont.setFontHeightInPoints((short) 12);
	        
	        // Se crea un CellStyle con la fuente
	        CellStyle headerCellStyle = workbook.createCellStyle();
	        headerCellStyle.setAlignment(HorizontalAlignment.CENTER);
	        headerCellStyle.setFont(headerFont);
	        
	        // Inicializar contador de filas
	        int rowNumber = 0;
	        
	        // Se crea la fila para insertar los titulos de las columnas
	        Row row = sheet.createRow(rowNumber++);
	        
	        // Añadir titulos
	        for(int i = 0; i < columns.length; i++) {
	        	Cell cell = row.createCell(i);
	            cell.setCellValue(columns[i]);
	            cell.setCellStyle(headerCellStyle);
	        }
	        
	        // CreationHelper ayudara a mantener la compatibilidad del DataFormat tanto si se crea un .xls como un .xlsx
	        CreationHelper createHelper = workbook.getCreationHelper();
	        
	        // Se crea un CellStyle para añadir el formateador de fechas
	        CellStyle dateCellStyle = workbook.createCellStyle();
	        dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat(formatter.toPattern()));
	        
	        // Añadir datos
	        for (Provincia rowProvincia : filteredData) {
	        	int cellNumber = 0;
	        	row = sheet.createRow(rowNumber++);
	        	
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		Cell cellProvincia = row.createCell(cellNumber++);
	        		cellProvincia.setCellValue(getCellValue(column, rowProvincia));
	        	}
	        }
	        
	        // Se adapta el ancho de las columnas al contenido
	        for(int i = 0; i < columns.length; i++) {
	            sheet.autoSizeColumn(i);
	        }

			// Se añade el fichero excel al response
	        workbook.write(response.getOutputStream());
            workbook.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero pdf que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<Provincia>
	 * @param columns String[]
	 * @param fileName String
	 * @param response HttpServletResponse
	 */
	private void generatePDFReport(List<Provincia> filteredData, String[] columns, String fileName, HttpServletResponse response) {
		try {
			// Se añade el fichero excel al response y se añade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".pdf");
			response.setContentType("application/pdf");
			
			Document document = new Document();
			// Se añade el fichero pdf al response
			PdfWriter.getInstance(document, response.getOutputStream());
			
			document.open();
			 
			PdfPTable table = new PdfPTable(columns.length);

			for (String column : columns) {
				PdfPCell header = new PdfPCell();
		        header.setBorderWidth(2);
		        header.setPhrase(new Phrase(column));
		        table.addCell(header);
        	}
			
			// Añadir datos
	        for (Provincia rowProvincia : filteredData) {
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		table.addCell(getCellValue(column, rowProvincia));
	        	}
	        }
			
			document.add(table);
			document.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero ods que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<Provincia>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param response HttpServletResponse
	 */
	private void generateODSReport(List<Provincia> filteredData, String[] columns, String fileName, String sheetTitle, HttpServletResponse response) {
		try {
			// Se añade el fichero ods al response y se añade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".ods");
			response.setContentType("application/vnd.oasis.opendocument.spreadsheet");
			
			OdfSpreadsheetDocument ods = OdfSpreadsheetDocument.newSpreadsheetDocument();
			ods.getOrCreateDocumentStyles();
			
			// Hay que eliminar la hoja que se genera por defecto
	        ods.getTableByName("Sheet1").remove();
	        
	        // Hoja nueva
			OdfTable table = OdfTable.newTable(ods, filteredData.size() + 1, columns.length);
			table.setTableName(sheetTitle);
	        
			// Inicializar contador de filas
	        int rowNumber = 0;
			
	        // Cabeceras
			OdfTableRow row = table.getRowByIndex(rowNumber++);
	        for(int i = 0; i < columns.length; i++) {
	        	row.getCellByIndex(i).setStringValue(columns[i]);
	        }

			// Añadir datos
	        for (Provincia rowProvincia : filteredData) {
	        	row = table.getRowByIndex(rowNumber++);
				int cellNumber = 0;
				
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
        			row.getCellByIndex(cellNumber++).setStringValue(getCellValue(column, rowProvincia));
	        	}
	        }
			
	        // Se añade el fichero ods al response
			ods.save(response.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Devuelve un fichero csv que contiene los datos exportados de la tabla.
	 *
	 * @param filteredData List<Provincia>
	 * @param columns String[]
	 * @param fileName String
	 * @param sheetTitle String
	 * @param language String
	 * @param response HttpServletResponse
	 */
	private void generateCSVReport(List<Provincia> filteredData, String[] columns, String fileName, String sheetTitle, String language, HttpServletResponse response) {
		try {
		    // Se añade el fichero excel al response y se añade el contenido
	        response.setHeader("Content-Disposition", "attachment; filename=" + fileName + ".csv");
			response.setContentType("text/csv");
			
			// Separador de campos dependiendo del idioma
			String separator = ";";
			if (language.equals("en")) {
				separator = ",";
			}
			
			// Se añade el fichero csv al response
		    OutputStream out = response.getOutputStream();
		    // Añadir titulos
		    boolean addTitles = true;
			
			// Añadir datos
	        for (Provincia rowProvincia : filteredData) {
	        	int cellNumber = 1;
	        	StringBuilder columnsTitles = new StringBuilder();
	        	StringBuilder row = new StringBuilder();
	        	
	        	// Se iteran las columnas y se insertan los datos respetando el orden que tenian las columnas en la tabla
	        	for (String column : columns) {
	        		String cellValue = getCellValue(column, rowProvincia);
	        		
	        		if (cellNumber < columns.length) {
        				if (addTitles) {
        					columnsTitles.append("\"");
        					columnsTitles.append(column);
        					columnsTitles.append("\"");
        					columnsTitles.append(separator);
        				}
        				row.append("\"");
    					row.append(cellValue);
    					row.append("\"");
    					row.append(separator);
    					cellNumber++;
    				} else {
        				if (addTitles) {
        					columnsTitles.append("\"");
        					columnsTitles.append(column);
        					columnsTitles.append("\"\n");
        				}
        				row.append("\"");
    					row.append(cellValue);
    					row.append("\"\n");
    				}
	        	}
	        	
	        	if (addTitles) {
	        		out.write(columnsTitles.toString().getBytes());
					addTitles = false;
	        	}
	        	out.write(row.toString().getBytes());
	        }
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Obtiene los valores de las celdas.
	 *
	 * @param column String
	 * @param rowProvincia Provincia
	 */
	private String getCellValue(String column, Provincia rowProvincia) {
		String cellValue = "";
		try {
			cellValue = BeanUtils.getProperty(rowProvincia, column) != null ? BeanUtils.getProperty(rowProvincia, column) : "";
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		}
		
		return cellValue;
	}
}
