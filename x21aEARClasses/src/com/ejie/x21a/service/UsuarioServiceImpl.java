/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.dao.UsuarioDao;
import com.ejie.x21a.model.Usuario;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.dto.TableDto;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * UsuarioServiceImpl generated by UDA, 14-ago-2012 12:59:39.
 * @author UDA
 */

@Service(value = "usuarioService")
public class UsuarioServiceImpl implements UsuarioService {

	@Autowired
	private UsuarioDao usuarioDao;

	/**
	 * Inserts a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Usuario add(Usuario usuario) {
		return this.usuarioDao.add(usuario);
	}

	/**
	 * Updates a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	@Transactional(rollbackFor = Throwable.class)
	public Usuario update(Usuario usuario) {
		return this.usuarioDao.update(usuario);
	 }

	/**
	 * Finds a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Usuario
	 */
	public Usuario find(Usuario usuario) {
		return (Usuario) this.usuarioDao.find(usuario);
	}

	/**
	 * Finds a List of rows in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @param pagination Pagination
	 * @return List
	 */
	public List<Usuario> findAll(Usuario usuario, Pagination pagination) {
		return (List<Usuario>) this.usuarioDao.findAll(usuario, pagination);
	}
    
	/**
	 * Counts rows in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return Long
	 */
	public Long findAllCount(Usuario usuario) {        
		return  this.usuarioDao.findAllCount(usuario);
	}

	/**
	 * Finds rows in the Usuario table using like.
	 *
	 * @param usuario Usuario
	 * @param pagination Pagination
	 * @param startsWith Boolean
	 * @return List
	 */
	public List<Usuario> findAllLike(Usuario usuario, Pagination pagination, Boolean startsWith) {
		return (List<Usuario>) this.usuarioDao.findAllLike(usuario, pagination, startsWith);
	}

	/**
	 * Counts rows in the Usuario table using like.
	 *
	 * @param usuario Usuario
	 * @param startsWith Boolean
	 * @return Long
	 */
	public Long findAllLikeCount(Usuario usuario, Boolean startsWith) {
		return this.usuarioDao.findAllLikeCount(usuario, startsWith);
	}
	    
	/**
	 * Deletes a single row in the Usuario table.
	 *
	 * @param usuario Usuario
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void remove(Usuario usuario) {
		this.usuarioDao.remove(usuario);
	}
	
	/**
	 * Deletes multiple rows in the Usuario table.
	 *
	 * @param usuarioList List
	 * @return
	 */
	@Transactional(rollbackFor = Throwable.class)
	public void removeMultiple(List<Usuario> usuarioList) {
		for (Usuario  usuarioAux:usuarioList) {
			this.usuarioDao.remove(usuarioAux);
		}
	}

	@Override
	public Object reorderSelection(Usuario usuario, Pagination pagination,
			Boolean startsWith) {
		return this.usuarioDao.reorderSelection(usuario, pagination, startsWith);
	}

	@Override
	public List<TableRowDto<Usuario>> search(Usuario filterParams, Usuario searchParams, Pagination pagination, Boolean startsWith) {
		// TODO Auto-generated method stub
		return this.usuarioDao.search(filterParams, searchParams, pagination, startsWith);
	}

	public TableDto<Usuario> filter(Usuario usuario, Pagination<Usuario> pagination, Boolean startsWith) {
		List<Usuario> usuarios =  this.usuarioDao.findAllLike(usuario, pagination, false);
		Long recordNum =  this.usuarioDao.findAllLikeCount(usuario != null ? usuario: new Usuario (),false);
		if (pagination.getMultiselection().getSelectedIds()!=null){
			List<TableRowDto<Usuario>> reorderSelection = this.usuarioDao.reorderSelection(usuario, pagination, startsWith);
			return new TableDto<Usuario>(pagination, recordNum, usuarios, reorderSelection);
		}
		 
		return new TableDto<Usuario>(pagination, recordNum, usuarios);  
	}
	
	@Override
	public List<JerarquiaDto<Usuario>> findAllLikeJerarquia(
			Usuario filterUsuario, Pagination pagination) {
		return this.usuarioDao.findAllLikeJerarquia(filterUsuario, pagination);
	}
	@Override
	public Long findAllLikeCountJerarquia(Usuario filterUsuario,
			Pagination pagination) {
		return this.usuarioDao.findAllLikeCountJerarquia(filterUsuario, pagination);
	}

	@Override
	public List<TableRowDto<Usuario>> findAllChild(Usuario filterUsuario,Pagination pagination) {
		return this.usuarioDao.findAllChild(filterUsuario, pagination);
	}
	
    public List<Usuario> getMultiple(Usuario filterUsuario, TableRequestDto tableRequestDto,  Boolean startsWith){
		return this.usuarioDao.getMultiple(filterUsuario, tableRequestDto, startsWith);
	}
}

