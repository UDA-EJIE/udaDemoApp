/*
* Copyright 2020 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, VersiÃ³n 1.1 exclusivamente (la Â«LicenciaÂ»);
* Solo podrÃ¡ usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislaciÃ³n aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye Â«TAL CUALÂ»,
* SIN GARANTÃ?AS NI CONDICIONES DE NINGÃšN TIPO, ni expresas ni implÃ­citas.
* VÃ©ase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import java.util.List;

import com.ejie.x21a.model.ComarcaExtendida;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * ComarcaExtendidaDao generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */

public interface ComarcaExtendidaDao {
    
    /**
     * Inserts a single row in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @return ComarcaExtendida
     */
    ComarcaExtendida add(ComarcaExtendida comarca);

    /**
     * Updates a single row in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @return ComarcaExtendida
     */
    ComarcaExtendida update(ComarcaExtendida comarca);

    /**
     * Finds a single row in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @return ComarcaExtendida
     */
    ComarcaExtendida find(ComarcaExtendida comarca);

    /**
     * Deletes a single row in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @return 
     */
    void remove(ComarcaExtendida comarca);

    /**
     * Finds a List of rows in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @param pagination Pagination
     * @return List
     */
    List<ComarcaExtendida> findAll(ComarcaExtendida comarca, TableRequestDto tableRequestDto);

    /**
     * Counts rows in the ComarcaExtendida table.
     *
     * @param comarca ComarcaExtendida
     * @return Long
     */
    Long findAllCount(ComarcaExtendida comarca);
	
	/**
     * Finds rows in the ComarcaExtendida table using like.
     *
     * @param comarca ComarcaExtendida
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List
     */
    List<ComarcaExtendida> findAllLike(ComarcaExtendida comarca, TableRequestDto tableRequestDto, Boolean startsWith);
	
    /**
     * Counts rows in the ComarcaExtendida table using like.
     *
     * @param comarca ComarcaExtendida
     * @param startsWith Boolean
     * @return Long
     */
    Long findAllLikeCount(ComarcaExtendida comarca, Boolean startsWith);

    /*
	 * OPERACIONES RUP_TABLE
	 */

	void removeMultiple(TableRequestDto tableRequestDto);
	
	List<ComarcaExtendida> getMultiple(ComarcaExtendida filterComarcaExtendida, TableRequestDto tableRequestDto, Boolean startsWith);
    
    List<TableRowDto<ComarcaExtendida>> reorderSelection(ComarcaExtendida comarca, TableRequestDto tableRequestDto, Boolean startsWith);
    
    List<TableRowDto<ComarcaExtendida>> search(ComarcaExtendida filterParams, ComarcaExtendida searchParams, TableRequestDto tableRequestDto, Boolean startsWith);
}
