/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.TaskList;
import com.ejie.x38.dto.Pagination;

/**
 * TaskListDaoImpl generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */
 
@Repository
@Transactional
public class TaskListDaoImpl implements TaskListDao {
    private JdbcTemplate jdbcTemplate;
	private RowMapper<TaskList> rwMap = new RowMapper<TaskList>() {
		public TaskList mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new TaskList(
               resultSet.getInt("ID"), resultSet.getString("NAME"), resultSet.getString("DESCRIPTION"), 
               resultSet.getString("USER_ID")!=null?resultSet.getString("USER_ID"):""
           ); } } ;

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the TaskList table.
     *
     * @param taskList Pagination
     * @return TaskList
     */
	public TaskList add(TaskList taskList) {
		
		String pkQuery = "SELECT MAX(ID)+1 FROM TASK_LIST";
		Integer newPk = this.jdbcTemplate.queryForObject(pkQuery, Integer.class);
		
		
    	String query = "INSERT INTO TASK_LIST (ID, NAME, DESCRIPTION, USER_ID) VALUES (?,?,?,?)";
		this.jdbcTemplate.update(query, newPk, taskList.getName(), taskList.getDescription(), taskList.getUserId());
		return taskList;
	}

    /**
     * Updates a single row in the TaskList table.
     *
     * @param taskList Pagination
     * @return TaskList
     */
    public TaskList update(TaskList taskList) {
		String query = "UPDATE TASK_LIST SET NAME=?, DESCRIPTION=?, USER_ID=? WHERE ID=?";
		this.jdbcTemplate.update(query, taskList.getName(), taskList.getDescription(), taskList.getUserId(), taskList.getId());
		return taskList;
	}

    
    
    @Override
	public TaskList delete(TaskList taskList) {
    	String query = "DELETE FROM TASK_LIST WHERE ID=?";
		this.jdbcTemplate.update(query, taskList.getId());
		return taskList;
	}

	/**
     * Finds a single row in the TaskList table.
     *
     * @param taskList Pagination
     * @return TaskList
     */
    @Transactional (readOnly = true)
    public TaskList find(TaskList taskList) {
		String query = "SELECT t1.ID ID, t1.NAME NAME, t1.DESCRIPTION DESCRIPTION, t1.USER_ID USER_ID FROM TASK_LIST t1  WHERE t1.ID = ?";
		
		List<TaskList> TaskListTaskList = this.jdbcTemplate.query(query, this.rwMap, taskList.getId());
		return (TaskList) DataAccessUtils.uniqueResult(TaskListTaskList);
    }

    /**
     * Removes a single row in the TaskList table.
     *
     * @param taskList Pagination
     * @return
     */
    public void remove(TaskList taskList) {
		String query = "DELETE FROM TASK_LIST WHERE ID=?";
		this.jdbcTemplate.update(query, taskList.getId());
    }
    
   /**
    * Finds a TaskList of rows in the TaskList table.
    * 
    * @param taskList TaskList
    * @param pagination Pagination
    * @return TaskList 
    */
	@Transactional (readOnly = true)
    public List<TaskList> findAll(TaskList taskList, Pagination pagination) {
		StringBuilder query = new StringBuilder("SELECT t1.ID ID, t1.NAME NAME, t1.DESCRIPTION DESCRIPTION, t1.USER_ID USER_ID FROM TASK_LIST t1"); 

		
		return (List<TaskList>) this.jdbcTemplate.query(query.toString(), this.rwMap);
	}
		/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;}

