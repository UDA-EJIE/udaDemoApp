/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Task;
import com.ejie.x21a.model.TaskList;
import com.ejie.x38.dto.Pagination;

/**
 * TaskListDaoImpl generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */
 
@Repository
@Transactional
public class TaskDaoImpl implements TaskDao {
    private JdbcTemplate jdbcTemplate;
	private RowMapper<Task> rwMap = new RowMapper<Task>() {
		public Task mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			
			TaskList taskList = new TaskList(resultSet.getInt("LIST_ID"));
			Task task = new Task(resultSet.getInt("ID"));
			
			task.setName(resultSet.getString("NAME"));
			task.setDetail(resultSet.getString("DETAIL"));
			task.setDone(resultSet.getBoolean("DONE"));
//			if (new Integer(1).equals(resultSet.getBoolean("DONE"))){
//				task.setDone(Boolean.TRUE);
//			}else{
//				task.setDone(Boolean.FALSE);
//			}
           return task;
		}
	};

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the TaskList table.
     *
     * @param TaskList Pagination
     * @return TaskList
     */
	public Task add(Task task) {
		
		String pkQuery = "SELECT MAX(ID)+1 FROM TASK";
		Integer newPk = this.jdbcTemplate.queryForObject(pkQuery, Integer.class);
		
    	String query = "INSERT INTO TASK (ID, LIST_ID, NAME, DETAIL, DONE) VALUES (?,?,?,?,?)";
		this.jdbcTemplate.update(query, newPk, task.getIdList(), task.getName(), task.getDetail(), Boolean.TRUE.equals(task.getDone())?new Integer(1):new Integer(0));
		return task;
	}

    /**
     * Updates a single row in the TaskList table.
     *
     * @param TaskList Pagination
     * @return TaskList
     */
    public Task update(Task task) {
		String query = "UPDATE TASK SET ID=?, LIST_ID=?, NAME=?, DETAIL=?, DONE=?";
		this.jdbcTemplate.update(query, task.getId(), task.getList().getId(), task.getName(), task.getDetail(), Boolean.TRUE.equals(task.getDone())?new Integer(1):new Integer(0));
		return task;
	}

    /**
     * Finds a single row in the TaskList table.
     *
     * @param TaskList Pagination
     * @return TaskList
     */
    @Transactional (readOnly = true)
    public Task find(Task task) {
		String query = "SELECT t1.ID ID, t1.LIST_ID LIST_ID, t1.NAME NAME, t1.DETAIL DETAIL, t1.DONE DONE FROM TASK t1  WHERE t1.ID = ?";
		
		List<Task> TaskListTaskList = this.jdbcTemplate.query(query, this.rwMap, task.getId());
		return (Task) DataAccessUtils.uniqueResult(TaskListTaskList);
    }

    /**
     * Removes a single row in the TaskList table.
     *
     * @param TaskList Pagination
     * @return
     */
    public void remove(Task task) {
		String query = "DELETE FROM TASK WHERE ID=?";
		this.jdbcTemplate.update(query, task.getId());
    }
    
    
    
   @Override
	public void done(Task task) {
	   String query = "UPDATE TASK SET DONE=? WHERE ID = ?";
		this.jdbcTemplate.update(query, Boolean.TRUE.equals(task.getDone())?new Integer(1):new Integer(0), task.getId());
		
		
	}

/**
    * Finds a TaskList of rows in the TaskList table.
    * 
    * @param TaskList TaskList
    * @param pagination Pagination
    * @return TaskList 
    */
	@Transactional (readOnly = true)
    public List<Task> findAll(Task task, Pagination pagination) {
		StringBuilder query = new StringBuilder("SELECT t1.ID ID, t1.LIST_ID LIST_ID, t1.NAME NAME, t1.DETAIL DETAIL, t1.DONE DONE FROM TASK t1"); 
		List <Object> params = new ArrayList<Object>();
		
		if (task.getList().getId() != null){
			query.append(" WHERE LIST_ID = ? ");
			params.add(task.getList().getId());
			
		}
		
		return (List<Task>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}
	
	@Transactional (readOnly = true)
    public Integer count(Task task, Pagination pagination) {
		StringBuilder query = new StringBuilder("SELECT count(1) AS TASK_NUM FROM TASK t1"); 
		List <Object> params = new ArrayList<Object>();
		
		if (task.getList().getId() != null){
			query.append(" WHERE LIST_ID = ? ");
			params.add(task.getList().getId());
			
		}
		
		return this.jdbcTemplate.queryForObject(query.toString(), Integer.class, params.toArray());
	}
		/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;
	 
}


