package com.ejie.x21a.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Provincia;
import com.ejie.x21a.model.X21aAlumno;
import com.ejie.x38.dao.RowNumResultSetExtractor;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableManagerJerarquia;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;

/**
 * X21aAlumnoDaoImpl generated by UDA, 15-nov-2018 9:05:36.
 * @author UDA
 */

@Repository
@Transactional
public class TableX21aAlumnoDaoImpl implements TableX21aAlumnoDao {


    public static final String[] ORDER_BY_WHITE_LIST = new String[] {"ID", "USUARIO", "PASSWORD", "NOMBRE", "APELLIDO1", "APELLIDO2", "FECHANACIMIENTO", "TELEFONO", "EMAIL", "IDIOMA", "PAISID", "PROVINCIAID", "LOCALIDADID", "COMARCAID", "MUNICIPIOID", "CALLEID", "IMAGEN", "SEXO", "DNI", "AUTONOMIAID", "NOMBREIMAGEN", "CALLE", "DIRECCION", "IMPORTEMATRICULA"};

    private JdbcTemplate jdbcTemplate;

	/*
	 * ROW_MAPPERS
	 */
	private RowMapper<X21aAlumno> rwMap = new RowMapper<X21aAlumno>() {
		public X21aAlumno mapRow(ResultSet resultSet, int rowNum) throws SQLException {
		Provincia provincia = new Provincia();
		provincia.setCode(resultSet.getBigDecimal("PROVINCIAID"));
		provincia.setDescEs("Prueba_Es");
		provincia.setDescEu("Prueba_Eu");
           return new X21aAlumno(
               resultSet.getBigDecimal("ID"), resultSet.getString("USUARIO"), resultSet.getString("PASSWORD"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2"), resultSet.getDate("FECHANACIMIENTO"), resultSet.getString("TELEFONO"), resultSet.getString("EMAIL"), resultSet.getString("IDIOMA"), resultSet.getString("PAISID"), resultSet.getString("PROVINCIAID"), resultSet.getLong("LOCALIDADID"), resultSet.getString("COMARCAID"), resultSet.getString("MUNICIPIOID"), resultSet.getLong("CALLEID"), resultSet.getBlob("IMAGEN"), resultSet.getString("SEXO"), resultSet.getString("DNI"), resultSet.getString("AUTONOMIAID"), resultSet.getString("NOMBREIMAGEN"), resultSet.getString("CALLE"), resultSet.getString("DIRECCION"), resultSet.getBigDecimal("IMPORTEMATRICULA"),provincia
           ); } } ;

	private RowMapper<X21aAlumno> rwMapPK = new RowMapper<X21aAlumno>() {
		public X21aAlumno mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new X21aAlumno(
				resultSet.getBigDecimal("ID")
           ); } } ;

	/**
     * Rowmapper para Jerarqu√≠a
     *
     * @param dataSource DataSource
     * @return
     */
	private RowMapper<JerarquiaDto< X21aAlumno>> rwMapJerarquia = new RowMapper<JerarquiaDto<X21aAlumno>>() {
		public JerarquiaDto<X21aAlumno> mapRow(ResultSet resultSet, int rowNum) throws SQLException {

			X21aAlumno x21aalumno = new X21aAlumno(resultSet.getBigDecimal("ID"), resultSet.getString("USUARIO"), resultSet.getString("PASSWORD"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2"), resultSet.getDate("FECHA_NACIMIENTO"), resultSet.getString("TELEFONO"), resultSet.getString("EMAIL"), resultSet.getString("IDIOMA"), resultSet.getString("PAIS_ID"), resultSet.getString("PROVINCIA_ID"), resultSet.getLong("LOCALIDAD_ID"), resultSet.getString("COMARCA_ID"), resultSet.getString("MUNICIPIO_ID"), resultSet.getLong("CALLE_ID"), resultSet.getBlob("IMAGEN"), resultSet.getString("SEXO"), resultSet.getString("DNI"), resultSet.getString("AUTONOMIA_ID"), resultSet.getString("NOMBRE_IMAGEN"), resultSet.getString("CALLE"), resultSet.getString("DIRECCION"), resultSet.getBigDecimal("IMPORTE_MATRICULA"), new Provincia());

			JerarquiaDto<X21aAlumno> jerarquia = new JerarquiaDto<X21aAlumno>();
			jerarquia.setModel(x21aalumno);
			jerarquia.setLevel(resultSet.getBigDecimal("LEVEL").intValue());
			jerarquia.setParentNodes(resultSet.getString("PARENTNODES"));
			jerarquia.setIsLeaf(Boolean.parseBoolean(resultSet.getString("ISLEAF")));
			jerarquia.setFilter(Boolean.parseBoolean(resultSet.getString("FILTER")));
			return jerarquia;
		}
	};


	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

	/*
	 * OPERACIONES CRUD
	 */

    /**
     * Inserts a single row in the X21aAlumno table.
     *
     * @param x21aalumno X21aAlumno
     * @return X21aAlumno
     */
	public X21aAlumno add(X21aAlumno x21aalumno) {
    	String query = "INSERT INTO X21A_ALUMNO (ID, USUARIO, PASSWORD, NOMBRE, APELLIDO1, APELLIDO2, FECHA_NACIMIENTO, TELEFONO, EMAIL, IDIOMA, PAIS_ID, PROVINCIA_ID, LOCALIDAD_ID, COMARCA_ID, MUNICIPIO_ID, CALLE_ID, IMAGEN, SEXO, DNI, AUTONOMIA_ID, NOMBRE_IMAGEN, CALLE, DIRECCION, IMPORTE_MATRICULA) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		this.jdbcTemplate.update(query, x21aalumno.getId(), x21aalumno.getUsuario(), x21aalumno.getPassword(), x21aalumno.getNombre(), x21aalumno.getApellido1(), x21aalumno.getApellido2(), x21aalumno.getFechaNacimiento(), x21aalumno.getTelefono(), x21aalumno.getEmail(), x21aalumno.getIdioma(), x21aalumno.getPaisId(), x21aalumno.getProvinciaId(), x21aalumno.getLocalidadId(), x21aalumno.getComarcaId(), x21aalumno.getMunicipioId(), x21aalumno.getCalleId(), x21aalumno.getImagen(), x21aalumno.getSexo(), x21aalumno.getDni(), x21aalumno.getAutonomiaId(), x21aalumno.getNombreImagen(), x21aalumno.getCalle(), x21aalumno.getDireccion(), x21aalumno.getImporteMatricula());
		return x21aalumno;
	}

    /**
     * Updates a single row in the X21aAlumno table.
     *
     * @param x21aalumno X21aAlumno
     * @return X21aAlumno
     */
    public X21aAlumno update(X21aAlumno x21aalumno) {
		String query = "UPDATE X21A_ALUMNO SET USUARIO=?, PASSWORD=?, NOMBRE=?, APELLIDO1=?, APELLIDO2=?, FECHA_NACIMIENTO=?, TELEFONO=?, EMAIL=?, IDIOMA=?, PAIS_ID=?, PROVINCIA_ID=?, LOCALIDAD_ID=?, COMARCA_ID=?, MUNICIPIO_ID=?, CALLE_ID=?, IMAGEN=?, SEXO=?, DNI=?, AUTONOMIA_ID=?, NOMBRE_IMAGEN=?, CALLE=?, DIRECCION=?, IMPORTE_MATRICULA=? WHERE ID=?";
		this.jdbcTemplate.update(query, x21aalumno.getUsuario(), x21aalumno.getPassword(), x21aalumno.getNombre(), x21aalumno.getApellido1(), x21aalumno.getApellido2(), x21aalumno.getFechaNacimiento(), x21aalumno.getTelefono(), x21aalumno.getEmail(), x21aalumno.getIdioma(), x21aalumno.getPaisId(), x21aalumno.getProvinciaId(), x21aalumno.getLocalidadId(), x21aalumno.getComarcaId(), x21aalumno.getMunicipioId(), x21aalumno.getCalleId(), x21aalumno.getImagen(), x21aalumno.getSexo(), x21aalumno.getDni(), x21aalumno.getAutonomiaId(), x21aalumno.getNombreImagen(), x21aalumno.getCalle(), x21aalumno.getDireccion(), x21aalumno.getImporteMatricula(), x21aalumno.getId());
		return x21aalumno;
	}

    /**
     * Finds a single row in the X21aAlumno table.
     *
     * @param x21aalumno X21aAlumno
     * @return X21aAlumno
     */
    @Transactional (readOnly = true)
    public X21aAlumno find(X21aAlumno x21aalumno) {
		String query = "SELECT t1.ID ID, t1.USUARIO USUARIO, t1.PASSWORD PASSWORD, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2, t1.FECHA_NACIMIENTO FECHANACIMIENTO, t1.TELEFONO TELEFONO, t1.EMAIL EMAIL, t1.IDIOMA IDIOMA, t1.PAIS_ID PAISID, t1.PROVINCIA_ID PROVINCIAID, t1.LOCALIDAD_ID LOCALIDADID, t1.COMARCA_ID COMARCAID, t1.MUNICIPIO_ID MUNICIPIOID, t1.CALLE_ID CALLEID, t1.IMAGEN IMAGEN, t1.SEXO SEXO, t1.DNI DNI, t1.AUTONOMIA_ID AUTONOMIAID, t1.NOMBRE_IMAGEN NOMBREIMAGEN, t1.CALLE CALLE, t1.DIRECCION DIRECCION, t1.IMPORTE_MATRICULA IMPORTEMATRICULA FROM X21A_ALUMNO t1  WHERE t1.ID = ?  ";

		List<X21aAlumno> x21aalumnoList = this.jdbcTemplate.query(query, this.rwMap, x21aalumno.getId());
		return (X21aAlumno) DataAccessUtils.uniqueResult(x21aalumnoList);
    }

    /**
     * Removes a single row in the X21aAlumno table.
     *
     * @param x21aalumno X21aAlumno
     * @return
     */
    public void remove(X21aAlumno x21aalumno) {
		String query = "DELETE FROM X21A_ALUMNO WHERE ID=?";
		this.jdbcTemplate.update(query, x21aalumno.getId());
    }
    
    /**
    * Exporta Datos al clipBoard
    *
    */
    public List<X21aAlumno> getMultiple(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto,  Boolean startsWith){
    	
    	// SELECT 
		StringBuilder sbSQL = new StringBuilder("SELECT t1.ID ID, t1.USUARIO USUARIO, t1.PASSWORD PASSWORD, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2, t1.FECHA_NACIMIENTO FECHANACIMIENTO, t1.TELEFONO TELEFONO, t1.EMAIL EMAIL, t1.IDIOMA IDIOMA, t1.PAIS_ID PAISID, t1.PROVINCIA_ID PROVINCIAID, t1.LOCALIDAD_ID LOCALIDADID, t1.COMARCA_ID COMARCAID, t1.MUNICIPIO_ID MUNICIPIOID, t1.CALLE_ID CALLEID, t1.IMAGEN IMAGEN, t1.SEXO SEXO, t1.DNI DNI, t1.AUTONOMIA_ID AUTONOMIAID, t1.NOMBRE_IMAGEN NOMBREIMAGEN, t1.CALLE CALLE, t1.DIRECCION DIRECCION, t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
		
		// FROM
		sbSQL.append("FROM X21A_ALUMNO t1 ");
    	//Where clause & Params
    	Map<String, Object> mapaWhere = this.getWhereLikeMap(filterX21aAlumno, startsWith);
    	StringBuilder where = new StringBuilder(" WHERE 1=1 ");
    	where.append(mapaWhere.get("query"));
    	sbSQL.append(where);
    	
    	@SuppressWarnings("unchecked")
    	List<Object> params = (List<Object>) mapaWhere.get("params");
    	
		StringBuilder sbMultipleSQL = sbSQL.append(TableManager.getSelectMultipleQuery(tableRequestDto, X21aAlumno.class, params, "ID"));
		
		return this.jdbcTemplate.query(sbMultipleSQL.toString(), this.rwMap, params.toArray());
    }

   /**
    * Finds a list of rows in the X21aAlumno table.
    *
    * @param x21aalumno X21aAlumno
    * @param tableRequestDto TableRequestDto
    * @return List<X21aAlumno>
    */
	@Transactional (readOnly = true)
    public List<X21aAlumno> findAll(X21aAlumno x21aalumno, TableRequestDto tableRequestDto) {
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.USUARIO USUARIO,t1.PASSWORD PASSWORD,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_NACIMIENTO FECHANACIMIENTO,t1.TELEFONO TELEFONO,t1.EMAIL EMAIL,t1.IDIOMA IDIOMA,t1.PAIS_ID PAISID,t1.PROVINCIA_ID PROVINCIAID,t1.LOCALIDAD_ID LOCALIDADID,t1.COMARCA_ID COMARCAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.CALLE_ID CALLEID,t1.IMAGEN IMAGEN,t1.SEXO SEXO,t1.DNI DNI,t1.AUTONOMIA_ID AUTONOMIAID,t1.NOMBRE_IMAGEN NOMBREIMAGEN,t1.CALLE CALLE,t1.DIRECCION DIRECCION,t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
		query.append("FROM X21A_ALUMNO t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(x21aalumno); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, TableX21aAlumnoDaoImpl.ORDER_BY_WHITE_LIST);
		}

		return (List<X21aAlumno>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

	/**
	 * Finds rows in the X21aAlumno table using like.
     *
     * @param x21aalumno X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<X21aAlumno>
     */
	@Transactional (readOnly = true)
    public List<X21aAlumno> findAllLike(X21aAlumno x21aalumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.USUARIO USUARIO,t1.PASSWORD PASSWORD,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_NACIMIENTO FECHANACIMIENTO,t1.TELEFONO TELEFONO,t1.EMAIL EMAIL,t1.IDIOMA IDIOMA,t1.PAIS_ID PAISID,t1.PROVINCIA_ID PROVINCIAID,t1.LOCALIDAD_ID LOCALIDADID,t1.COMARCA_ID COMARCAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.CALLE_ID CALLEID,t1.IMAGEN IMAGEN,t1.SEXO SEXO,t1.DNI DNI,t1.AUTONOMIA_ID AUTONOMIAID,t1.NOMBRE_IMAGEN NOMBREIMAGEN,t1.CALLE CALLE,t1.DIRECCION DIRECCION,t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
        query.append("FROM X21A_ALUMNO t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(x21aalumno,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, TableX21aAlumnoDaoImpl.ORDER_BY_WHITE_LIST);
		}

		return (List<X21aAlumno>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */

    /**
     * Counts rows in the X21aAlumno table.
     *
     * @param x21aalumno X21aAlumno
     * @return Long
     */
    @Transactional (readOnly = true)
    public Long findAllCount(X21aAlumno x21aalumno) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM X21A_ALUMNO t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(x21aalumno); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Counts rows in the X21aAlumno table using like.
     *
     * @param x21aalumno X21aAlumno
     * @param startsWith Boolean
     * @return Long
     */
	@Transactional (readOnly = true)
    public Long findAllLikeCount(X21aAlumno x21aalumno, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM X21A_ALUMNO t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(x21aalumno,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Reorder the data list of X21aAlumno selected for rup_table
     *
     * @param x21aalumno X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<TableRowDto<X21aAlumno>>
     */
	@Override
	public List<TableRowDto<X21aAlumno>> reorderSelection(X21aAlumno x21aalumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.ID ID,t1.USUARIO USUARIO,t1.PASSWORD PASSWORD,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_NACIMIENTO FECHANACIMIENTO,t1.TELEFONO TELEFONO,t1.EMAIL EMAIL,t1.IDIOMA IDIOMA,t1.PAIS_ID PAISID,t1.PROVINCIA_ID PROVINCIAID,t1.LOCALIDAD_ID LOCALIDADID,t1.COMARCA_ID COMARCAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.CALLE_ID CALLEID,t1.IMAGEN IMAGEN,t1.SEXO SEXO,t1.DNI DNI,t1.AUTONOMIA_ID AUTONOMIAID,t1.NOMBRE_IMAGEN NOMBREIMAGEN,t1.CALLE CALLE,t1.DIRECCION DIRECCION,t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
		// FROM
        query.append("FROM X21A_ALUMNO t1 ");
		// FILTRADO
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(x21aalumno,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		// Par√°metros de filtrado
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhere.get("params");

		// SQL para la reordenaci√≥n
		StringBuilder sbReorderSelectionSQL =  TableManager.getReorderQuery(query, tableRequestDto, X21aAlumno.class, filterParamList, "ID" );

		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<X21aAlumno>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}

	/**
	 * Search method for rup_table
     *
     * @param filterParams X21aAlumno
     * @param searchParams X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<TableRowDto<X21aAlumno>>
     */
	@Override
	public List<TableRowDto<X21aAlumno>> search(X21aAlumno filterParams, X21aAlumno searchParams, TableRequestDto tableRequestDto, Boolean startsWith) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.ID ID,t1.USUARIO USUARIO,t1.PASSWORD PASSWORD,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_NACIMIENTO FECHANACIMIENTO,t1.TELEFONO TELEFONO,t1.EMAIL EMAIL,t1.IDIOMA IDIOMA,t1.PAIS_ID PAISID,t1.PROVINCIA_ID PROVINCIAID,t1.LOCALIDAD_ID LOCALIDADID,t1.COMARCA_ID COMARCAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.CALLE_ID CALLEID,t1.IMAGEN IMAGEN,t1.SEXO SEXO,t1.DNI DNI,t1.AUTONOMIA_ID AUTONOMIAID,t1.NOMBRE_IMAGEN NOMBREIMAGEN,t1.CALLE CALLE,t1.DIRECCION DIRECCION,t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
		// FROM
        query.append("FROM X21A_ALUMNO t1 ");
        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// FILTRADO
		Map<String, ?> mapaWhereFilter = this.getWhereLikeMap(filterParams, startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhereFilter.get("query"));
		query.append(where);
		// Filter params
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhereFilter.get("params");

		// BUSQUEDA
		Map<String, Object> mapaWhereSearch = this.getWhereLikeMap(searchParams, startsWith);
		String searchSQL = ((StringBuilder) mapaWhereSearch.get("query")).toString();
		// Search params
		@SuppressWarnings("unchecked")
		List<Object> searchParamList = (List<Object>) mapaWhereSearch.get("params");

		// SQL
		StringBuilder sbReorderSelectionSQL = TableManager.getSearchQuery(query, tableRequestDto, X21aAlumno.class, filterParamList, searchSQL, searchParamList, from_alias, "ID");

		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<X21aAlumno>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}

	/**
	 * Removes rows from the X21aAlumno table.
	 *
	 * @param filterX21aAlumno X21aAlumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
     */
	@Override
	public void removeMultiple(X21aAlumno filterx21aalumno, TableRequestDto tableRequestDto, Boolean startsWith) {
		// Like clause and params
    	Map<String, Object> mapWhereLike = this.getWhereLikeMap(filterx21aalumno, startsWith);
    	
    	// Delete query
		StringBuilder sbRemoveMultipleSQL = TableManager.getRemoveMultipleQuery(mapWhereLike, tableRequestDto, X21aAlumno.class, "X21A_ALUMNO", "t1", new String[]{"ID"});
		
		// Params list. Includes needed params for like and IN/NOT IN clauses
		@SuppressWarnings("unchecked")
		List<Object> params = (List<Object>) mapWhereLike.get("params");
		params.addAll(tableRequestDto.getMultiselection().getSelectedIds());
		
		this.jdbcTemplate.update(sbRemoveMultipleSQL.toString(), params.toArray());
	}

	/**
	 * Filter in the hierarchical X21aAlumno table.
     *
     * @param filterX21aAlumno X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @return List<JerarquiaDto<X21aAlumno>>
     */
	@Override
	public List<JerarquiaDto<X21aAlumno>> findAllLikeJerarquia(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.ID ID,t1.USUARIO USUARIO,t1.PASSWORD PASSWORD,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_NACIMIENTO FECHANACIMIENTO,t1.TELEFONO TELEFONO,t1.EMAIL EMAIL,t1.IDIOMA IDIOMA,t1.PAIS_ID PAISID,t1.PROVINCIA_ID PROVINCIAID,t1.LOCALIDAD_ID LOCALIDADID,t1.COMARCA_ID COMARCAID,t1.MUNICIPIO_ID MUNICIPIOID,t1.CALLE_ID CALLEID,t1.IMAGEN IMAGEN,t1.SEXO SEXO,t1.DNI DNI,t1.AUTONOMIA_ID AUTONOMIAID,t1.NOMBRE_IMAGEN NOMBREIMAGEN,t1.CALLE CALLE,t1.DIRECCION DIRECCION,t1.IMPORTE_MATRICULA IMPORTEMATRICULA ");
		// FROM
        //StringBuilder from = new StringBuilder("FROM X21A_ALUMNO t1 ");
        List<String> from = new ArrayList<String>();
        from.add("X21A_ALUMNO");
        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarqu√≠a
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterX21aAlumno, false);

		//JERARQUIA
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		query = TableManagerJerarquia.getQuery(tableRequestDto, query, mapaWhere, "ID", "ID_PADRE", "NOMBRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		query = TableManagerJerarquia.getQuery(tableRequestDto, query, mapaWhere, "ID", "ID_PADRE", "NOMBRE", from, from_alias, joins, businessFilters, businessParams);

		//PAGINACION
		if (tableRequestDto != null) {
			query = TableManagerJerarquia.getPaginationQuery(tableRequestDto, query, TableX21aAlumnoDaoImpl.ORDER_BY_WHITE_LIST);
		}

		List<?> params = (List<?>) mapaWhere.get("params");
		return this.jdbcTemplate.query(query.toString(), this.rwMapJerarquia, params.toArray());
	}

	/**
	 * Count rows in hierarchy
     *
     * @param filterX21aAlumno X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @return Long
     */
	@Override
	public Long findAllLikeCountJerarquia(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto) {
		// FROM
        //StringBuilder from = new StringBuilder("FROM X21A_ALUMNO t1 ");
        List<String> from = new ArrayList<String>();
        from.add("X21A_ALUMNO");

        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarqu√≠a
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterX21aAlumno, false);

		//JERARQUIA
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		StringBuilder query = TableManagerJerarquia.getQueryCount(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		StringBuilder query = TableManagerJerarquia.getQueryCount(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias, joins, businessFilters, businessParams);


		List<?> params = (List<?>) mapaWhere.get("params");
		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Find dependent hierarchical rows
     *
     * @param filterX21aAlumno X21aAlumno
     * @param tableRequestDto TableRequestDto
     * @return List<TableRowDto<X21aAlumno>>
     */
	@Override
	public List<TableRowDto<X21aAlumno>> findAllChild(X21aAlumno filterX21aAlumno, TableRequestDto tableRequestDto) {

		// FROM
        //StringBuilder from = new StringBuilder("FROM X21A_ALUMNO t1 ");
        List<String> from = new ArrayList<String>();
        from.add("X21A_ALUMNO");

        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarqu√≠a
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterX21aAlumno, false);

		//MULTISELECCION
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		StringBuilder query = TableManagerJerarquia.getQueryChildren(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		StringBuilder query = TableManagerJerarquia.getQueryChildren(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias, joins, businessFilters, businessParams);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.query(query.toString(), new RowNumResultSetExtractor<X21aAlumno>(this.rwMapPK, "ID"), params.toArray());
	}

	/*
	 * M√âTODOS PRIVADOS
	 */

	/**
	 * Returns a map with the needed value to create the conditions to filter by
	 * the X21aAlumno entity
	 *
	 * @param x21aalumno X21aAlumno
	 *            Bean with the criteria values to filter by.
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generaci√≥n de c√≥digo de UDA
	private Map<String, ?> getWhereMap (X21aAlumno x21aalumno){

		StringBuilder where = new StringBuilder(TableX21aAlumnoDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (x21aalumno  != null  && x21aalumno.getId() != null ) {
			where.append(" AND t1.ID = ?");
			params.add(x21aalumno.getId());
		}
		if (x21aalumno  != null  && x21aalumno.getUsuario() != null ) {
			where.append(" AND t1.USUARIO = ?");
			params.add(x21aalumno.getUsuario());
		}
		if (x21aalumno  != null  && x21aalumno.getPassword() != null ) {
			where.append(" AND t1.PASSWORD = ?");
			params.add(x21aalumno.getPassword());
		}
		if (x21aalumno  != null  && x21aalumno.getNombre() != null ) {
			where.append(" AND t1.NOMBRE = ?");
			params.add(x21aalumno.getNombre());
		}
		if (x21aalumno  != null  && x21aalumno.getApellido1() != null ) {
			where.append(" AND t1.APELLIDO1 = ?");
			params.add(x21aalumno.getApellido1());
		}
		if (x21aalumno  != null  && x21aalumno.getApellido2() != null ) {
			where.append(" AND t1.APELLIDO2 = ?");
			params.add(x21aalumno.getApellido2());
		}
		if (x21aalumno  != null  && x21aalumno.getFechaNacimiento() != null ) {
			where.append(" AND t1.FECHA_NACIMIENTO = ?");
			params.add(x21aalumno.getFechaNacimiento());
		}
		if (x21aalumno  != null  && x21aalumno.getTelefono() != null ) {
			where.append(" AND t1.TELEFONO = ?");
			params.add(x21aalumno.getTelefono());
		}
		if (x21aalumno  != null  && x21aalumno.getEmail() != null ) {
			where.append(" AND t1.EMAIL = ?");
			params.add(x21aalumno.getEmail());
		}
		if (x21aalumno  != null  && x21aalumno.getIdioma() != null ) {
			where.append(" AND t1.IDIOMA = ?");
			params.add(x21aalumno.getIdioma());
		}
		if (x21aalumno  != null  && x21aalumno.getPaisId() != null ) {
			where.append(" AND t1.PAIS_ID = ?");
			params.add(x21aalumno.getPaisId());
		}
		if (x21aalumno  != null  && x21aalumno.getProvinciaId() != null ) {
			where.append(" AND t1.PROVINCIA_ID = ?");
			params.add(x21aalumno.getProvinciaId());
		}
		if (x21aalumno  != null  && x21aalumno.getLocalidadId() != null ) {
			where.append(" AND t1.LOCALIDAD_ID = ?");
			params.add(x21aalumno.getLocalidadId());
		}
		if (x21aalumno  != null  && x21aalumno.getComarcaId() != null ) {
			where.append(" AND t1.COMARCA_ID = ?");
			params.add(x21aalumno.getComarcaId());
		}
		if (x21aalumno  != null  && x21aalumno.getMunicipioId() != null ) {
			where.append(" AND t1.MUNICIPIO_ID = ?");
			params.add(x21aalumno.getMunicipioId());
		}
		if (x21aalumno  != null  && x21aalumno.getCalleId() != null ) {
			where.append(" AND t1.CALLE_ID = ?");
			params.add(x21aalumno.getCalleId());
		}
		if (x21aalumno  != null  && x21aalumno.getSexo() != null ) {
			where.append(" AND t1.SEXO = ?");
			params.add(x21aalumno.getSexo());
		}
		if (x21aalumno  != null  && x21aalumno.getDni() != null ) {
			where.append(" AND t1.DNI = ?");
			params.add(x21aalumno.getDni());
		}
		if (x21aalumno  != null  && x21aalumno.getAutonomiaId() != null ) {
			where.append(" AND t1.AUTONOMIA_ID = ?");
			params.add(x21aalumno.getAutonomiaId());
		}
		if (x21aalumno  != null  && x21aalumno.getNombreImagen() != null ) {
			where.append(" AND t1.NOMBRE_IMAGEN = ?");
			params.add(x21aalumno.getNombreImagen());
		}
		if (x21aalumno  != null  && x21aalumno.getCalle() != null ) {
			where.append(" AND t1.CALLE = ?");
			params.add(x21aalumno.getCalle());
		}
		if (x21aalumno  != null  && x21aalumno.getDireccion() != null ) {
			where.append(" AND t1.DIRECCION = ?");
			params.add(x21aalumno.getDireccion());
		}
		if (x21aalumno  != null  && x21aalumno.getImporteMatricula() != null ) {
			where.append(" AND t1.IMPORTE_MATRICULA = ?");
			params.add(x21aalumno.getImporteMatricula());
		}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generaci√≥n de c√≥digo de UDA

	/**
	 * Returns a map with the needed value to create the conditions to filter by
	 * the X21aAlumno entity
	 *
	 * @param x21aalumno X21aAlumno
	 *            Bean with the criteria values to filter by.
     * @param startsWith Boolean
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generaci√≥n de c√≥digo de UDA
	private Map<String, Object> getWhereLikeMap (X21aAlumno x21aalumno, Boolean startsWith){

		StringBuilder where = new StringBuilder(TableX21aAlumnoDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (x21aalumno  != null  && x21aalumno.getId() != null ) {
			where.append(" AND t1.ID = ?");
			params.add(x21aalumno.getId());
	     }
		if (x21aalumno  != null  && x21aalumno.getUsuario() != null ) {
			where.append(" AND UPPER(t1.USUARIO) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getUsuario().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getUsuario().toUpperCase() +"%");
			}
			where.append(" AND t1.USUARIO IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getPassword() != null ) {
			where.append(" AND UPPER(t1.PASSWORD) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getPassword().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getPassword().toUpperCase() +"%");
			}
			where.append(" AND t1.PASSWORD IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getNombre() != null ) {
			where.append(" AND UPPER(t1.NOMBRE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getNombre().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getNombre().toUpperCase() +"%");
			}
			where.append(" AND t1.NOMBRE IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getApellido1() != null ) {
			where.append(" AND UPPER(t1.APELLIDO1) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getApellido1().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getApellido1().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO1 IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getApellido2() != null ) {
			where.append(" AND UPPER(t1.APELLIDO2) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getApellido2().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getApellido2().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO2 IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getFechaNacimiento() != null ) {
			where.append(" AND t1.FECHA_NACIMIENTO = ?");
			params.add(x21aalumno.getFechaNacimiento());
	     }
		if (x21aalumno  != null  && x21aalumno.getTelefono() != null ) {
			where.append(" AND UPPER(t1.TELEFONO) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getTelefono().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getTelefono().toUpperCase() +"%");
			}
			where.append(" AND t1.TELEFONO IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getEmail() != null ) {
			where.append(" AND UPPER(t1.EMAIL) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getEmail().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getEmail().toUpperCase() +"%");
			}
			where.append(" AND t1.EMAIL IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getIdioma() != null ) {
			where.append(" AND UPPER(t1.IDIOMA) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getIdioma().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getIdioma().toUpperCase() +"%");
			}
			where.append(" AND t1.IDIOMA IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getPaisId() != null ) {
			where.append(" AND UPPER(t1.PAIS_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getPaisId().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getPaisId().toUpperCase() +"%");
			}
			where.append(" AND t1.PAIS_ID IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getProvinciaId() != null ) {
			where.append(" AND UPPER(t1.PROVINCIA_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getProvinciaId().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getProvinciaId().toUpperCase() +"%");
			}
			where.append(" AND t1.PROVINCIA_ID IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getLocalidadId() != null ) {
			where.append(" AND t1.LOCALIDAD_ID = ?");
			params.add(x21aalumno.getLocalidadId());
	     }
		if (x21aalumno  != null  && x21aalumno.getComarcaId() != null ) {
			where.append(" AND UPPER(t1.COMARCA_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getComarcaId().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getComarcaId().toUpperCase() +"%");
			}
			where.append(" AND t1.COMARCA_ID IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getMunicipioId() != null ) {
			where.append(" AND UPPER(t1.MUNICIPIO_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getMunicipioId().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getMunicipioId().toUpperCase() +"%");
			}
			where.append(" AND t1.MUNICIPIO_ID IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getCalleId() != null ) {
			where.append(" AND t1.CALLE_ID = ?");
			params.add(x21aalumno.getCalleId());
	     }
		if (x21aalumno  != null  && x21aalumno.getSexo() != null ) {
			where.append(" AND UPPER(t1.SEXO) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getSexo().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getSexo().toUpperCase() +"%");
			}
			where.append(" AND t1.SEXO IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getDni() != null ) {
			where.append(" AND UPPER(t1.DNI) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getDni().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getDni().toUpperCase() +"%");
			}
			where.append(" AND t1.DNI IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getAutonomiaId() != null ) {
			where.append(" AND UPPER(t1.AUTONOMIA_ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getAutonomiaId().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getAutonomiaId().toUpperCase() +"%");
			}
			where.append(" AND t1.AUTONOMIA_ID IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getNombreImagen() != null ) {
			where.append(" AND UPPER(t1.NOMBRE_IMAGEN) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getNombreImagen().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getNombreImagen().toUpperCase() +"%");
			}
			where.append(" AND t1.NOMBRE_IMAGEN IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getCalle() != null ) {
			where.append(" AND UPPER(t1.CALLE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getCalle().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getCalle().toUpperCase() +"%");
			}
			where.append(" AND t1.CALLE IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getDireccion() != null ) {
			where.append(" AND UPPER(t1.DIRECCION) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(x21aalumno.getDireccion().toUpperCase() +"%");
			}else{
				params.add("%"+x21aalumno.getDireccion().toUpperCase() +"%");
			}
			where.append(" AND t1.DIRECCION IS NOT NULL");
	     }
		if (x21aalumno  != null  && x21aalumno.getImporteMatricula() != null ) {
			where.append(" AND t1.IMPORTE_MATRICULA = ?");
			params.add(x21aalumno.getImporteMatricula());
	     }

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generaci√≥n de c√≥digo de UDA

	/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;}

