package com.ejie.x21a.dao;

import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.PaginationManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Resource;
import javax.sql.DataSource;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Alumno;
/**   * AlumnoDaoImpl generated by UDA 1.0, 08-sep-2011 13:10:35.
*  @author UDA
*/
@Repository
@Transactional
public class AlumnoDaoImpl implements AlumnoDao {
    private SimpleJdbcTemplate jdbcTemplate;
	private RowMapper<Alumno> rwMap = new RowMapper<Alumno>() {
          public Alumno mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new Alumno(
               resultSet.getBigDecimal("IDA"), resultSet.getBigDecimal("IDB"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2"), resultSet.getString("FECHAALTA")
           ); } } ;

     /**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     *
     */
    @Resource
     public void setDataSource(DataSource dataSource) {
      this.jdbcTemplate = new SimpleJdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the Alumno table.
     *
     * @param alumno Pagination
     * @return Alumno
     */
     public Alumno add(Alumno alumno) {

      String query = "INSERT INTO ALUMNO( ID_A,ID_B,NOMBRE,APELLIDO1,APELLIDO2,FECHA_ALTA)"
        + "VALUES (?,?,?,?,?,?)";

      this.jdbcTemplate.update(query, alumno.getIdA(), alumno.getIdB(), alumno.getNombre(), alumno.getApellido1(), alumno.getApellido2(), alumno.getFechaAlta());
      return alumno;
    }

    /**
     * Updates a single row in the Alumno table.
     *
     * @param alumno Pagination
     * @return Alumno
     */
    public Alumno update(Alumno alumno) {
      String query = "UPDATE ALUMNO SET NOMBRE=?,APELLIDO1=?,APELLIDO2=?,FECHA_ALTA=? WHERE ID_A=? AND ID_B=?";
      this.jdbcTemplate.update(query, alumno.getNombre(), alumno.getApellido1(), alumno.getApellido2(), alumno.getFechaAlta(), alumno.getIdA(), alumno.getIdB());
      return alumno;

    }

    /**
     * Finds a single row in the Alumno table.
     *
     * @param alumno Pagination
     * @return Alumno
     */
    @Transactional (readOnly = true)
    public Alumno find(Alumno alumno) {
      String query = "SELECT t1.ID_A IDA, t1.ID_B IDB, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2, t1.FECHA_ALTA FECHAALTA " 
         + "FROM ALUMNO t1  " 
         + "WHERE t1.ID_A = ?   AND t1.ID_B = ?    ";
		  return (Alumno) this.jdbcTemplate.queryForObject(query, 
        rwMap , alumno.getIdA() , alumno.getIdB());	 
    }

    /**
     * Removes a single row in the Alumno table.
     *
     * @param alumno Pagination
     *
     */
    public void remove(Alumno alumno) {
      String query = "DELETE  FROM ALUMNO WHERE ID_A=? AND ID_B=?";
      this.jdbcTemplate.update(query, alumno.getIdA() , alumno.getIdB());

    }
   /**
    * Finds a List of rows in the Alumno table.
    * 
    * @param alumno Alumno
    * @param pagination Pagination
    * @return List 
    */
@Transactional (readOnly = true)
    public List<Alumno> findAll(Alumno alumno, Pagination pagination) {
      StringBuffer where = new StringBuffer(3000);
      List<Object> params = new ArrayList<Object>();
      where.append(" WHERE 1=1 	");
      StringBuffer query = new StringBuffer("SELECT  t1.ID_A IDA,t1.ID_B IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_ALTA FECHAALTA " 
        + "FROM ALUMNO t1 ");
        if (alumno  != null  && alumno.getIdA() != null ) {
           where.append(" AND t1.ID_A = ?");
           params.add(alumno.getIdA());
        }
        if (alumno  != null  && alumno.getIdB() != null ) {
           where.append(" AND t1.ID_B = ?");
           params.add(alumno.getIdB());
        }
        if (alumno  != null  && alumno.getNombre() != null ) {
           where.append(" AND t1.NOMBRE = ?");
           params.add(alumno.getNombre());
        }
        if (alumno  != null  && alumno.getApellido1() != null ) {
           where.append(" AND t1.APELLIDO1 = ?");
           params.add(alumno.getApellido1());
        }
        if (alumno  != null  && alumno.getApellido2() != null ) {
           where.append(" AND t1.APELLIDO2 = ?");
           params.add(alumno.getApellido2());
        }
        if (alumno  != null  && alumno.getFechaAlta() != null ) {
           where.append(" AND t1.FECHA_ALTA = ?");
           params.add(alumno.getFechaAlta());
        }
	     query.append(where);
        

        StringBuffer order = new StringBuffer(3000);
        if (pagination != null) {
          if (pagination.getSort() != null) {
             order.append(" ORDER BY " + pagination.getSort() + " " + pagination.getAscDsc());
             query.append(order);
          }

          query = new StringBuffer(PaginationManager.getQueryLimits(pagination,query.toString()));
        }
		
		return (List<Alumno>) this.jdbcTemplate.query(query.toString(),rwMap, params.toArray());
    }
    /**
     * Counts rows in the Alumno table.
     * 
     * @param alumno Alumno
     * @return Long
     */
    @Transactional (readOnly = true)
     public Long findAllCount(Alumno alumno) {

       StringBuffer where = new StringBuffer(3000);
       List<Object> params = new ArrayList<Object>();
       where.append(" WHERE 1=1  ");

      StringBuffer query = new StringBuffer("SELECT COUNT(1) FROM  ALUMNO t1  ");
          if (alumno  != null  && alumno.getIdA() != null ) {
            where.append(" AND t1.ID_A = ?");
            params.add(alumno.getIdA());
          }
          if (alumno  != null  && alumno.getIdB() != null ) {
            where.append(" AND t1.ID_B = ?");
            params.add(alumno.getIdB());
          }
          if (alumno  != null  && alumno.getNombre() != null ) {
            where.append(" AND t1.NOMBRE = ?");
            params.add(alumno.getNombre());
          }
          if (alumno  != null  && alumno.getApellido1() != null ) {
            where.append(" AND t1.APELLIDO1 = ?");
            params.add(alumno.getApellido1());
          }
          if (alumno  != null  && alumno.getApellido2() != null ) {
            where.append(" AND t1.APELLIDO2 = ?");
            params.add(alumno.getApellido2());
          }
          if (alumno  != null  && alumno.getFechaAlta() != null ) {
            where.append(" AND t1.FECHA_ALTA = ?");
            params.add(alumno.getFechaAlta());
          }

        query.append(where);

         return this.jdbcTemplate.queryForLong(query.toString(), params.toArray());


    }
  /**
    * Finds rows in the Alumno table using like.
    * 
    * @param alumno Alumno
    * @param pagination Pagination
    * @return List 
    */
@Transactional (readOnly = true)
    public List<Alumno> findAllLike(Alumno alumno, Pagination pagination, Boolean startsWith) {
      StringBuffer where = new StringBuffer(3000);
      List<Object> params = new ArrayList<Object>();
      where.append(" WHERE 1=1 	");
      StringBuffer query = new StringBuffer("SELECT  t1.ID_A IDA,t1.ID_B IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.FECHA_ALTA FECHAALTA " 
        + "FROM ALUMNO t1 ");
        if (alumno  != null  && alumno.getIdA() != null ) {
			where.append(" AND t1.ID_A like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getIdA()  +"%");
			}else{
				params.add("%"+alumno.getIdA() +"%");
			}	
				where.append(" AND t1.ID_A IS NOT NULL");
		
        }
        if (alumno  != null  && alumno.getIdB() != null ) {
			where.append(" AND t1.ID_B like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getIdB()  +"%");
			}else{
				params.add("%"+alumno.getIdB() +"%");
			}	
				where.append(" AND t1.ID_B IS NOT NULL");
		
        }
        if (alumno  != null  && alumno.getNombre() != null ) {
			where.append(" AND UPPER(t1.NOMBRE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getNombre().toUpperCase()  +"%");
			}else{
				params.add("%"+alumno.getNombre().toUpperCase() +"%");
			}	
				where.append(" AND t1.NOMBRE IS NOT NULL");
		
        }
        if (alumno  != null  && alumno.getApellido1() != null ) {
			where.append(" AND UPPER(t1.APELLIDO1) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getApellido1().toUpperCase()  +"%");
			}else{
				params.add("%"+alumno.getApellido1().toUpperCase() +"%");
			}	
				where.append(" AND t1.APELLIDO1 IS NOT NULL");
		
        }
        if (alumno  != null  && alumno.getApellido2() != null ) {
			where.append(" AND UPPER(t1.APELLIDO2) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getApellido2().toUpperCase()  +"%");
			}else{
				params.add("%"+alumno.getApellido2().toUpperCase() +"%");
			}	
				where.append(" AND t1.APELLIDO2 IS NOT NULL");
		
        }
        if (alumno  != null  && alumno.getFechaAlta() != null ) {
			where.append(" AND UPPER(t1.FECHA_ALTA) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(alumno.getFechaAlta().toUpperCase()  +"%");
			}else{
				params.add("%"+alumno.getFechaAlta().toUpperCase() +"%");
			}	
				where.append(" AND t1.FECHA_ALTA IS NOT NULL");
		
        }
        
        query.append(where);
        

        StringBuffer order = new StringBuffer(3000);
        if (pagination != null) {
          if (pagination.getSort() != null) {
             order.append(" ORDER BY " + pagination.getSort() + " " + pagination.getAscDsc());
             query.append(order);
          }

          query = new StringBuffer(PaginationManager.getQueryLimits(pagination,query.toString()));
        }
		
		return (List<Alumno>) this.jdbcTemplate.query(query.toString(),rwMap, params.toArray());
    }

}

