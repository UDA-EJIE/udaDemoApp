/*
* Copyright 2011 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Usuario;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.PaginationManager;

/**
 * * UsuarioDaoImpl generated by UDA 1.0, 26-may-2011 13:45:00.
 * 
 * @author UDA
 */
@Repository
@Transactional
public class UsuarioDaoImpl implements UsuarioDao {
	private SimpleJdbcTemplate jdbcTemplate;
	private RowMapper<Usuario> rwMap = new RowMapper<Usuario>() {
		public Usuario mapRow(ResultSet resultSet, int rowNum)
				throws SQLException {
			return new Usuario(resultSet.getString("ID"),
					resultSet.getString("NOMBRE"),
					resultSet.getString("APELLIDO1"),
					resultSet.getString("APELLIDO2"),
					resultSet.getString("EJIE"),
					resultSet.getDate("FECHAALTA"),
					resultSet.getDate("FECHABAJA"));
		}
	};

	/**
	 * Method use to set the datasource.
	 * 
	 * @param dataSource
	 *            DataSource
	 * 
	 */
	@Resource
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new SimpleJdbcTemplate(dataSource);
	}

	/**
	 * Inserts a single row in the Usuario table.
	 * 
	 * @param usuario
	 *            Pagination
	 * @return Usuario
	 */
	public Usuario add(Usuario usuario) {

		String query = "INSERT INTO USUARIO( ID,NOMBRE,APELLIDO1,APELLIDO2,EJIE,FECHA_ALTA,FECHA_BAJA)"
				+ "VALUES (?,?,?,?,?,?,?)";

		this.jdbcTemplate.update(query, usuario.getId(), usuario.getNombre(),
				usuario.getApellido1(), usuario.getApellido2(),
				usuario.getEjie(), usuario.getFechaAlta(),
				usuario.getFechaBaja());
		return usuario;
	}

	/**
	 * Updates a single row in the Usuario table.
	 * 
	 * @param usuario
	 *            Pagination
	 * @return Usuario
	 */
	public Usuario update(Usuario usuario) {
		String query = "UPDATE USUARIO SET NOMBRE=?,APELLIDO1=?,APELLIDO2=?,EJIE=?,FECHA_ALTA=?,FECHA_BAJA=? WHERE ID=?";
		this.jdbcTemplate.update(query, usuario.getNombre(),
				usuario.getApellido1(), usuario.getApellido2(),
				usuario.getEjie(), usuario.getFechaAlta(),
				usuario.getFechaBaja(), usuario.getId());
		return usuario;

	}

	/**
	 * Finds a single row in the Usuario table.
	 * 
	 * @param usuario
	 *            Pagination
	 * @return Usuario
	 */
	@Transactional(readOnly = true)
	public Usuario find(Usuario usuario) {
		String query = "SELECT t1.ID ID, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2, t1.EJIE EJIE, t1.FECHA_ALTA FECHAALTA, t1.FECHA_BAJA FECHABAJA "
				+ "FROM USUARIO t1  " + "WHERE t1.ID = ?    ";
		return (Usuario) this.jdbcTemplate.queryForObject(query, rwMap,
				usuario.getId());
	}

	/**
	 * Removes a single row in the Usuario table.
	 * 
	 * @param usuario
	 *            Pagination
	 * 
	 */
	public void remove(Usuario usuario) {
		String query = "DELETE  FROM USUARIO WHERE ID=?";
		this.jdbcTemplate.update(query, usuario.getId());

	}

	/**
	 * Finds a List of rows in the Usuario table.
	 * 
	 * @param usuario
	 *            Usuario
	 * @param pagination
	 *            Pagination
	 * @return List
	 */
	@Transactional(readOnly = true)
	public List<Usuario> findAll(Usuario usuario, Pagination pagination) {

		StringBuffer query = new StringBuffer(
				"SELECT  t1.ID ID,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.EJIE EJIE,t1.FECHA_ALTA FECHAALTA,t1.FECHA_BAJA FECHABAJA "
						+ "FROM USUARIO t1 ");
		
		Map<String, ?> mapaWhere = this.getWhereMap(usuario);
		
		StringBuffer where = (StringBuffer) mapaWhere.get("query");
		List<?> params = (List<?>) mapaWhere.get("params");

		query.append(" WHERE 1=1 ").append(where);

		StringBuffer order = new StringBuffer(3000);
		if (pagination != null) {
			if (pagination.getSort() != null) {
				order.append(" ORDER BY " + pagination.getSort() + " "
						+ pagination.getAscDsc());
				query.append(order);
			}

			query = new StringBuffer(PaginationManager.getQueryLimits(
					pagination, query.toString()));
		}

		return (List<Usuario>) this.jdbcTemplate.query(query.toString(), rwMap,
				params.toArray());
	}

	/**
	 * Counts rows in the Usuario table.
	 * 
	 * @param usuario
	 *            Usuario
	 * @return Long
	 */
	@Transactional(readOnly = true)
	public Long findAllCount(Usuario usuario) {

		StringBuffer query = new StringBuffer(
				"SELECT COUNT(1) FROM  USUARIO t1  ");
		
		Map<String, ?> mapWhere = this.getWhereMap(usuario);
		
		StringBuffer where = (StringBuffer) mapWhere.get("query");
		List<?> params = (List<?>) mapWhere.get("params");
		
		query.append(" WHERE 1=1 ").append(where);

		return this.jdbcTemplate.queryForLong(query.toString(),
				params.toArray());
	}
	
	

	/**
	 * Finds rows in the Usuario table using like.
	 * 
	 * @param usuario
	 *            Usuario
	 * @param pagination
	 *            Pagination
	 * @return List
	 */
	@Transactional(readOnly = true)
	public List<Usuario> findAllLike(Usuario usuario, Pagination pagination,
			Boolean startsWith) {

		StringBuffer query = new StringBuffer(
				"SELECT  t1.ID ID,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.EJIE EJIE,t1.FECHA_ALTA FECHAALTA,t1.FECHA_BAJA FECHABAJA "
						+ "FROM USUARIO t1 ");
		
		Map<String, ?> mapaWhere = this.getWhereLikeMap(usuario, startsWith);
		
		StringBuffer where = (StringBuffer) mapaWhere.get("query");
		List<?> params = (List<?>) mapaWhere.get("params");

		query.append(" WHERE 1=1 ").append(where);

		StringBuffer order = new StringBuffer(3000);
		if (pagination != null) {
			if (pagination.getSort() != null) {
				order.append(" ORDER BY " + pagination.getSort() + " "
						+ pagination.getAscDsc());
				query.append(order);
			}

			query = new StringBuffer(PaginationManager.getQueryLimits(
					pagination, query.toString()));
		}

		return (List<Usuario>) this.jdbcTemplate.query(query.toString(), rwMap,
				params.toArray());
	}

	/**
	 * Counts rows in the Usuario table using like.
	 * 
	 * @param usuario
	 *            Usuario
	 * @return Long
	 */
	@Transactional(readOnly = true)
	public Long findAllLikeCount(Usuario usuario, Boolean startsWith) {

		StringBuffer query = new StringBuffer(
				"SELECT COUNT(1) FROM  USUARIO t1  ");
		
		Map<String, ?> mapWhere = this.getWhereLikeMap(usuario, startsWith);
		
		StringBuffer where = (StringBuffer) mapWhere.get("query");
		List<?> params = (List<?>) mapWhere.get("params");
		
		query.append(" WHERE 1=1 ").append(where);

		return this.jdbcTemplate.queryForLong(query.toString(),
				params.toArray());
	}
	
	/**
	 * Devuelve un mapa con la clausula where y la lista de parametros
	 * correspondientes a los parametros de filtrado indicados mediante de bean
	 * Usuario.
	 * 
	 * @param usuario
	 *            Bean que contiene los valores de los criterios de filtrado.
	 * @return Mapa contenedor de la query y los parametros de filtrado. La
	 *         query se almacena en el mapa con el key "query" y los parametros
	 *         con la key "params".
	 */
	private Map<String, ?> getWhereMap (Usuario usuario){
		
		StringBuffer where = new StringBuffer(3000);
		List<Object> params = new ArrayList<Object>();
		
		if (usuario != null && usuario.getId() != null) {
			where.append(" AND t1.ID = ?");
			params.add(usuario.getId());
		}
		if (usuario != null && usuario.getNombre() != null) {
			where.append(" AND t1.NOMBRE = ?");
			params.add(usuario.getNombre());
		}
		if (usuario != null && usuario.getApellido1() != null) {
			where.append(" AND t1.APELLIDO1 = ?");
			params.add(usuario.getApellido1());
		}
		if (usuario != null && usuario.getApellido2() != null) {
			where.append(" AND t1.APELLIDO2 = ?");
			params.add(usuario.getApellido2());
		}
		if (usuario != null && usuario.getEjie() != null) {
			where.append(" AND t1.EJIE = ?");
			params.add(usuario.getEjie());
		}
		if (usuario != null && usuario.getFechaAlta() != null) {
			where.append(" AND t1.FECHA_ALTA = ?");
			params.add(usuario.getFechaAlta());
		}
		if (usuario != null && usuario.getFechaBaja() != null) {
			where.append(" AND t1.FECHA_BAJA = ?");
			params.add(usuario.getFechaBaja());
		}
		
		Map<String,Object> mapWhere = new HashMap<String, Object>();
		
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;
	}
	
	/**
	 * Devuelve un mapa con la clausula where y la lista de parametros
	 * correspondientes a los parametros de filtrado indicados mediante de bean.
	 * 
	 * @param usuario
	 *            Bean que contiene los valores de los criterios de filtrado.
	 * @param startsWith
	 *            Determina si la comparacion mediante el like tiene en cuenta
	 *            si empieza o contiene la cadena de filtrado indicada.
	 * 
	 * @return Mapa contenedor de la query y los parametros de filtrado. La
	 *         query se almacena en el mapa con el key "query" y los parametros
	 *         con la key "params".
	 */
	private Map<String, ?> getWhereLikeMap (Usuario usuario, Boolean startsWith){
		
		StringBuffer where = new StringBuffer(3000);
		List<Object> params = new ArrayList<Object>();
		
		if (usuario != null && usuario.getId() != null) {
			where.append(" AND UPPER(TRIM(t1.ID)) like ? ESCAPE  '\\'");
			if (startsWith) {
				params.add(usuario.getId().toUpperCase() + "%");
			} else {
				params.add("%" + usuario.getId().trim().toUpperCase() + "%");
			}
			where.append(" AND t1.ID IS NOT NULL");

		}
		if (usuario != null && usuario.getNombre() != null) {
			where.append(" AND UPPER(TRIM(t1.NOMBRE)) like ? ESCAPE  '\\'");
			if (startsWith) {
				params.add(usuario.getNombre().trim().toUpperCase() + "%");
			} else {
				params.add("%" + usuario.getNombre().trim().toUpperCase() + "%");
			}
			where.append(" AND t1.NOMBRE IS NOT NULL");

		}
		if (usuario != null && usuario.getApellido1() != null) {
			where.append(" AND UPPER(TRIM(t1.APELLIDO1)) like ? ESCAPE  '\\'");
			if (startsWith) {
				params.add(usuario.getApellido1().trim().toUpperCase() + "%");
			} else {
				params.add("%" + usuario.getApellido1().trim().toUpperCase() + "%");
			}
			where.append(" AND t1.APELLIDO1 IS NOT NULL");

		}
		if (usuario != null && usuario.getApellido2() != null) {
			where.append(" AND UPPER(TRIM(t1.APELLIDO2)) like ? ESCAPE  '\\'");
			if (startsWith) {
				params.add(usuario.getApellido2().trim().toUpperCase() + "%");
			} else {
				params.add("%" + usuario.getApellido2().trim().toUpperCase() + "%");
			}
			where.append(" AND t1.APELLIDO2 IS NOT NULL");

		}
		if (usuario != null && usuario.getEjie() != null) {
			where.append(" AND UPPER(t1.EJIE) like ? ESCAPE  '\\'");
			if (startsWith) {
				params.add(usuario.getEjie().toUpperCase() + "%");
			} else {
				params.add("%" + usuario.getEjie().toUpperCase() + "%");
			}
			where.append(" AND t1.EJIE IS NOT NULL");

		}
		if (usuario != null && usuario.getFechaAlta() != null) {
			where.append(" AND t1.FECHA_ALTA = ? ");
			
			params.add(usuario.getFechaAlta());
			
			where.append(" AND t1.FECHA_ALTA IS NOT NULL");

		}
		if (usuario != null && usuario.getFechaBaja() != null) {
			where.append(" AND t1.FECHA_BAJA = ? ");
			
			params.add(usuario.getFechaBaja());
			
			where.append(" AND t1.FECHA_BAJA IS NOT NULL");

		}
		
		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;
	}

}
