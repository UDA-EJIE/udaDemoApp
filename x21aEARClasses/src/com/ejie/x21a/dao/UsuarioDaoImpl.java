/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import com.ejie.x38.dto.Pagination;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.sql.DataSource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Usuario;

/**
 * UsuarioDaoImpl generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */
 
@Repository
@Transactional
public class UsuarioDaoImpl implements UsuarioDao {
    private JdbcTemplate jdbcTemplate;
	private RowMapper<Usuario> rwMap = new RowMapper<Usuario>() {
		public Usuario mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new Usuario(
               resultSet.getString("ID"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2"), resultSet.getString("EJIE"), resultSet.getDate("FECHAALTA"), resultSet.getDate("FECHABAJA")
           ); } } ;

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the Usuario table.
     *
     * @param usuario Pagination
     * @return Usuario
     */
	public Usuario add(Usuario usuario) {
    	String query = "INSERT INTO USUARIO (ID, NOMBRE, APELLIDO1, APELLIDO2, EJIE, FECHA_ALTA, FECHA_BAJA) VALUES (?,?,?,?,?,?,?)";
		this.jdbcTemplate.update(query, usuario.getId(), usuario.getNombre(), usuario.getApellido1(), usuario.getApellido2(), usuario.getEjie(), usuario.getFechaAlta(), usuario.getFechaBaja());
		return usuario;
	}

    /**
     * Updates a single row in the Usuario table.
     *
     * @param usuario Pagination
     * @return Usuario
     */
    public Usuario update(Usuario usuario) {
		String query = "UPDATE USUARIO SET NOMBRE=?, APELLIDO1=?, APELLIDO2=?, EJIE=?, FECHA_ALTA=?, FECHA_BAJA=? WHERE ID=?";
		this.jdbcTemplate.update(query, usuario.getNombre(), usuario.getApellido1(), usuario.getApellido2(), usuario.getEjie(), usuario.getFechaAlta(), usuario.getFechaBaja(), usuario.getId());
		return usuario;
	}

    /**
     * Finds a single row in the Usuario table.
     *
     * @param usuario Pagination
     * @return Usuario
     */
    @Transactional (readOnly = true)
    public Usuario find(Usuario usuario) {
		String query = "SELECT t1.ID ID, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2, t1.EJIE EJIE, t1.FECHA_ALTA FECHAALTA, t1.FECHA_BAJA FECHABAJA FROM USUARIO t1  WHERE t1.ID = ?  ";
		
		List<Usuario> usuarioList = this.jdbcTemplate.query(query, this.rwMap, usuario.getId());
		return (Usuario) DataAccessUtils.uniqueResult(usuarioList);
    }

    /**
     * Removes a single row in the Usuario table.
     *
     * @param usuario Pagination
     * @return
     */
    public void remove(Usuario usuario) {
		String query = "DELETE FROM USUARIO WHERE ID=?";
		this.jdbcTemplate.update(query, usuario.getId());
    }
    
   /**
    * Finds a List of rows in the Usuario table.
    * 
    * @param usuario Usuario
    * @param pagination Pagination
    * @return List 
    */
	@Transactional (readOnly = true)
    public List<Usuario> findAll(Usuario usuario, Pagination pagination) {
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.EJIE EJIE,t1.FECHA_ALTA FECHAALTA,t1.FECHA_BAJA FECHABAJA "); 
		query.append("FROM USUARIO t1 ");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(usuario); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);
		
		List<?> params = (List<?>) mapaWhere.get("params");

		if (pagination != null) {
			query = pagination.getPaginationQuery(query);
		}
		
		return (List<Usuario>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}
	
    /**
     * Counts rows in the Usuario table.
     * 
     * @param usuario Usuario
     * @return Long
     */
    @Transactional (readOnly = true)
    public Long findAllCount(Usuario usuario) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM USUARIO t1 ");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(usuario); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);		
		
		List<?> params = (List<?>) mapaWhere.get("params");
		
		return this.jdbcTemplate.queryForLong(query.toString(), params.toArray());
	}
	
	/**
	 * Finds rows in the Usuario table using like.
     * 
     * @param usuario Usuario
     * @param pagination Pagination
     * @param startsWith Boolean
     * @return List 
     */
	@Transactional (readOnly = true)
    public List<Usuario> findAllLike(Usuario usuario, Pagination pagination, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT  t1.ID ID,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2,t1.EJIE EJIE,t1.FECHA_ALTA FECHAALTA,t1.FECHA_BAJA FECHABAJA "); 
        query.append("FROM USUARIO t1 ");
      	
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(usuario,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (pagination != null) {
			query = pagination.getPaginationQuery(query);
		}
		
		return (List<Usuario>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}
	
	/**
	 * Counts rows in the Usuario table using like.
     * 
     * @param usuario Usuario
     * @param startsWith Boolean
     * @return Long 
     */
	@Transactional (readOnly = true)
    public Long findAllLikeCount(Usuario usuario, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM USUARIO t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(usuario,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForLong(query.toString(), params.toArray());
	}
	
	/**
	 * Returns a map with the needed value to create the conditions to filter by 
	 * the Usuario entity 
	 * 
	 * @param usuario Usuario
	 *            Bean with the criteria values to filter by.
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, ?> getWhereMap (Usuario usuario){
		
		StringBuffer where = new StringBuffer(UsuarioDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (usuario  != null  && usuario.getId() != null ) {
			where.append(" AND t1.ID = ?");
			params.add(usuario.getId());
		}
		if (usuario  != null  && usuario.getNombre() != null ) {
			where.append(" AND t1.NOMBRE = ?");
			params.add(usuario.getNombre());
		}
		if (usuario  != null  && usuario.getApellido1() != null ) {
			where.append(" AND t1.APELLIDO1 = ?");
			params.add(usuario.getApellido1());
		}
		if (usuario  != null  && usuario.getApellido2() != null ) {
			where.append(" AND t1.APELLIDO2 = ?");
			params.add(usuario.getApellido2());
		}
		if (usuario  != null  && usuario.getEjie() != null ) {
			where.append(" AND t1.EJIE = ?");
			params.add(usuario.getEjie());
		}
		if (usuario  != null  && usuario.getFechaAlta() != null ) {
			where.append(" AND t1.FECHA_ALTA = ?");
			params.add(usuario.getFechaAlta());
		}
		if (usuario  != null  && usuario.getFechaBaja() != null ) {
			where.append(" AND t1.FECHA_BAJA = ?");
			params.add(usuario.getFechaBaja());
		}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;		
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA
	
	/**
	 * Returns a map with the needed value to create the conditions to filter by  
	 * the Usuario entity 
	 * 
	 * @param usuario Usuario
	 *            Bean with the criteria values to filter by.
     * @param startsWith Boolean	 
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, ?> getWhereLikeMap (Usuario usuario, Boolean startsWith){
		
		StringBuffer where = new StringBuffer(UsuarioDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (usuario  != null  && usuario.getId() != null ) {
			where.append(" AND UPPER(t1.ID) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(usuario.getId().toUpperCase() +"%");
			}else{
				params.add("%"+usuario.getId().toUpperCase() +"%");
			}
			where.append(" AND t1.ID IS NOT NULL");
	     }			
		if (usuario  != null  && usuario.getNombre() != null ) {
			where.append(" AND UPPER(t1.NOMBRE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(usuario.getNombre().toUpperCase() +"%");
			}else{
				params.add("%"+usuario.getNombre().toUpperCase() +"%");
			}
			where.append(" AND t1.NOMBRE IS NOT NULL");
	     }			
		if (usuario  != null  && usuario.getApellido1() != null ) {
			where.append(" AND UPPER(t1.APELLIDO1) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(usuario.getApellido1().toUpperCase() +"%");
			}else{
				params.add("%"+usuario.getApellido1().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO1 IS NOT NULL");
	     }			
		if (usuario  != null  && usuario.getApellido2() != null ) {
			where.append(" AND UPPER(t1.APELLIDO2) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(usuario.getApellido2().toUpperCase() +"%");
			}else{
				params.add("%"+usuario.getApellido2().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO2 IS NOT NULL");
	     }			
		if (usuario  != null  && usuario.getEjie() != null ) {
			where.append(" AND UPPER(t1.EJIE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(usuario.getEjie().toUpperCase() +"%");
			}else{
				params.add("%"+usuario.getEjie().toUpperCase() +"%");
			}
			where.append(" AND t1.EJIE IS NOT NULL");
	     }			
		if (usuario  != null  && usuario.getFechaAlta() != null ) {
			where.append(" AND t1.FECHA_ALTA = ?");
	     }			
		if (usuario  != null  && usuario.getFechaBaja() != null ) {
			where.append(" AND t1.FECHA_BAJA = ?");
	     }			

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;		
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA
	
	/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;}

