package com.ejie.x21a.dao;

import java.util.List;

import com.ejie.x21a.model.Alumno;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;

/**
 *  * AlumnoDao generated by UDA, 01-mar-2012 9:33:10.
 * @author UDA
 */

public interface TableAlumnoDao {
    
	/*
	 * OPERACIONES CRUD
	 */
	
    /**
     * Inserts a single row in the Alumno table.
     *
     * @param alumno Alumno
     * @return Alumno
     */
    Alumno add(Alumno alumno);

    /**
     * Updates a single row in the Alumno table.
     *
     * @param alumno Alumno
     * @return Alumno
     */
    Alumno update(Alumno alumno);

    /**
     * Finds a single row in the Alumno table.
     *
     * @param alumno Alumno
     * @return Alumno
     */
    Alumno find(Alumno alumno);

    /**
     * Deletes a single row in the Alumno table.
     *
     * @param alumno Alumno
     * @return 
     */
    void remove(Alumno alumno);

    /**
     * Finds a List of rows in the Alumno table.
     *
     * @param alumno Alumno
     * @param tableRequestDto TableRequestDto
     * @return List
     */
    List<Alumno> findAll(Alumno alumno, TableRequestDto tableRequestDto);

	
	/**
     * Finds rows in the Alumno table using like.
     *
     * @param alumno Alumno
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List
     */
	List<Alumno> findAllLike(Alumno alumno, TableRequestDto tableRequestDto, Boolean startsWith);
	

	/*
	 * OPERACIONES RUP_TABLE
	 */
	
	/**
	 * Deletes multiple rows in the Alumno table.
	 *
	 * @param filterAlumno Alumno
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean	 
	 */
	void removeMultiple(Alumno filterAlumno, TableRequestDto tableRequestDto, Boolean startsWith);
	
    /**
     * Counts rows in the Alumno table using like.
     *
     * @param usuario Usuario
     * @param startsWith Boolean
     * @return Long
     */
    Long findAllLikeCount(Alumno alumno, Boolean startsWith);
    
    /**
     * Counts rows in the Alumno table.
     *
     * @param usuario Usuario
     * @return Long
     */
    Long findAllCount(Alumno alumno);
    
    List<TableRowDto<Alumno>> reorderSelection(Alumno alumno, TableRequestDto tableRequestDto, Boolean startsWith);
    
    List<TableRowDto<Alumno>> search(Alumno filterParams, Alumno searchParams, TableRequestDto tableRequestDto, Boolean startsWith);
	
	
    /**
	 * 
	 * @param username
	 * @param errors
	 * @return
	 */
	Boolean isUsernameValid(Alumno alumno);
	
	
	/**
	 * 
	 * @param username
	 * @param errors
	 * @return
	 */
	Boolean isOldPasswordValid(Alumno alumno, String oldPassword);
	
	
	Alumno getImagen(Alumno alumno);
	
}

