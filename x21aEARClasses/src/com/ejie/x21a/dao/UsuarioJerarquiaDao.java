package com.ejie.x21a.dao;

import java.util.List;
import java.util.TreeMap;

import com.ejie.x21a.model.UsuarioJerarquia;
import com.ejie.x38.dto.Jerarquia;
import com.ejie.x38.dto.Pagination;

/**
 * UsuarioJerarquiaDao generated by UDA, 03-oct-2012 10:36:40.
 * @author UDA
 */

public interface UsuarioJerarquiaDao {
    
    /**
     * Inserts a single row in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @return UsuarioJerarquia
     */
    UsuarioJerarquia add(UsuarioJerarquia usuariojerarquia);

    /**
     * Updates a single row in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @return UsuarioJerarquia
     */
    UsuarioJerarquia update(UsuarioJerarquia usuariojerarquia);

    /**
     * Finds a single row in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @return UsuarioJerarquia
     */
    UsuarioJerarquia find(UsuarioJerarquia usuariojerarquia);

    /**
     * Deletes a single row in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @return 
     */
    void remove(UsuarioJerarquia usuariojerarquia);

    /**
     * Finds a List of rows in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @param pagination Pagination
     * @return List
     */
    List<UsuarioJerarquia> findAll(UsuarioJerarquia usuariojerarquia, Pagination pagination);

    /**
     * Counts rows in the UsuarioJerarquia table.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @return Long
     */
    Long findAllCount(UsuarioJerarquia usuariojerarquia);
	
	/**
     * Finds rows in the UsuarioJerarquia table using like.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @param pagination Pagination
     * @param startsWith Boolean
     * @return List
     */
	List<UsuarioJerarquia> findAllLike(UsuarioJerarquia usuariojerarquia, Pagination pagination, Boolean startsWith);
	
    /**
     * Counts rows in the UsuarioJerarquia table using like.
     *
     * @param usuariojerarquia UsuarioJerarquia
     * @param startsWith Boolean
     * @return Long
     */
    Long findAllLikeCount(UsuarioJerarquia usuariojerarquia, Boolean startsWith);
    
    
    
    /*************
	 * JERARQUIA *
	 *************/
	
	/**
	 * @param UsuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @return Jerarquia<UsuarioJerarquia>
	 */
	List<Jerarquia<UsuarioJerarquia>> findAllLikeJerarquia (UsuarioJerarquia UsuarioJerarquia, Pagination pagination);

	/**
	 * @param UsuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @return UsuarioJerarquia
	 */
	Long findAllLikeCountJerarquia (UsuarioJerarquia UsuarioJerarquia, Pagination pagination);
	
	TreeMap<String, TreeMap<String, String>> findAllLikeSelected (UsuarioJerarquia UsuarioJerarquia, Pagination pagination);
}

