/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;

import com.ejie.x38.dto.Pagination;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.sql.DataSource;
import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.Provincia;

/**
 * ProvinciaDaoImpl generated by UDA, 14-ago-2012 12:59:38.
 * @author UDA
 */
 
@Repository
@Transactional
public class ProvinciaDaoImpl implements ProvinciaDao {
    private JdbcTemplate jdbcTemplate;
	private RowMapper<Provincia> rwMap = new RowMapper<Provincia>() {
		public Provincia mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new Provincia(
               resultSet.getBigDecimal("CODE"), resultSet.getString("DESCES"), resultSet.getString("DESCEU"), resultSet.getString("CSS")
           ); } } ;

	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    /**
     * Inserts a single row in the Provincia table.
     *
     * @param provincia Pagination
     * @return Provincia
     */
	public Provincia add(Provincia provincia) {
    	String query = "INSERT INTO PROVINCIA (CODE, DESC_ES, DESC_EU, CSS) VALUES (?,?,?,?)";
		this.jdbcTemplate.update(query, provincia.getCode(), provincia.getDescEs(), provincia.getDescEu(), provincia.getCss());
		return provincia;
	}

    /**
     * Updates a single row in the Provincia table.
     *
     * @param provincia Pagination
     * @return Provincia
     */
    public Provincia update(Provincia provincia) {
		String query = "UPDATE PROVINCIA SET DESC_ES=?, DESC_EU=?, CSS=? WHERE CODE=?";
		this.jdbcTemplate.update(query, provincia.getDescEs(), provincia.getDescEu(), provincia.getCss(), provincia.getCode());
		return provincia;
	}

    /**
     * Finds a single row in the Provincia table.
     *
     * @param provincia Pagination
     * @return Provincia
     */
    @Transactional (readOnly = true)
    public Provincia find(Provincia provincia) {
		String query = "SELECT t1.CODE CODE, t1.DESC_ES DESCES, t1.DESC_EU DESCEU, t1.CSS CSS FROM PROVINCIA t1  WHERE t1.CODE = ?  ";
		
		List<Provincia> provinciaList = this.jdbcTemplate.query(query, this.rwMap, provincia.getCode());
		return (Provincia) DataAccessUtils.uniqueResult(provinciaList);
    }

    /**
     * Removes a single row in the Provincia table.
     *
     * @param provincia Pagination
     * @return
     */
    public void remove(Provincia provincia) {
		String query = "DELETE FROM PROVINCIA WHERE CODE=?";
		this.jdbcTemplate.update(query, provincia.getCode());
    }
    
   /**
    * Finds a List of rows in the Provincia table.
    * 
    * @param provincia Provincia
    * @param pagination Pagination
    * @return List 
    */
	@Transactional (readOnly = true)
    public List<Provincia> findAll(Provincia provincia, Pagination pagination) {
		StringBuilder query = new StringBuilder("SELECT  t1.CODE CODE,t1.DESC_ES DESCES,t1.DESC_EU DESCEU,t1.CSS CSS "); 
		query.append("FROM PROVINCIA t1 ");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(provincia); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);
		
		List<?> params = (List<?>) mapaWhere.get("params");

		if (pagination != null) {
			query = pagination.getPaginationQuery(query);
		}
		
		return (List<Provincia>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}
	
    /**
     * Counts rows in the Provincia table.
     * 
     * @param provincia Provincia
     * @return Long
     */
    @Transactional (readOnly = true)
    public Long findAllCount(Provincia provincia) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM PROVINCIA t1 ");
		
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(provincia); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);		
		
		List<?> params = (List<?>) mapaWhere.get("params");
		
		return this.jdbcTemplate.queryForObject(query.toString(), Long.class, params.toArray());
	}
	
	/**
	 * Finds rows in the Provincia table using like.
     * 
     * @param provincia Provincia
     * @param pagination Pagination
     * @param startsWith Boolean
     * @return List 
     */
	@Transactional (readOnly = true)
    public List<Provincia> findAllLike(Provincia provincia, Pagination pagination, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT  t1.CODE CODE,t1.DESC_ES DESCES,t1.DESC_EU DESCEU,t1.CSS CSS "); 
        query.append("FROM PROVINCIA t1 ");
      	
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(provincia,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (pagination != null) {
			query = pagination.getPaginationQuery(query);
		}
		
		return (List<Provincia>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}
	
	/**
	 * Counts rows in the Provincia table using like.
     * 
     * @param provincia Provincia
     * @param startsWith Boolean
     * @return Long 
     */
	@Transactional (readOnly = true)
    public Long findAllLikeCount(Provincia provincia, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM PROVINCIA t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(provincia,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), Long.class, params.toArray());
	}
	
	/**
	 * Returns a map with the needed value to create the conditions to filter by 
	 * the Provincia entity 
	 * 
	 * @param provincia Provincia
	 *            Bean with the criteria values to filter by.
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, ?> getWhereMap (Provincia provincia){
		
		StringBuffer where = new StringBuffer(ProvinciaDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (provincia  != null  && provincia.getCode() != null ) {
			where.append(" AND t1.CODE = ?");
			params.add(provincia.getCode());
		}
		if (provincia  != null  && provincia.getDescEs() != null ) {
			where.append(" AND t1.DESC_ES = ?");
			params.add(provincia.getDescEs());
		}
		if (provincia  != null  && provincia.getDescEu() != null ) {
			where.append(" AND t1.DESC_EU = ?");
			params.add(provincia.getDescEu());
		}
		if (provincia  != null  && provincia.getCss() != null ) {
			where.append(" AND t1.CSS = ?");
			params.add(provincia.getCss());
		}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;		
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA
	
	/**
	 * Returns a map with the needed value to create the conditions to filter by  
	 * the Provincia entity 
	 * 
	 * @param provincia Provincia
	 *            Bean with the criteria values to filter by.
     * @param startsWith Boolean	 
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, ?> getWhereLikeMap (Provincia provincia, Boolean startsWith){
		
		StringBuffer where = new StringBuffer(ProvinciaDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (provincia  != null  && provincia.getCode() != null ) {
			where.append(" AND t1.CODE = ?");
			params.add(provincia.getCode());
	     }			
		if (provincia  != null  && provincia.getDescEs() != null ) {
			where.append(" AND UPPER(t1.DESC_ES) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(provincia.getDescEs().toUpperCase() +"%");
			}else{
				params.add("%"+provincia.getDescEs().toUpperCase() +"%");
			}
			where.append(" AND t1.DESC_ES IS NOT NULL");
	     }			
		if (provincia  != null  && provincia.getDescEu() != null ) {
			where.append(" AND UPPER(t1.DESC_EU) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(provincia.getDescEu().toUpperCase() +"%");
			}else{
				params.add("%"+provincia.getDescEu().toUpperCase() +"%");
			}
			where.append(" AND t1.DESC_EU IS NOT NULL");
	     }			
		if (provincia  != null  && provincia.getCss() != null ) {
			where.append(" AND UPPER(t1.CSS) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(provincia.getCss().toUpperCase() +"%");
			}else{
				params.add("%"+provincia.getCss().toUpperCase() +"%");
			}
			where.append(" AND t1.CSS IS NOT NULL");
	     }			

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);
		
		return mapWhere;		
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA
	
	/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;}

