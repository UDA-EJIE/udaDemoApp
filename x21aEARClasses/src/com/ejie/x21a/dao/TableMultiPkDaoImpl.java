package com.ejie.x21a.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.ejie.x21a.model.MultiPk;
import com.ejie.x38.dao.RowNumResultSetExtractor;
import com.ejie.x38.dto.JerarquiaDto;
import com.ejie.x38.dto.TableManager;
import com.ejie.x38.dto.TableManagerJerarquia;
import com.ejie.x38.dto.TableRequestDto;
import com.ejie.x38.dto.TableRowDto;
import com.ejie.x38.util.Constants;



/**
 * MultiPkDaoImpl generated by UDA, 28-may-2018 16:28:34.
 * @author UDA
 */

@Repository
@Transactional
public class TableMultiPkDaoImpl implements TableMultiPkDao {


    public static final String[] ORDER_BY_WHITE_LIST = new String[] {"IDA", "IDB", "NOMBRE", "APELLIDO1", "APELLIDO2"};

    private JdbcTemplate jdbcTemplate;

	/*
	 * ROW_MAPPERS
	 */
	private RowMapper<MultiPk> rwMap = new RowMapper<MultiPk>() {
		public MultiPk mapRow(ResultSet resultSet, int rowNum) throws SQLException {
           return new MultiPk(
               resultSet.getBigDecimal("IDA"), resultSet.getBigDecimal("IDB"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2")
           ); } } ;

	private RowMapper<MultiPk> rwMapPK = new RowMapper<MultiPk>() {
		public MultiPk mapRow(ResultSet resultSet, int rowNum) throws SQLException {
			return new MultiPk(
				resultSet.getBigDecimal("IDA"), resultSet.getBigDecimal("IDB")
           ); } } ;

	/**
     * Rowmapper para Jerarquía
     *
     * @param dataSource DataSource
     * @return
     */
	private RowMapper<JerarquiaDto< MultiPk>> rwMapJerarquia = new RowMapper<JerarquiaDto<MultiPk>>() {
		public JerarquiaDto<MultiPk> mapRow(ResultSet resultSet, int rowNum) throws SQLException {

			MultiPk multipk = new MultiPk(resultSet.getBigDecimal("IDA"), resultSet.getBigDecimal("IDB"), resultSet.getString("NOMBRE"), resultSet.getString("APELLIDO1"), resultSet.getString("APELLIDO2"));

			JerarquiaDto<MultiPk> jerarquia = new JerarquiaDto<MultiPk>();
			jerarquia.setModel(multipk);
			jerarquia.setLevel(resultSet.getBigDecimal("LEVEL").intValue());
			jerarquia.setParentNodes(resultSet.getString("PARENTNODES"));
			jerarquia.setIsLeaf(Boolean.parseBoolean(resultSet.getString("ISLEAF")));
			jerarquia.setFilter(Boolean.parseBoolean(resultSet.getString("FILTER")));
			return jerarquia;
		}
	};


	/**
     * Method use to set the datasource.
     *
     * @param dataSource DataSource
     * @return
     */
    @Resource
    public void setDataSource(DataSource dataSource) {
    	this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

	/*
	 * OPERACIONES CRUD
	 */

    /**
     * Inserts a single row in the MultiPk table.
     *
     * @param multipk MultiPk
     * @return MultiPk
     */
	public MultiPk add(MultiPk multipk) {
    	String query = "INSERT INTO MULTI_PK (IDA, IDB, NOMBRE, APELLIDO1, APELLIDO2) VALUES (?,?,?,?,?)";
		this.jdbcTemplate.update(query, multipk.getIda(), multipk.getIdb(), multipk.getNombre(), multipk.getApellido1(), multipk.getApellido2());
		return multipk;
	}

    /**
     * Updates a single row in the MultiPk table.
     *
     * @param multipk MultiPk
     * @return MultiPk
     */
    public MultiPk update(MultiPk multipk) {
		String query = "UPDATE MULTI_PK SET NOMBRE=?, APELLIDO1=?, APELLIDO2=? WHERE IDA=? AND IDB=?";
		this.jdbcTemplate.update(query, multipk.getNombre(), multipk.getApellido1(), multipk.getApellido2(), multipk.getIda(), multipk.getIdb());
		return multipk;
	}

    /**
     * Finds a single row in the MultiPk table.
     *
     * @param multipk MultiPk
     * @return MultiPk
     */
    @Transactional (readOnly = true)
    public MultiPk find(MultiPk multipk) {
		String query = "SELECT t1.IDA IDA, t1.IDB IDB, t1.NOMBRE NOMBRE, t1.APELLIDO1 APELLIDO1, t1.APELLIDO2 APELLIDO2 FROM MULTI_PK t1  WHERE t1.IDA = ?   AND t1.IDB = ?  ";

		List<MultiPk> multipkList = this.jdbcTemplate.query(query, this.rwMap, multipk.getIda() , multipk.getIdb());
		return (MultiPk) DataAccessUtils.uniqueResult(multipkList);
    }

    /**
     * Removes a single row in the MultiPk table.
     *
     * @param multipk MultiPk
     * @return
     */
    public void remove(MultiPk multipk) {
		String query = "DELETE FROM MULTI_PK WHERE IDA=? AND IDB=?";
		this.jdbcTemplate.update(query, multipk.getIda() , multipk.getIdb());
    }
    
    /**
    * Exporta Datos al clipBoard
    *
    */
    public List<MultiPk> getMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto,  Boolean startsWith){
    	StringBuilder sbMultipleSQL = new StringBuilder("SELECT  t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
    	sbMultipleSQL.append("FROM MULTI_PK t1 ");
    	//Where clause & Params
    	Map<String, Object> mapaWhere = this.getWhereLikeMap(filterMultiPk, startsWith);
    	StringBuilder where = new StringBuilder(" WHERE 1=1 ");
    	where.append(mapaWhere.get("query"));
    	sbMultipleSQL.append(where);
    	
    	@SuppressWarnings("unchecked")
    	List<Object> params = (List<Object>) mapaWhere.get("params");
    	
    	sbMultipleSQL = sbMultipleSQL.append(TableManager.getSelectMultipleQuery(tableRequestDto, MultiPk.class, params, "ida", "idb"));
    	
    	
    	return this.jdbcTemplate.query(sbMultipleSQL.toString(), this.rwMap, params.toArray());
    }

   /**
    * Finds a list of rows in the MultiPk table.
    *
    * @param multipk MultiPk
    * @param tableRequestDto TableRequestDto
    * @return List<MultiPk>
    */
	@Transactional (readOnly = true)
    public List<MultiPk> findAll(MultiPk multipk, TableRequestDto tableRequestDto) {
		StringBuilder query = new StringBuilder("SELECT  t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
		query.append("FROM MULTI_PK t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(multipk); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, TableMultiPkDaoImpl.ORDER_BY_WHITE_LIST);
		}

		return (List<MultiPk>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

	/**
	 * Finds rows in the MultiPk table using like.
     *
     * @param multipk MultiPk
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<MultiPk>
     */
	@Transactional (readOnly = true)
    public List<MultiPk> findAllLike(MultiPk multipk, TableRequestDto tableRequestDto, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT  t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
        query.append("FROM MULTI_PK t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(multipk,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		if (tableRequestDto != null) {
			query = TableManager.getPaginationQuery(tableRequestDto, query, TableMultiPkDaoImpl.ORDER_BY_WHITE_LIST);
		}

		return (List<MultiPk>) this.jdbcTemplate.query(query.toString(), this.rwMap, params.toArray());
	}

	/*
	 * OPERACIONES RUP_TABLE
	 */

    /**
     * Counts rows in the MultiPk table.
     *
     * @param multipk MultiPk
     * @return Long
     */
    @Transactional (readOnly = true)
    public Long findAllCount(MultiPk multipk) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM MULTI_PK t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereMap(multipk); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Counts rows in the MultiPk table using like.
     *
     * @param multipk MultiPk
     * @param startsWith Boolean
     * @return Long
     */
	@Transactional (readOnly = true)
    public Long findAllLikeCount(MultiPk multipk, Boolean startsWith) {
		StringBuilder query = new StringBuilder("SELECT COUNT(1) FROM MULTI_PK t1 ");

		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(multipk,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Reorder the data list of MultiPk selected for rup_table
     *
     * @param multipk MultiPk
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<TableRowDto<MultiPk>>
     */
	@Override
	public List<TableRowDto<MultiPk>> reorderSelection(MultiPk multipk, TableRequestDto tableRequestDto, Boolean startsWith) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
		// FROM
        query.append("FROM MULTI_PK t1 ");
		// FILTRADO
		//Where clause & Params
		Map<String, ?> mapaWhere = this.getWhereLikeMap(multipk,startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhere.get("query"));
		query.append(where);

		// Parámetros de filtrado
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhere.get("params");

		// SQL para la reordenación
		StringBuilder sbReorderSelectionSQL =  TableManager.getReorderQuery(query, tableRequestDto, MultiPk.class, filterParamList, "ida", "idb");

		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<MultiPk>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}

	/**
	 * Search method for rup_table
     *
     * @param filterParams MultiPk
     * @param searchParams MultiPk
     * @param tableRequestDto TableRequestDto
     * @param startsWith Boolean
     * @return List<TableRowDto<MultiPk>>
     */
	@Override
	public List<TableRowDto<MultiPk>> search(MultiPk filterParams, MultiPk searchParams, TableRequestDto tableRequestDto, Boolean startsWith) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
		// FROM
        query.append("FROM MULTI_PK t1 ");
        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// FILTRADO
		Map<String, ?> mapaWhereFilter = this.getWhereLikeMap(filterParams, startsWith); 
		StringBuilder where = new StringBuilder(" WHERE 1=1 ");
		where.append(mapaWhereFilter.get("query"));
		query.append(where);
		// Filter params
		@SuppressWarnings("unchecked")
		List<Object> filterParamList = (List<Object>) mapaWhereFilter.get("params");

		// BUSQUEDA
		Map<String, Object> mapaWhereSearch = this.getWhereLikeMap(searchParams, startsWith);
		String searchSQL = ((StringBuilder) mapaWhereSearch.get("query")).toString();
		// Search params
		@SuppressWarnings("unchecked")
		List<Object> searchParamList = (List<Object>) mapaWhereSearch.get("params");

		// SQL
		StringBuilder sbReorderSelectionSQL = TableManager.getSearchQuery(query, tableRequestDto, MultiPk.class, filterParamList, searchSQL, searchParamList, from_alias, "ida", "idb");

		return this.jdbcTemplate.query(sbReorderSelectionSQL.toString(), new RowNumResultSetExtractor<MultiPk>(this.rwMapPK, tableRequestDto), filterParamList.toArray());
	}

	/**
	 * Removes rows from the MultiPk table.
	 *
	 * @param filterMultiPk MultiPk
	 * @param tableRequestDto TableRequestDto
	 * @param startsWith Boolean
     */
	@Override
	public void removeMultiple(MultiPk filterMultiPk, TableRequestDto tableRequestDto, Boolean startsWith) {
		// Like clause and params
    	Map<String, Object> mapWhereLike = this.getWhereLikeMap(filterMultiPk, startsWith);
		
    	// Delete query
    	StringBuilder sbRemoveMultipleSQL = TableManager.getRemoveMultipleQuery(mapWhereLike, tableRequestDto, MultiPk.class, "MULTI_PK", "t1", "ida", "idb");
		
		// Params list. Includes needed params for like and IN/NOT IN clauses
		@SuppressWarnings("unchecked")
		List<Object> params = (List<Object>) mapWhereLike.get("params");
		List<String> selectedIds = tableRequestDto.getMultiselection().getSelectedIds();
		
		for(String row : selectedIds) {
			String[] parts = row.split(Constants.PK_TOKEN);
			for(String param : parts) {
				params.add(param);
			}
		}
		
		this.jdbcTemplate.update(sbRemoveMultipleSQL.toString(), params.toArray());
	}

	/**
	 * Filter in the hierarchical MultiPk table.
     *
     * @param filterMultiPk MultiPk
     * @param tableRequestDto TableRequestDto
     * @return List<JerarquiaDto<MultiPk>>
     */
	@Override
	public List<JerarquiaDto<MultiPk>> findAllLikeJerarquia(MultiPk filterMultiPk, TableRequestDto tableRequestDto) {
		// SELECT
		StringBuilder query = new StringBuilder("SELECT t1.IDA IDA,t1.IDB IDB,t1.NOMBRE NOMBRE,t1.APELLIDO1 APELLIDO1,t1.APELLIDO2 APELLIDO2 ");
		// FROM
        //StringBuilder from = new StringBuilder("FROM MULTI_PK t1 ");
        List<String> from = new ArrayList<String>();
        from.add("MULTI_PK");
        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarquía
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterMultiPk, false);

		//JERARQUIA
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		query = TableManagerJerarquia.getQuery(tableRequestDto, query, mapaWhere, "IDA,IDB", "ID_PADRE", "NOMBRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		query = TableManagerJerarquia.getQuery(tableRequestDto, query, mapaWhere, "ID", "ID_PADRE", "NOMBRE", from, from_alias, joins, businessFilters, businessParams);

		//PAGINACION
		if (tableRequestDto != null) {
			query = TableManagerJerarquia.getPaginationQuery(tableRequestDto, query, TableMultiPkDaoImpl.ORDER_BY_WHITE_LIST);
		}

		List<?> params = (List<?>) mapaWhere.get("params");
		return this.jdbcTemplate.query(query.toString(), this.rwMapJerarquia, params.toArray());
	}

	/**
	 * Count rows in hierarchy
     *
     * @param filterMultiPk MultiPk
     * @param tableRequestDto TableRequestDto
     * @return Long
     */
	@Override
	public Long findAllLikeCountJerarquia(MultiPk filterMultiPk, TableRequestDto tableRequestDto) {
		// FROM
        //StringBuilder from = new StringBuilder("FROM MULTI_PK t1 ");
        List<String> from = new ArrayList<String>();
        from.add("MULTI_PK");

        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarquía
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterMultiPk, false);

		//JERARQUIA
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		StringBuilder query = TableManagerJerarquia.getQueryCount(tableRequestDto, mapaWhere, "IDA,IDB", "ID_PADRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		StringBuilder query = TableManagerJerarquia.getQueryCount(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias, joins, businessFilters, businessParams);


		List<?> params = (List<?>) mapaWhere.get("params");
		return this.jdbcTemplate.queryForObject(query.toString(), params.toArray(), Long.class);
	}

	/**
	 * Find dependent hierarchical rows
     *
     * @param filterMultiPk MultiPk
     * @param tableRequestDto TableRequestDto
     * @return List<TableRowDto<MultiPk>>
     */
	@Override
	public List<TableRowDto<MultiPk>> findAllChild(MultiPk filterMultiPk, TableRequestDto tableRequestDto) {

		// FROM
        //StringBuilder from = new StringBuilder("FROM MULTI_PK t1 ");
        List<String> from = new ArrayList<String>();
        from.add("MULTI_PK");

        //TABLAS_ALIAS
		List<String> from_alias = new ArrayList<String>();
		from_alias.add(" t1 ");

		// JOINS TABLAS
		/*
		 * Ejemplo de como indicar joins entre las tablas de la query
		 */
		/*
		 * StringBuilder joins = new StringBuilder("");
		 * joins.append("AND T1.ID=T2.ID_T1");
		 */

		// CONDICIONES (negocio)
		/*
		 * Ejemplo de como incluir condiciones de negocio en la consulta de la
		 * jerarquía
		 */
		/*
		 * StringBuilder businessFilters = new StringBuilder(); List<Object>
		 * businessParams = new ArrayList<Object>();
		 * businessFilters.append("   AND t1.EJIE = ?  ");
		 * businessParams.add("1");
		 */

		//FILTRO
		Map<String, ?> mapaWhere = this.getWhereLikeMap(filterMultiPk, false);

		//MULTISELECCION
		// Especificar la columna padre correspondiente en lugar de la generada por defecto (ID_PADRE)
		StringBuilder query = TableManagerJerarquia.getQueryChildren(tableRequestDto, mapaWhere, "IDA,IDB", "ID_PADRE", from, from_alias);

		/*
		 * Ejemplo de llamada en caso de indicar joins entre tablas y condiciones de negocio
		 */
//		StringBuilder query = TableManagerJerarquia.getQueryChildren(tableRequestDto, mapaWhere, "ID", "ID_PADRE", from, from_alias, joins, businessFilters, businessParams);

		List<?> params = (List<?>) mapaWhere.get("params");

		return this.jdbcTemplate.query(query.toString(), new RowNumResultSetExtractor<MultiPk>(this.rwMapPK, "ida", "idb"), params.toArray());
	}

	/*
	 * MÉTODOS PRIVADOS
	 */

	/**
	 * Returns a map with the needed value to create the conditions to filter by
	 * the MultiPk entity
	 *
	 * @param multipk MultiPk
	 *            Bean with the criteria values to filter by.
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, ?> getWhereMap (MultiPk multipk){

		StringBuilder where = new StringBuilder(TableMultiPkDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (multipk  != null  && multipk.getIda() != null ) {
			where.append(" AND t1.IDA = ?");
			params.add(multipk.getIda());
		}
		if (multipk  != null  && multipk.getIdb() != null ) {
			where.append(" AND t1.IDB = ?");
			params.add(multipk.getIdb());
		}
		if (multipk  != null  && multipk.getNombre() != null ) {
			where.append(" AND t1.NOMBRE = ?");
			params.add(multipk.getNombre());
		}
		if (multipk  != null  && multipk.getApellido1() != null ) {
			where.append(" AND t1.APELLIDO1 = ?");
			params.add(multipk.getApellido1());
		}
		if (multipk  != null  && multipk.getApellido2() != null ) {
			where.append(" AND t1.APELLIDO2 = ?");
			params.add(multipk.getApellido2());
		}

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA

	/**
	 * Returns a map with the needed value to create the conditions to filter by
	 * the MultiPk entity
	 *
	 * @param multipk MultiPk
	 *            Bean with the criteria values to filter by.
     * @param startsWith Boolean
	 * @return Map created with two keys
	 *         key query stores the sql query syntax
	 *         key params stores the parameter values to be used in the condition sentence.
	 */
	// CHECKSTYLE:OFF CyclomaticComplexity - Generación de código de UDA
	private Map<String, Object> getWhereLikeMap (MultiPk multipk, Boolean startsWith){

		StringBuilder where = new StringBuilder(TableMultiPkDaoImpl.STRING_BUILDER_INIT);
		List<Object> params = new ArrayList<Object>();

		if (multipk  != null  && multipk.getIda() != null ) {
			where.append(" AND t1.IDA = ?");
			params.add(multipk.getIda());
	     }
		if (multipk  != null  && multipk.getIdb() != null ) {
			where.append(" AND t1.IDB = ?");
			params.add(multipk.getIdb());
	     }
		if (multipk  != null  && multipk.getNombre() != null ) {
			where.append(" AND UPPER(t1.NOMBRE) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(multipk.getNombre().toUpperCase() +"%");
			}else{
				params.add("%"+multipk.getNombre().toUpperCase() +"%");
			}
			where.append(" AND t1.NOMBRE IS NOT NULL");
	     }
		if (multipk  != null  && multipk.getApellido1() != null ) {
			where.append(" AND UPPER(t1.APELLIDO1) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(multipk.getApellido1().toUpperCase() +"%");
			}else{
				params.add("%"+multipk.getApellido1().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO1 IS NOT NULL");
	     }
		if (multipk  != null  && multipk.getApellido2() != null ) {
			where.append(" AND UPPER(t1.APELLIDO2) like ? ESCAPE  '\\'");
			if (startsWith){
				params.add(multipk.getApellido2().toUpperCase() +"%");
			}else{
				params.add("%"+multipk.getApellido2().toUpperCase() +"%");
			}
			where.append(" AND t1.APELLIDO2 IS NOT NULL");
	     }

		Map<String,Object> mapWhere = new HashMap<String, Object>();
		mapWhere.put("query", where);
		mapWhere.put("params", params);

		return mapWhere;
	}
	// CHECKSTYLE:ON CyclomaticComplexity - Generación de código de UDA

	/**
	 * StringBuilder initilization value
	 */
	 public static final int STRING_BUILDER_INIT = 4096;}

