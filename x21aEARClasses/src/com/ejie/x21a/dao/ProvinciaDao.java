/*
* Copyright 2011 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.dao;
/**
 * Provincia generated by UDA 1.0, 29-jul-2011 9:08:11.
 */

import com.ejie.x38.dto.Pagination;
import java.util.List;

import com.ejie.x21a.model.Provincia;
/**
 * ProvinciaDao generated by UDA 1.0, 29-jul-2011 9:08:11.
* @author UDA
*/
public interface ProvinciaDao {
    /**
     * Inserts a single row in the Provincia table.
     *
     * @param provincia Provincia
     * @return Provincia
     */
    Provincia add(Provincia provincia);

    /**
     * Updates a single row in the Provincia table.
     *
     * @param provincia Provincia
     * @return Provincia
     */
    Provincia update(Provincia provincia);

    /**
     * Finds a single row in the Provincia table.
     *
     * @param provincia Provincia
     * @return Provincia
     */
    Provincia find(Provincia provincia);

    /**
     * Deletes a single row in the Provincia table.
     *
     * @param provincia Provincia
     * 
     */
    void remove(Provincia provincia);

    /**
     * Finds a List of rows in the Provincia table.
     *
     * @param provincia Provincia
     * @param pagination Pagination
     * @return List
     */
    List<Provincia> findAll(Provincia provincia, Pagination pagination);

    /**
     * Counts rows in the Provincia table.
     *
     * @param provincia Provincia
     * @return List
     */
    Long findAllCount(Provincia provincia);
	 /**
     * Finds rows in the Provincia table using like.
     *
     * @param provincia Provincia
     * @return List
     */
	List<Provincia> findAllLike(Provincia provincia, Pagination pagination, Boolean startsWith);
}

