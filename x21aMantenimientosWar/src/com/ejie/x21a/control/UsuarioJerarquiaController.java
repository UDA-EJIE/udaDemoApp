package com.ejie.x21a.control;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.UsuarioJerarquia;
import com.ejie.x21a.service.UsuarioJerarquiaService;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Jerarquia;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;

/**
 * UsuarioJerarquiaController generated by UDA, 03-oct-2012 10:36:43.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/usuariojerarquia")

public class UsuarioJerarquiaController  {

	private static final Logger logger = LoggerFactory.getLogger(UsuarioJerarquiaController.class);

	@Autowired
	private UsuarioJerarquiaService usuarioJerarquiaService;
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public String getCreateForm(Model model) {
		UsuarioJerarquiaController.logger.info("[GET - View] : usuariojerarquia");
		return "usuariojerarquia";
	}
	
	/**
	 * Method 'getCreateFormGroup'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maintgroup", method = RequestMethod.GET)
	public String getCreateFormGroup(Model model) {
		UsuarioJerarquiaController.logger.info("[GET - View] : usuariojerarquiagroup");
		return "usuariojerarquiagroup";
	}
	
	/**
	 * Method 'getCreateFormMulti'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maintmulti", method = RequestMethod.GET)
	public String getCreateFormMulti(Model model) {
		UsuarioJerarquiaController.logger.info("[GET - View] : usuariojerarquiamulti");
		return "usuariojerarquiamulti";
	}
	
	/**
	 * Method 'getCreateFormMultiGroup'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maintmultigroup", method = RequestMethod.GET)
	public String getCreateFormMultiGroup(Model model) {
		UsuarioJerarquiaController.logger.info("[GET - View] : usuariojerarquiamultigroup");
		return "usuariojerarquiamultigroup";
	}
	
	/**
	 * Method 'getCreateFormCol'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maintcol", method = RequestMethod.GET)
	public String getCreateFormCol(Model model) {
		UsuarioJerarquiaController.logger.info("[GET - View] : usuariojerarquiacol");
		return "usuariojerarquiacol";
	}
	
	/**
	 * Method 'getById'.
	 *
	 * @param id String
	 * @return usuarioJerarquia UsuarioJerarquia
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody UsuarioJerarquia getById(@PathVariable String id) {
        UsuarioJerarquia usuarioJerarquia = new UsuarioJerarquia();
		usuarioJerarquia.setId(id);
        usuarioJerarquia = this.usuarioJerarquiaService.find(usuarioJerarquia);
        UsuarioJerarquiaController.logger.info("[GET - findBy_PK] : Obtener UsuarioJerarquia por PK");
        return usuarioJerarquia;
	}

	/**
	 * Method 'getAll'.
	 *
	 * @param filterUsuarioJerarquia UsuarioJerarquia
	 * @return List
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody List<UsuarioJerarquia> getAll(@ModelAttribute UsuarioJerarquia filterUsuarioJerarquia) {
		UsuarioJerarquiaController.logger.info("[GET - find_ALL] : Obtener UsuarioJerarquia por filtro");
	    return this.usuarioJerarquiaService.findAll(filterUsuarioJerarquia, null);
	}

	/**
	 * Method 'edit'.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia 
	 * @return UsuarioJerarquia
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody UsuarioJerarquia edit(@RequestBody UsuarioJerarquia usuarioJerarquia) {		
        UsuarioJerarquia usuarioJerarquiaAux = this.usuarioJerarquiaService.update(usuarioJerarquia);
		UsuarioJerarquiaController.logger.info("[PUT] : UsuarioJerarquia actualizado correctamente");
        return usuarioJerarquiaAux;
    }

	/**
	 * Method 'add'.
	 *
	 * @param usuarioJerarquia UsuarioJerarquia 
	 * @return UsuarioJerarquia
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody UsuarioJerarquia add(@RequestBody UsuarioJerarquia usuarioJerarquia) {		
        UsuarioJerarquia usuarioJerarquiaAux = this.usuarioJerarquiaService.add(usuarioJerarquia);
        UsuarioJerarquiaController.logger.info("[POST] : UsuarioJerarquia insertado correctamente");
    	return usuarioJerarquiaAux;
	}

	/**
	 * Method 'remove'.
	 *
	 * @param id String
	 * @return usuarioJerarquia
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody UsuarioJerarquia remove(@PathVariable String id) {
        UsuarioJerarquia usuarioJerarquia = new UsuarioJerarquia();
        usuarioJerarquia.setId(id);
        this.usuarioJerarquiaService.remove(usuarioJerarquia);
       	UsuarioJerarquiaController.logger.info("[DELETE] : UsuarioJerarquia borrado correctamente");
       	return usuarioJerarquia;
    }
	
	/**
	 * Method 'removeAll'.
	 *
	 * @param usuarioJerarquiaIds List
	 * @return usuarioJerarquiaList
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> usuarioJerarquiaIds) {
        List<UsuarioJerarquia> usuarioJerarquiaList = new ArrayList<UsuarioJerarquia>();
        for (List<String> usuarioJerarquiaId:usuarioJerarquiaIds) {
		    Iterator<String> iterator = usuarioJerarquiaId.iterator();
		    UsuarioJerarquia usuarioJerarquia = new UsuarioJerarquia(); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
	        usuarioJerarquia.setId(ObjectConversionManager.convert(iterator.next(), String.class));
		    usuarioJerarquiaList.add(usuarioJerarquia);
	    }
        this.usuarioJerarquiaService.removeMultiple(usuarioJerarquiaList);
		UsuarioJerarquiaController.logger.info("[POST - DELETE_ALL] : UsuarioJerarquia borrados correctamente");
		return usuarioJerarquiaIds;
	}	

	/**
	 * Method 'getAllJQGrid'.
	 *
	 * @param filterUsuarioJerarquia UsuarioJerarquia
	 * @param pagination Pagination
	 * @return JQGridJSONModel
	 */
//	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
//	public @ResponseBody JQGridJSONModel getAllJQGrid(@ModelAttribute UsuarioJerarquia filterUsuarioJerarquia, @ModelAttribute Pagination pagination) {
//        List<UsuarioJerarquia> usuarioJerarquias = this.usuarioJerarquiaService.findAll(filterUsuarioJerarquia, pagination);
//        Long recordNum = this.usuarioJerarquiaService.findAllCount(filterUsuarioJerarquia);
//        UsuarioJerarquiaController.logger.info("[GET - jqGrid] : Obtener UsuarioJerarquia");
//		return new JQGridJSONModel(pagination, recordNum, usuarioJerarquias);
//	}
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
	public @ResponseBody JQGridJSONModel getAllJQGrid(@ModelAttribute UsuarioJerarquia filterUsuarioJerarquia, @ModelAttribute Pagination pagination){
		List<Jerarquia<UsuarioJerarquia>> listUsuarioJerarquia = this.usuarioJerarquiaService.findAllLikeJerarquia(filterUsuarioJerarquia, pagination);
		Long recordNum = this.usuarioJerarquiaService.findAllLikeCountJerarquia(filterUsuarioJerarquia, pagination);
		UsuarioJerarquiaController.logger.info("[GET - jqGrid] : Obtener Jerarquia");
		return new JQGridJSONModel(pagination, recordNum, listUsuarioJerarquia);
	}
	
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel_selected=true"})
	public @ResponseBody TreeMap<String, TreeMap<String, String>> getAllJQGridSelected (@ModelAttribute UsuarioJerarquia filterUsuarioJerarquia, @ModelAttribute Pagination pagination){
		return this.usuarioJerarquiaService.findAllLikeSelected(filterUsuarioJerarquia, pagination);
	}
	
}