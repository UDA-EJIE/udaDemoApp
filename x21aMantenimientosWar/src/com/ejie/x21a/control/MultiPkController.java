package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.MultiPk;
import com.ejie.x21a.service.MultiPkService;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.util.ObjectConversionManager;

/**
 * MultiPkController generated by UDA, 06-sep-2012 8:37:04.
 * @author UDA
 */
 
@Controller
@RequestMapping (value = "/multipk")

public class MultiPkController  {

	private static final Logger logger = LoggerFactory.getLogger(MultiPkController.class);

	@Autowired
	private MultiPkService multiPkService;
	
	/**
	 * Method 'getCreateForm'.
	 *
	 * @param model Model
	 * @return String
	 */
	@RequestMapping(value = "maint", method = RequestMethod.GET)
	public String getCreateForm(Model model) {
		MultiPkController.logger.info("[GET - View] : multipk");
		return "multipk";
	}

	/**
	 * Method 'getById'.
	 *
	 * @param ida BigDecimal
	 * @param idb BigDecimal
	 * @return multiPk MultiPk
	 */
	@RequestMapping(value = "/{ida}/{idb}", method = RequestMethod.GET)
	public @ResponseBody MultiPk getById(@PathVariable BigDecimal ida, @PathVariable BigDecimal idb) {
        MultiPk multiPk = new MultiPk();
		multiPk.setIda(ida);
		multiPk.setIdb(idb);
        multiPk = this.multiPkService.find(multiPk);
        MultiPkController.logger.info("[GET - findBy_PK] : Obtener MultiPk por PK");
        return multiPk;
	}

	/**
	 * Method 'getAll'.
	 *
	 * @param filterMultiPk MultiPk
	 * @return List
	 */
	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody List<MultiPk> getAll(@ModelAttribute MultiPk filterMultiPk) {
		MultiPkController.logger.info("[GET - find_ALL] : Obtener MultiPk por filtro");
	    return this.multiPkService.findAll(filterMultiPk, null);
	}

	/**
	 * Method 'edit'.
	 *
	 * @param multiPk MultiPk 
	 * @return MultiPk
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody MultiPk edit(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.update(multiPk);
		MultiPkController.logger.info("[PUT] : MultiPk actualizado correctamente");
        return multiPkAux;
    }

	/**
	 * Method 'add'.
	 *
	 * @param multiPk MultiPk 
	 * @return MultiPk
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody MultiPk add(@RequestBody MultiPk multiPk) {		
        MultiPk multiPkAux = this.multiPkService.add(multiPk);
        MultiPkController.logger.info("[POST] : MultiPk insertado correctamente");
    	return multiPkAux;
	}

	/**
	 * Method 'remove'.
	 *
	 * @param ida BigDecimal
	 * @param idb BigDecimal
	 * @return multiPk
	 */
	@RequestMapping(value = "/{ida}/{idb}", method = RequestMethod.DELETE)
	@ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody MultiPk remove(@PathVariable BigDecimal ida, @PathVariable BigDecimal idb) {
        MultiPk multiPk = new MultiPk();
        multiPk.setIda(ida);
        multiPk.setIdb(idb);
        this.multiPkService.remove(multiPk);
       	MultiPkController.logger.info("[DELETE] : MultiPk borrado correctamente");
       	return multiPk;
    }
	
	/**
	 * Method 'removeAll'.
	 *
	 * @param multiPkIds List
	 * @return multiPkList
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> multiPkIds) {
        List<MultiPk> multiPkList = new ArrayList<MultiPk>();
        for (List<String> multiPkId:multiPkIds) {
		    Iterator<String> iterator = multiPkId.iterator();
		    MultiPk multiPk = new MultiPk(); //NOPMD - Objeto nuevo en la lista (parametro del servicio)
	        multiPk.setIda(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
	        multiPk.setIdb(ObjectConversionManager.convert(iterator.next(), java.math.BigDecimal.class));
		    multiPkList.add(multiPk);
	    }
        this.multiPkService.removeMultiple(multiPkList);
		MultiPkController.logger.info("[POST - DELETE_ALL] : MultiPk borrados correctamente");
		return multiPkIds;
	}	

	/**
	 * Method 'getAllJQGrid'.
	 *
	 * @param filterMultiPk MultiPk
	 * @param pagination Pagination
	 * @return JQGridJSONModel
	 */
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
	public @ResponseBody JQGridJSONModel getAllJQGrid(@ModelAttribute MultiPk filterMultiPk, @ModelAttribute Pagination pagination) {
        List<MultiPk> multiPks = this.multiPkService.findAll(filterMultiPk, pagination);
        Long recordNum = this.multiPkService.findAllCount(filterMultiPk);
        MultiPkController.logger.info("[GET - jqGrid] : Obtener MultiPk");
		return new JQGridJSONModel(pagination, recordNum, multiPks);
	}
	
}	
