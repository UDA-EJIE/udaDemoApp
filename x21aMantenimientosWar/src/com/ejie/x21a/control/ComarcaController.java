/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.ejie.x21a.model.Comarca;
import com.ejie.x21a.service.ComarcaService;
/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
* @author UDA
 */
@Controller
@RequestMapping (value = "/comarca")

public class ComarcaController  {

	private static final Logger logger = LoggerFactory.getLogger(ComarcaController.class);

	@Autowired 
	private ComarcaService comarcaService;
	

	
		
	/**
	 * Method 'getById'.
	 * @param  id String
	 * @return String
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Comarca getById(@PathVariable BigDecimal id) {
        Comarca comarca = new Comarca();
        comarca.setCode(id);
        comarca = this.comarcaService.find(comarca);
        
        return comarca;
	}
	



	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(@ModelAttribute() Comarca usuarioFilter){
		ComarcaController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return this.comarcaService.findAllLike(usuarioFilter, null, false);
	}
	
	/**
	 * Method 'getAllCount'.
	 * @param filterUsuario Usuario 
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(@RequestParam(value = "usuario", required = false) Comarca  filterUsuario) {
		return comarcaService.findAllLikeCount(filterUsuario != null ? filterUsuario: new Comarca (),false);
	}
	
//	@RequestMapping(value = "/search", method = RequestMethod.POST)
//	public @ResponseBody Object search(@RequestBody SearchModel<Comarca, Comarca> search){
//		ComarcaController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
//
//		return this.comarcaService.search(search.getFilterParams(Comarca.class) ,search.getSearchParams(Comarca.class), search.getPagination(), false);
//	}
	
	 /**
	 * Method 'edit'.
	 * @param usuario Usuario 
	 * @return Usuario
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Comarca edit(@Validated @RequestBody Comarca usuario) {		
        Comarca usuarioAux = this.comarcaService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }

	 /**
	 * Method 'add'.
	 * @param usuario Usuario 
	 * @return Usuario
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Comarca add(@Validated @RequestBody Comarca usuario) {		
        Comarca usuarioAux = this.comarcaService.add(usuario);
        logger.info("Entity correctly inserted!");
    	return usuarioAux;
	}

	 /**
	 * Method 'remove'.
	 * @param id String
	 *
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Comarca remove(@PathVariable(value="id") BigDecimal id, HttpServletResponse  response) {
        Comarca comarca = new Comarca();
        comarca.setCode(id);
        this.comarcaService.remove(comarca);
        logger.info("Entity correctly deleted!");
        return comarca;
    }
	
	 /**
	 * Method 'removeAll'.
	 * @param  comarcasIds  ArrayList
	 *
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody List<List<BigDecimal>> removeMultiple(@RequestBody List<List<BigDecimal>> comarcasIds) {
		List<Comarca> comarcaList = new ArrayList<Comarca>();
        for (List<BigDecimal> usuarioId:comarcasIds) {
		    Iterator<BigDecimal> iterator = usuarioId.iterator();
			    Comarca comarca = new Comarca();
		        comarca.setCode(iterator.next());
			    comarcaList.add(comarca);
	    }
        this.comarcaService.removeMultiple(comarcaList);
        logger.info("All entities correctly deleted!");
        return comarcasIds;
	}	
	
	
}