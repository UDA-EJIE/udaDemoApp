/*
* Copyright 2012 E.J.I.E., S.A.
*
* Licencia con arreglo a la EUPL, Versión 1.1 exclusivamente (la «Licencia»);
* Solo podrá usarse esta obra si se respeta la Licencia.
* Puede obtenerse una copia de la Licencia en
*
* http://ec.europa.eu/idabc/eupl.html
*
* Salvo cuando lo exija la legislación aplicable o se acuerde por escrito,
* el programa distribuido con arreglo a la Licencia se distribuye «TAL CUAL»,
* SIN GARANTÍAS NI CONDICIONES DE NINGÚN TIPO, ni expresas ni implícitas.
* Véase la Licencia en el idioma concreto que rige los permisos y limitaciones
* que establece la Licencia.
*/
package com.ejie.x21a.control;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MaxUploadSizeExceededException;

import com.ejie.x21a.model.Alumno;
import com.ejie.x21a.model.NoraAutonomia;
import com.ejie.x21a.model.NoraPais;
import com.ejie.x21a.model.Usuario;
import com.ejie.x21a.service.ComarcaService;
import com.ejie.x21a.service.LocalidadService;
import com.ejie.x21a.service.NoraAutonomiaService;
import com.ejie.x21a.service.NoraPaisService;
import com.ejie.x21a.service.UsuarioService;
import com.ejie.x38.dto.JQGridJSONModel;
import com.ejie.x38.dto.Pagination;
import com.ejie.x38.dto.SearchModel;
import com.ejie.x38.util.ObjectConversionManager;
/**
 * UsuarioServiceImpl generated by UDA 1.0, 26-may-2011 13:46:35.
* @author UDA
 */
@Controller
@RequestMapping (value = "/table")

public class TableController  {

	private static final Logger logger = LoggerFactory.getLogger(TableController.class);

	@Resource
	private ReloadableResourceBundleMessageSource messageSource;
	
	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private NoraPaisService noraPaisService;
	
	@Autowired
	private NoraAutonomiaService noraAutonomiaService;
	
	@Autowired 
	private ComarcaService comarcaService;
	
	@Autowired 
	private LocalidadService localidadService;
	
	
	@RequestMapping(value = "formEdit", method = RequestMethod.GET)
	public String getFormEdit(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaFormEdit", null, LocaleContextHolder.getLocale()));
		return "tableFormEdit";
	}
	
	@RequestMapping(value = "formEditMultiselection", method = RequestMethod.GET)
	public String getFormEditMultiselection(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaFormEditMultiselection", null, LocaleContextHolder.getLocale()));
		return "tableFormEditMultiselection";
	}
	
	@RequestMapping(value = "inlineEdit", method = RequestMethod.GET)
	public String getInlineEdit(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaInlineEdit", null, LocaleContextHolder.getLocale()));
		return "tableInlineEdit";
	}
	
	@RequestMapping(value = "inlineEditExcelMode", method = RequestMethod.GET)
	public String getInlineEditExcelMode(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaInlineEditExcelMode", null, LocaleContextHolder.getLocale()));
		return "tableInlineEditExcelMode";
	}
	
	@RequestMapping(value = "inlineEditMultiselection", method = RequestMethod.GET)
	public String getInlineEditMultiselection(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaInlineEditMultiselection", null, LocaleContextHolder.getLocale()));
		return "tableInlineEditMultiselection";
	}
	
	@RequestMapping(value = "grouping", method = RequestMethod.GET)
	public String getGrouping(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaGrouping", null, LocaleContextHolder.getLocale()));
		return "tableGrouping";
	}
	
	@RequestMapping(value = "masterDetail", method = RequestMethod.GET)
	public String getMasterDetail(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaMasterDetail", null, LocaleContextHolder.getLocale()));
		return "tableMasterDetail";
	}
	
	@RequestMapping(value = "allFeatures", method = RequestMethod.GET)
	public String getAllFeatures(Model model) {
		model.addAttribute("tituloPagina", messageSource.getMessage("tablaAllFeatures", null, LocaleContextHolder.getLocale()));
		return "tableAllFeatures";
	}
	
	@RequestMapping(value = "alumnomaint", method = RequestMethod.GET)
	public String getAlumnoSimple(Model model) {
		List<NoraPais> paises = noraPaisService.findAll(null, null);
		model.addAttribute("paises",paises);
		
		List<NoraAutonomia> autonomias = noraAutonomiaService.findAll(null, null);
		model.addAttribute("autonomias",autonomias);
		
		Alumno alumno = new Alumno();
		
		NoraPais pais = new NoraPais();
		pais.setId("108");
		alumno.setPais(pais);
		
		model.addAttribute("alumno",alumno);
		
		return "tablealumno";
	}
	
	
	/**
	 * Method 'getById'.
	 * @param  id String
	 * @return String
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody Usuario getById(@PathVariable String id) {
        Usuario usuario = new Usuario();
		usuario.setId(id);
        usuario = this.usuarioService.find(usuario);
        
        return usuario;
	}
	

	 /**
	 * Method 'getAll'.
	*@param	  id String
	*@param	  nombre String
	*@param	  apellido1 String
	*@param	  apellido2 String
	*@param	  ejie String
	*@param	  fechaAlta Date
	*@param	  fechaBaja Date
	*@param request HttpServletRequest
	 * @return String
	 */
	@RequestMapping(method = RequestMethod.GET, headers={"JQGridModel=true"})
	public @ResponseBody Object getAllJQGrid(
			@ModelAttribute() Usuario usuarioFilter, @ModelAttribute Pagination pagination,
			HttpServletRequest request) {
			TableController.logger.info("[GET - jqGrid] : Obtener Usuarios");
            List<Usuario> usuarios =  this.usuarioService.findAllLike(usuarioFilter, pagination, false);
            
			Long recordNum =  getAllCount(usuarioFilter);
			        
			return new JQGridJSONModel(pagination, recordNum, usuarios);      
	}

	@RequestMapping(method = RequestMethod.GET)
	public @ResponseBody Object getAll(@ModelAttribute() Usuario usuarioFilter){
		TableController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");
		return this.usuarioService.findAllLike(usuarioFilter, null, false);
	}
	
	/**
	 * Method 'getAllCount'.
	 * @param filterUsuario Usuario 
	 * @return Long
	 */
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	public @ResponseBody Long getAllCount(@RequestParam(value = "usuario", required = false) Usuario  filterUsuario) {
		return usuarioService.findAllLikeCount(filterUsuario != null ? filterUsuario: new Usuario (),false);
	}
	
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public @ResponseBody Object search(@RequestBody SearchModel<Usuario, Usuario> search){
		TableController.logger.info("[GET - find_ALL] : Obtener Usuarios por filtro");

		return this.usuarioService.search(search.getFilterParams(Usuario.class) ,search.getSearchParams(Usuario.class), search.getPagination(), false);
	}
	
	 /**
	 * Method 'edit'.
	 * @param usuario Usuario 
	 * @return Usuario
	 */
	@RequestMapping(method = RequestMethod.PUT)
    public @ResponseBody Usuario edit(@Validated @RequestBody Usuario usuario) {		
        Usuario usuarioAux = this.usuarioService.update(usuario);
		logger.info("Entity correctly updated!");
        return usuarioAux;
    }

	 /**
	 * Method 'add'.
	 * @param usuario Usuario 
	 * @return Usuario
	 */
	@RequestMapping(method = RequestMethod.POST)
	public @ResponseBody Usuario add(@Validated @RequestBody Usuario usuario) {		
        Usuario usuarioAux = this.usuarioService.add(usuario);
        logger.info("Entity correctly inserted!");
    	return usuarioAux;
	}

	 /**
	 * Method 'remove'.
	 * @param id String
	 *
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(value=HttpStatus.OK)
    public @ResponseBody Usuario remove(@PathVariable(value="id") String id, HttpServletResponse  response) {
        Usuario usuario = new Usuario();
        usuario.setId(id);
        this.usuarioService.remove(usuario);
        logger.info("Entity correctly deleted!");
        return usuario;
    }
	
	 /**
	 * Method 'removeAll'.
	 * @param  usuarioIds  ArrayList
	 *
	 */	
	@RequestMapping(value = "/deleteAll", method = RequestMethod.POST)
	@ResponseStatus(value=HttpStatus.OK)
	public @ResponseBody List<List<String>> removeMultiple(@RequestBody List<List<String>> usuarioIds) {
		List<Usuario> usuarioList = new ArrayList<Usuario>();
        for (List<String> usuarioId:usuarioIds) {
		    Iterator<String> iterator = usuarioId.iterator();
			    Usuario usuario = new Usuario();
		        usuario.setId(ObjectConversionManager.convert(iterator.next(), String.class));
			    usuarioList.add(usuario);
	    }
        this.usuarioService.removeMultiple(usuarioList);
        logger.info("All entities correctly deleted!");
        return usuarioIds;
	}	
}